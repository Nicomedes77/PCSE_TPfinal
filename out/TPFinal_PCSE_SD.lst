
CodigosNico/TPFinal_PCSE_SD/out/TPFinal_PCSE_SD.elf:     file format elf32-littlearm
CodigosNico/TPFinal_PCSE_SD/out/TPFinal_PCSE_SD.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0006c1

Program Header:
0x70000001 off    0x00016338 vaddr 0x1a006338 paddr 0x1a006338 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x000012b0 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00006340 memsz 0x00006340 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a006340 align 2**16
         filesz 0x000000bc memsz 0x000000bc flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006334  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000bc  10000000  1a006340  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200bc  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200bc  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200bc  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200bc  2**2
                  CONTENTS
  6 .bss          000011f0  100000c0  100000c0  000000c0  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200bc  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200bc  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200bc  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200bc  2**2
                  CONTENTS
 11 .init_array   00000004  1a006334  1a006334  00016334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a006338  1a006338  00016338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000200bc  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000200bc  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000200bc  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000200bc  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000200bc  2**2
                  CONTENTS
 18 .noinit       00000000  100012b0  100012b0  000200bc  2**2
                  CONTENTS
 19 .debug_info   0002bf49  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 000059b3  00000000  00000000  0004c005  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000126ab  00000000  00000000  000519b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000ea8  00000000  00000000  00064063  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000f48  00000000  00000000  00064f0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000f15c  00000000  00000000  00065e53  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0001bb6f  00000000  00000000  00074faf  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0002e945  00000000  00000000  00090b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  000bf463  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  000bf4cb  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00002c74  00000000  00000000  000bf500  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000c0 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a006334 l    d  .init_array	00000000 .init_array
1a006338 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100012b0 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 medicion.c
100000c0 l     O .bss	00000001 i.14499
100000c1 l     O .bss	00000001 n.14500
00000000 l    df *ABS*	00000000 system.c
100000c4 l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 ff.c
1a00076c l     F .text	0000000a ld_word
1a000776 l     F .text	00000016 ld_dword
1a00078c l     F .text	0000004c ld_qword
1a0007d8 l     F .text	00000008 st_word
1a0007e0 l     F .text	00000014 st_dword
1a0007f4 l     F .text	00000026 st_qword
1a00081a l     F .text	00000012 mem_cpy
1a00082c l     F .text	0000000a mem_set
1a000836 l     F .text	0000001c mem_cmp
1a000852 l     F .text	00000010 chk_chr
1a000862 l     F .text	00000004 dbc_1st
1a000868 l     F .text	000000c0 tchar2uni
1a000928 l     F .text	00000018 clst2sect
1a000940 l     F .text	00000026 ld_clust
1a000966 l     F .text	00000026 st_clust
1a00098c l     F .text	00000084 pick_lfn
1a000a10 l     F .text	00000078 put_lfn
1a000a88 l     F .text	000000b6 gen_numname
1a000b3e l     F .text	0000001c sum_sfn
1a000b5a l     F .text	00000030 xdir_sum
1a000b8a l     F .text	0000002e init_alloc_info
1a000bb8 l     F .text	000000b0 get_ldnumber
1a000c68 l     F .text	00000048 validate
1a000cb0 l     F .text	00000050 sync_window
1a000d00 l     F .text	00000036 move_window
1a000d38 l     F .text	00000088 check_fs
1a000dc0 l     F .text	000004a4 find_volume
1a001264 l     F .text	00000086 find_bitmap
1a0012ea l     F .text	00000078 change_bitmap
1a001362 l     F .text	0000011e put_fat
1a001480 l     F .text	00000030 fill_last_frag
1a0014b0 l     F .text	00000032 fill_first_frag
1a0014e2 l     F .text	0000016e get_fat
1a001650 l     F .text	000000b4 dir_sdi
1a001704 l     F .text	000001cc create_chain
1a0018d0 l     F .text	0000013e remove_chain
1a001a0e l     F .text	00000052 dir_clear
1a001a60 l     F .text	000000dc dir_next
1a001b3c l     F .text	00000100 load_xdir
1a001c3c l     F .text	0000003a load_obj_xdir
1a001c76 l     F .text	000000ea dir_read
1a001d60 l     F .text	0000006c dir_alloc
1a001dcc l     F .text	0000005e store_xdir
1a001e2c l     F .text	00000244 create_name
1a002070 l     F .text	00000034 xname_sum
1a0020a4 l     F .text	00000082 create_xdir
1a002128 l     F .text	0000009c cmp_lfn
1a0021c4 l     F .text	00000172 dir_find
1a002336 l     F .text	000000b4 follow_path
1a0023ec l     F .text	00000208 dir_register
1a0025f4 l     F .text	0000008c sync_fs
100000c8 l     O .bss	00000260 DirBuf
10000328 l     O .bss	00000008 FatFs
10000330 l     O .bss	00000002 Fsid
10000334 l     O .bss	00000200 LfnBuf
1a005964 l     O .text	00000080 ExCvt
1a0059e4 l     O .text	0000000d LfnOfs
1a0059f4 l     O .text	00000008 VolumeStr
00000000 l    df *ABS*	00000000 ffunicode.c
1a005a30 l     O .text	000001f2 cvt1.5576
1a005c24 l     O .text	000000bc cvt2.5577
1a005ce0 l     O .text	00000100 uc850
00000000 l    df *ABS*	00000000 fssdc.c
1a002e1c l     F .text	00000018 newCardStatus
1a002e34 l     F .text	00000004 chk_power
1a002e38 l     F .text	00000024 SSPSend
1a002e5c l     F .text	00000018 xmit_spi
1a002e98 l     F .text	0000001e rcvr_spi
1a002eb8 l     F .text	00000024 wait_ready
1a002edc l     F .text	00000018 deselect
1a002ef4 l     F .text	00000024 select_
1a002f18 l     F .text	00000084 send_cmd
1a002f9c l     F .text	0000005c xmit_datablock
1a002ff8 l     F .text	00000060 rcvr_datablock
10000534 l     O .bss	00000001 CardType
10000535 l     O .bss	00000001 Timer1
10000536 l     O .bss	00000001 Timer2
10000538 l     O .bss	00000004 g_statusUpdateCallback
10000000 l     O .data	00000001 g_cardStatus
10000001 l     O .data	00000001 g_diskStats
10000004 l     O .data	00000004 g_spiFastClock
10000008 l     O .data	00000004 g_spiSlowClock
00000000 l    df *ABS*	00000000 ffdisks.c
00000000 l    df *ABS*	00000000 board.c
1a00377c l     F .text	00000044 Board_LED_Init
1a0037c0 l     F .text	00000040 Board_TEC_Init
1a003800 l     F .text	00000040 Board_GPIO_Init
1a003840 l     F .text	00000030 Board_ADC_Init
1a003870 l     F .text	00000038 Board_SPI_Init
1a0038a8 l     F .text	00000024 Board_I2C_Init
1a005ffc l     O .text	00000008 GpioButtons
1a006004 l     O .text	0000000c GpioLeds
1a006010 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a006028 l     O .text	00000004 InitClkStates
1a00602c l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a003a00 l     F .text	0000002c Chip_UART_GetIndex
1a0060a0 l     O .text	00000008 UART_BClock
1a0060a8 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a003b9c l     F .text	00000014 Chip_ADC_GetClockIndex
1a003bb0 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a003c64 l     F .text	000000a0 pll_calc_divs
1a003d04 l     F .text	0000010c pll_get_frac
1a003e10 l     F .text	0000004c Chip_Clock_FindBaseClock
1a004084 l     F .text	00000022 Chip_Clock_GetDivRate
1000053c l     O .bss	00000008 audio_usb_pll_freq
1a0060bc l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a006128 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 rtc_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a004446 l     F .text	0000001a SSP_Write2BFifo
1a004460 l     F .text	00000018 SSP_Write1BFifo
1a004478 l     F .text	00000042 SSP_Read2BFifo
1a0044ba l     F .text	00000040 SSP_Read1BFifo
1a0044fc l     F .text	00000014 Chip_SSP_GetClockIndex
1a004510 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000010 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000048 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_sleep.c
00000000 l    df *ABS*	00000000 sapi_rtc.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a006170 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_spi.c
00000000 l    df *ABS*	00000000 sapi_tick.c
10000544 l     O .bss	00000004 callBackFuncParams
10000548 l     O .bss	00000008 tickCounter
10000550 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a004988 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10000554 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 impure.c
1000005c l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a006338 l       .init_array	00000000 __init_array_end
1a006334 l       .bss_RAM5	00000000 __preinit_array_end
1a006334 l       .init_array	00000000 __init_array_start
1a006334 l       .bss_RAM5	00000000 __preinit_array_start
1a0058a0 g     F .text	00000010 _malloc_usable_size_r
1a003ea8 g     F .text	0000001c Chip_Clock_GetDividerSource
1a00479c g     F .text	00000014 uartRxRead
1a000130  w    F .text	00000002 DebugMon_Handler
1a003058 g     F .text	0000000c FSSDC_FatFs_DiskStatus
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0000c0 g       .text	00000000 __section_table_start
1a000166  w    F .text	00000002 I2C0_IRQHandler
1a00482c g     F .text	0000001e uartReadByte
1a003948 g     F .text	00000008 __stdio_init
100012a4 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a0043ae g     F .text	0000002c Chip_RTC_GetFullTime
1a000126  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a003c56 g     F .text	0000000c Chip_ADC_SetResolution
1a0055a0 g     F .text	0000000c __malloc_unlock
1a003904 g     F .text	00000012 Board_UARTPutSTR
1a00495c g     F .text	0000002c SysTick_Handler
1a003a80 g     F .text	00000040 Chip_UART_SetBaud
1a000166  w    F .text	00000002 SPIFI_ADCHS_IRQHandler
100012a5 g     O .bss	00000001 __lock___arc4random_mutex
1a0006bc  w    F .text	00000002 initialise_monitor_handles
1a000166  w    F .text	00000002 SDIO_IRQHandler
10000560 g     O .bss	00000250 fp
1a005560 g     F .text	00000034 memmove
1a000132  w    F .text	00000002 PendSV_Handler
1a000124  w    F .text	00000002 NMI_Handler
1a006340 g       .ARM.exidx	00000000 __exidx_end
1a0000fc g       .text	00000000 __data_section_table_end
1a000166  w    F .text	00000002 UART1_IRQHandler
53ff7372 g       *ABS*	00000000 __valid_user_code_checksum
1a006340 g       .ARM.exidx	00000000 _etext
1a004750 g     F .text	00000034 rtcRead
1a000166  w    F .text	00000002 USB1_IRQHandler
1a002d80 g     F .text	0000009c ff_wtoupper
100007b0 g     O .bss	00000238 fs
1a000166  w    F .text	00000002 TIMER3_IRQHandler
1a004126 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000166  w    F .text	00000002 UART0_IRQHandler
1a000154 g     F .text	00000012 bss_init
1a000364 g     F .text	00000038 setModoBipolar
1a004fec g     F .text	0000001c memcpy
1a000166  w    F .text	00000002 SGPIO_IRQHandler
1a0056b0 g     F .text	000001f0 _svfprintf_r
1a0003d4 g     F .text	00000040 calMedicion
1a00371a g     F .text	0000000e disk_initialize
1a004c9c g     F .text	00000000 .hidden __aeabi_uldivmod
100012b0 g       .noinit	00000000 _noinit
1000129c g     O .bss	00000004 SystemCoreClock
1a003a2c g     F .text	00000054 Chip_UART_Init
1a000166  w    F .text	00000002 ADC0_IRQHandler
1a00012c  w    F .text	00000002 UsageFault_Handler
1a0041bc g     F .text	0000004c Chip_Clock_GetRate
1a00370c g     F .text	0000000e disk_status
1a003988 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
100009e8 g     O .bss	00000001 calibracion
1a004ccc g     F .text	000002d0 .hidden __udivmoddi4
1a00074c g     F .text	00000020 _sbrk_r
1a005ff8 g     O .text	00000004 ExtRateIn
1a000166  w    F .text	00000002 IntDefaultHandler
1a000166  w    F .text	00000002 SSP0_SSP1_IRQHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a003768 g     F .text	00000012 disk_ioctl
1a004784 g     F .text	00000018 uartRxReady
1a006338 g       .ARM.exidx	00000000 __exidx_start
100012a6 g     O .bss	00000001 __lock___env_recursive_mutex
1a00472c g     F .text	00000024 rtcInit
1a0002fc g     O .text	00000004 CRP_WORD
100012a7 g     O .bss	00000001 __lock___sinit_recursive_mutex
1a00329c g     F .text	000000b4 FSSDC_FatFs_DiskWrite
1000000c g     O .data	00000004 VolToPart
1a0055ac g     F .text	0000004c _realloc_r
1a004fa0 g     F .text	00000048 __libc_init_array
1a000414 g     F .text	0000003c ejecutaMedicion
1a000166  w    F .text	00000002 ADC1_IRQHandler
1a000166  w    F .text	00000002 RIT_WDT_IRQHandler
1a000166  w    F .text	00000002 FLASH_EEPROM_ATIMER_IRQHandler
1a003918 g     F .text	00000030 Board_Init
1a00074a  w    F .text	00000002 _init
1a0000c0 g       .text	00000000 __data_section_table
1a00453a g     F .text	000000a8 Chip_SSP_RWFrames_Blocking
1a002d40 g     F .text	00000040 ff_uni2oem
1a000166  w    F .text	00000002 RTC_IRQHandler
100009ec g     O .bss	00000190 valImgZ
100012b0 g       .bss	00000000 _ebss
1a000166  w    F .text	00000002 TIMER0_IRQHandler
1a003218 g     F .text	00000084 FSSDC_FatFs_DiskRead
1a0006c0 g     F .text	00000088 Reset_Handler
1a0048e0 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a003350 g     F .text	000002ec FSSDC_FatFs_DiskIoCtl
1a00469c g     F .text	00000038 Chip_I2C_SetClockRate
1a000166  w    F .text	00000002 LCD_IRQHandler
1a003e5c g     F .text	0000004c Chip_Clock_EnableCrystal
100012a8 g     O .bss	00000001 __lock___malloc_recursive_mutex
10000b7c g     O .bss	00000064 filename
1a003064 g     F .text	000001b4 FSSDC_FatFs_DiskInitialize
1a000166  w    F .text	00000002 M4_IRQHandler
1a00363c g     F .text	00000060 FSSDC_InitSPI
10008000 g       *ABS*	00000000 __top_RamLoc32
1a000136 g     F .text	0000001e data_init
1a004396 g     F .text	00000018 Chip_RTC_Enable
1a0062a0 g     O .text	00000020 __sf_fake_stderr
1a004678 g     F .text	00000024 Chip_I2C_Init
1a004fea g     F .text	00000002 __retarget_lock_release_recursive
1a004018 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a004374 g     F .text	00000022 Chip_RTC_ResetClockTickCounter
1a0055f8 g     F .text	000000b6 __ssputs_r
1a0061b8 g     O .text	000000e6 gpioPinsInit
1a00039c g     F .text	00000038 setModoTetrapolar
10000be0 g     O .bss	00000190 valFrecuencia
1a004528 g     F .text	00000012 Chip_SSP_SetClockRate
1a0054c0 g     F .text	00000000 memchr
1a005018 g     F .text	0000009c _free_r
1a004100 g     F .text	00000026 Chip_Clock_GetBaseClock
1a003704 g     F .text	00000008 disk_timerproc
1a000470 g     F .text	0000017c guardaDatosSD
100000c0 g       .bss	00000000 _bss
1a003c24 g     F .text	00000032 Chip_ADC_SetSampleRate
1a0005ec g     F .text	00000032 initVectores
1a002d18 g     F .text	00000028 f_close
1a002e74 g     F .text	00000024 SSPReceive
1a0045e2 g     F .text	0000003e Chip_SSP_SetBitRate
1a000166  w    F .text	00000002 I2S0_I2S1_QEI_IRQHandler
10000d70 g     O .bss	00000064 buffer
1a004444 g     F .text	00000002 Chip_GPIO_Init
1a006024 g     O .text	00000004 OscRateIn
1a0047b0 g     F .text	0000007c uartInit
100012b0 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a000300 g     F .text	00000008 diskTickHook
1a000124 g       .text	00000000 __bss_section_table_end
1a0049bc g     F .text	000001ac gpioInit
1a004728 g     F .text	00000004 sleepUntilNextInterrupt
1a0043fc g     F .text	00000048 Chip_RTC_Init
1a004f9c  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0036c8 g     F .text	0000003c get_fattime
1a004bd4 g     F .text	0000001c USB0_IRQHandler
1a005594 g     F .text	0000000c __malloc_lock
1a0038f0 g     F .text	00000014 Board_UARTPutChar
10000dd4 g     O .bss	00000008 rtc
1a000166  w    F .text	00000002 SCT_IRQHandler
1a00034c g     F .text	00000018 finalizaSesion
1a0062c0 g     O .text	00000020 __sf_fake_stdin
1a003ec4 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a004fe8 g     F .text	00000002 __retarget_lock_acquire_recursive
1a005008 g     F .text	00000010 memset
1a000128  w    F .text	00000002 MemManage_Handler
1a000308 g     F .text	00000044 main
1a002bb8 g     F .text	00000160 f_sync
1a00484c g     F .text	00000050 spiInit
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a00012e  w    F .text	00000002 SVC_Handler
1a0050b4 g     F .text	000000b4 _malloc_r
1a002680 g     F .text	00000050 f_mount
1a004134 g     F .text	0000003c Chip_Clock_EnableOpts
10000ddc g     O .bss	00000001 receivedByteUART_232
10000de0 g     O .bss	00000190 valRealZ
1a003ee0 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000450 g     F .text	0000001e enviarDatosGUI
1a003f98 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0046d4 g     F .text	00000038 SystemInit
1a004c64 g     F .text	00000038 delay
1a0000fc g       .text	00000000 __bss_section_table
1a0041a4 g     F .text	00000018 Chip_Clock_RTCEnable
1a004b68 g     F .text	0000006a gpioWrite
1a000748  w    F .text	00000002 _fini
1a00547c g     F .text	00000040 sprintf
1a003be4 g     F .text	00000040 Chip_ADC_Init
100012a0 g     O .bss	00000004 g_pUsbApi
1a003950 g     F .text	00000038 Board_SetupMuxing
1a003ac0 g     F .text	000000dc Chip_UART_SetBaudFDR
1a00489c g     F .text	0000000c tickRead
10000050 g     O .data	00000008 tickRateMS
1a000166  w    F .text	00000002 SPI_DAC_IRQHandler
10000f70 g     O .bss	00000004 nbytes
1a000166  w    F .text	00000002 ETH_IRQHandler
1a005168 g     F .text	000000ea _printf_common
10000058 g     O .data	00000004 _impure_ptr
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1b000000 g       .text	00000000 __core_m0app_START__
1a0056b0 g     F .text	000001f0 _svfiprintf_r
1a000166  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a0048a8 g     F .text	00000020 tickCallbackSet
100012b0 g       .bss	00000000 _pvHeapStart
1a000166  w    F .text	00000002 UART2_CAN1_IRQHandler
1a000124 g       .text	00000000 __section_table_end
1a004620 g     F .text	00000038 Chip_SSP_Init
1a0038cc g     F .text	00000024 Board_Debug_Init
100000bc g       .data	00000000 _edata
1a004658 g     F .text	00000020 Chip_I2C_EventHandler
1a000166  w    F .text	00000002 M0SUB_IRQHandler
100012a9 g     O .bss	00000001 __lock___at_quick_exit_mutex
1a00297e g     F .text	0000023a f_write
1a00421c g     F .text	00000158 Chip_SetupCoreClock
1a0026d0 g     F .text	000002ae f_open
1a003748 g     F .text	00000020 disk_write
1a000000 g     O .text	00000040 g_pfnVectors
1a004208 g     F .text	00000014 SystemCoreClockUpdate
1a0043da g     F .text	00000020 Chip_RTC_CalibCounterCmd
1a000166  w    F .text	00000002 DMA_IRQHandler
1a000166  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a0062e0 g     O .text	00000020 __sf_fake_stdout
1a00547c g     F .text	00000040 siprintf
1a004f9c  w    F .text	00000002 .hidden __aeabi_idiv0
1a00012a  w    F .text	00000002 BusFault_Handler
100012aa g     O .bss	00000001 __lock___dd_hash_mutex
100012ab g     O .bss	00000001 __lock___tz_mutex
1a003728 g     F .text	00000020 disk_read
1a005254 g     F .text	00000228 _printf_i
1a004170 g     F .text	00000034 Chip_Clock_Enable
1a000166  w    F .text	00000002 UART3_IRQHandler
1000055c g     O .bss	00000004 __malloc_sbrk_start
1a000166  w    F .text	00000002 MCPWM_IRQHandler
1a004bf0 g     F .text	00000074 boardInit
10000558 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	00000080 g_pfnVendorVectors
10000f74 g     O .bss	00000001 medicion
10000f78 g     O .bss	00000190 valModulo
1a000166  w    F .text	00000002 GINT1_IRQHandler
1a0048c8 g     F .text	00000018 tickPowerSet
1a000620 g     F .text	0000009c actualizaSistema
10001108 g     O .bss	00000001 modoElegido
1a00369c g     F .text	0000002c FSSDC_Update
1a0040a8 g     F .text	00000058 Chip_Clock_SetBaseClock
1a00470c g     F .text	0000001c cyclesCounterInit
1a000166  w    F .text	00000002 GPIO4_IRQHandler
100012ac g     O .bss	00000001 __lock___sfp_recursive_mutex
1000110c g     O .bss	00000190 valFase
1a0039f4 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 c1 06 00 1a 25 01 00 1a 27 01 00 1a     ........%...'...
1a000010:	29 01 00 1a 2b 01 00 1a 2d 01 00 1a 72 73 ff 53     )...+...-...rs.S
	...
1a00002c:	2f 01 00 1a 31 01 00 1a 00 00 00 00 33 01 00 1a     /...1.......3...
1a00003c:	5d 49 00 1a                                         ]I..

1a000040 <g_pfnVendorVectors>:
1a000040:	67 01 00 1a 67 01 00 1a 67 01 00 1a 00 00 00 00     g...g...g.......
1a000050:	67 01 00 1a 67 01 00 1a 67 01 00 1a 67 01 00 1a     g...g...g...g...
1a000060:	d5 4b 00 1a 67 01 00 1a 67 01 00 1a 67 01 00 1a     .K..g...g...g...
1a000070:	67 01 00 1a 67 01 00 1a 67 01 00 1a 67 01 00 1a     g...g...g...g...
1a000080:	67 01 00 1a 67 01 00 1a 67 01 00 1a 67 01 00 1a     g...g...g...g...
1a000090:	67 01 00 1a 67 01 00 1a 67 01 00 1a 67 01 00 1a     g...g...g...g...
1a0000a0:	67 01 00 1a 67 01 00 1a 67 01 00 1a 67 01 00 1a     g...g...g...g...
1a0000b0:	67 01 00 1a 67 01 00 1a 67 01 00 1a 67 01 00 1a     g...g...g...g...

1a0000c0 <__data_section_table>:
1a0000c0:	1a006340 	.word	0x1a006340
1a0000c4:	10000000 	.word	0x10000000
1a0000c8:	000000bc 	.word	0x000000bc
1a0000cc:	1a006340 	.word	0x1a006340
1a0000d0:	10080000 	.word	0x10080000
1a0000d4:	00000000 	.word	0x00000000
1a0000d8:	1a006340 	.word	0x1a006340
1a0000dc:	20000000 	.word	0x20000000
1a0000e0:	00000000 	.word	0x00000000
1a0000e4:	1a006340 	.word	0x1a006340
1a0000e8:	20008000 	.word	0x20008000
1a0000ec:	00000000 	.word	0x00000000
1a0000f0:	1a006340 	.word	0x1a006340
1a0000f4:	2000c000 	.word	0x2000c000
1a0000f8:	00000000 	.word	0x00000000

1a0000fc <__bss_section_table>:
1a0000fc:	100000c0 	.word	0x100000c0
1a000100:	000011f0 	.word	0x000011f0
1a000104:	10080000 	.word	0x10080000
1a000108:	00000000 	.word	0x00000000
1a00010c:	20000000 	.word	0x20000000
1a000110:	00000000 	.word	0x00000000
1a000114:	20008000 	.word	0x20008000
1a000118:	00000000 	.word	0x00000000
1a00011c:	2000c000 	.word	0x2000c000
1a000120:	00000000 	.word	0x00000000

1a000124 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000124:	e7fe      	b.n	1a000124 <NMI_Handler>

1a000126 <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a000126:	e7fe      	b.n	1a000126 <HardFault_Handler>

1a000128 <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a000128:	e7fe      	b.n	1a000128 <MemManage_Handler>

1a00012a <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00012a:	e7fe      	b.n	1a00012a <BusFault_Handler>

1a00012c <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a00012c:	e7fe      	b.n	1a00012c <UsageFault_Handler>

1a00012e <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a00012e:	e7fe      	b.n	1a00012e <SVC_Handler>

1a000130 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000130:	e7fe      	b.n	1a000130 <DebugMon_Handler>

1a000132 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000132:	e7fe      	b.n	1a000132 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000134:	e7fe      	b.n	1a000134 <PendSV_Handler+0x2>

1a000136 <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a000136:	2300      	movs	r3, #0
1a000138:	4293      	cmp	r3, r2
1a00013a:	d20a      	bcs.n	1a000152 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a00013c:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a00013e:	f850 4b04 	ldr.w	r4, [r0], #4
1a000142:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a000146:	3304      	adds	r3, #4
1a000148:	4293      	cmp	r3, r2
1a00014a:	d3f8      	bcc.n	1a00013e <data_init+0x8>
}
1a00014c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000150:	4770      	bx	lr
1a000152:	4770      	bx	lr

1a000154 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a000154:	2300      	movs	r3, #0
1a000156:	428b      	cmp	r3, r1
1a000158:	d204      	bcs.n	1a000164 <bss_init+0x10>
        *pulDest++ = 0;
1a00015a:	2200      	movs	r2, #0
1a00015c:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a000160:	3304      	adds	r3, #4
1a000162:	e7f8      	b.n	1a000156 <bss_init+0x2>
}
1a000164:	4770      	bx	lr

1a000166 <ADC0_IRQHandler>:
#endif

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a000166:	e7fe      	b.n	1a000166 <ADC0_IRQHandler>
1a000168:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00016c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000170:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000174:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000178:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00017c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000180:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000184:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000188:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00018c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000190:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000194:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000198:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00019c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <diskTickHook>:
   // Sistema Operativo, como en el caso de un programa para PC.
   return 0;
}

// FUNCION que se ejecuta cada vezque ocurre un Tick
void diskTickHook( void *ptr ){
1a000300:	b508      	push	{r3, lr}
   disk_timerproc();   // Disk timer process
1a000302:	f003 f9ff 	bl	1a003704 <disk_timerproc>
}
1a000306:	bd08      	pop	{r3, pc}

1a000308 <main>:
int main( void ){
1a000308:	b508      	push	{r3, lr}
   boardConfig();
1a00030a:	f004 fc71 	bl	1a004bf0 <boardInit>
   uartConfig(UART_USB,115200);
1a00030e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000312:	2003      	movs	r0, #3
1a000314:	f004 fa4c 	bl	1a0047b0 <uartInit>
   uartConfig(UART_232,9600);
1a000318:	f44f 5116 	mov.w	r1, #9600	; 0x2580
1a00031c:	2005      	movs	r0, #5
1a00031e:	f004 fa47 	bl	1a0047b0 <uartInit>
   spiConfig( SPI0 );
1a000322:	2000      	movs	r0, #0
1a000324:	f004 fa92 	bl	1a00484c <spiInit>
   rtcInit();
1a000328:	f004 fa00 	bl	1a00472c <rtcInit>
   tickConfig( 10 );
1a00032c:	200a      	movs	r0, #10
1a00032e:	2100      	movs	r1, #0
1a000330:	f004 fad6 	bl	1a0048e0 <tickInit>
   tickCallbackSet( diskTickHook, NULL );
1a000334:	2100      	movs	r1, #0
1a000336:	4804      	ldr	r0, [pc, #16]	; (1a000348 <main+0x40>)
1a000338:	f004 fab6 	bl	1a0048a8 <tickCallbackSet>
   FSSDC_InitSPI ();
1a00033c:	f003 f97e 	bl	1a00363c <FSSDC_InitSPI>
	   actualizaSistema();
1a000340:	f000 f96e 	bl	1a000620 <actualizaSistema>
1a000344:	e7fc      	b.n	1a000340 <main+0x38>
1a000346:	bf00      	nop
1a000348:	1a000301 	.word	0x1a000301

1a00034c <finalizaSesion>:
		   }
	   }
}

void finalizaSesion(void)
{
1a00034c:	b508      	push	{r3, lr}
	gpioWrite(LED2,OFF);
1a00034e:	2100      	movs	r1, #0
1a000350:	202c      	movs	r0, #44	; 0x2c
1a000352:	f004 fc09 	bl	1a004b68 <gpioWrite>
	gpioWrite(LEDG,OFF);
1a000356:	2100      	movs	r1, #0
1a000358:	2029      	movs	r0, #41	; 0x29
1a00035a:	f004 fc05 	bl	1a004b68 <gpioWrite>
	sleepUntilNextInterrupt();
1a00035e:	f004 f9e3 	bl	1a004728 <sleepUntilNextInterrupt>
}
1a000362:	bd08      	pop	{r3, pc}

1a000364 <setModoBipolar>:

void setModoBipolar(void)
{
1a000364:	b510      	push	{r4, lr}
	   modoElegido = FALSE;
1a000366:	2400      	movs	r4, #0
1a000368:	4b09      	ldr	r3, [pc, #36]	; (1a000390 <setModoBipolar+0x2c>)
1a00036a:	701c      	strb	r4, [r3, #0]
	   calibracion = FALSE;
1a00036c:	4b09      	ldr	r3, [pc, #36]	; (1a000394 <setModoBipolar+0x30>)
1a00036e:	701c      	strb	r4, [r3, #0]
	   medicion = FALSE;
1a000370:	4b09      	ldr	r3, [pc, #36]	; (1a000398 <setModoBipolar+0x34>)
1a000372:	701c      	strb	r4, [r3, #0]
	   gpioWrite(LEDR,ON);
1a000374:	2101      	movs	r1, #1
1a000376:	2028      	movs	r0, #40	; 0x28
1a000378:	f004 fbf6 	bl	1a004b68 <gpioWrite>
	   delay(1000);
1a00037c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000380:	2100      	movs	r1, #0
1a000382:	f004 fc6f 	bl	1a004c64 <delay>
	   gpioWrite(LEDR,OFF);
1a000386:	4621      	mov	r1, r4
1a000388:	2028      	movs	r0, #40	; 0x28
1a00038a:	f004 fbed 	bl	1a004b68 <gpioWrite>
}
1a00038e:	bd10      	pop	{r4, pc}
1a000390:	10001108 	.word	0x10001108
1a000394:	100009e8 	.word	0x100009e8
1a000398:	10000f74 	.word	0x10000f74

1a00039c <setModoTetrapolar>:

void setModoTetrapolar(void)
{
1a00039c:	b510      	push	{r4, lr}
	   modoElegido = TRUE;
1a00039e:	2101      	movs	r1, #1
1a0003a0:	4b09      	ldr	r3, [pc, #36]	; (1a0003c8 <setModoTetrapolar+0x2c>)
1a0003a2:	7019      	strb	r1, [r3, #0]
	   calibracion = FALSE;
1a0003a4:	2400      	movs	r4, #0
1a0003a6:	4b09      	ldr	r3, [pc, #36]	; (1a0003cc <setModoTetrapolar+0x30>)
1a0003a8:	701c      	strb	r4, [r3, #0]
	   medicion = FALSE;
1a0003aa:	4b09      	ldr	r3, [pc, #36]	; (1a0003d0 <setModoTetrapolar+0x34>)
1a0003ac:	701c      	strb	r4, [r3, #0]
	   gpioWrite(LEDG,ON);
1a0003ae:	2029      	movs	r0, #41	; 0x29
1a0003b0:	f004 fbda 	bl	1a004b68 <gpioWrite>
	   delay(1000);
1a0003b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a0003b8:	2100      	movs	r1, #0
1a0003ba:	f004 fc53 	bl	1a004c64 <delay>
	   gpioWrite(LEDG,OFF);
1a0003be:	4621      	mov	r1, r4
1a0003c0:	2029      	movs	r0, #41	; 0x29
1a0003c2:	f004 fbd1 	bl	1a004b68 <gpioWrite>
}
1a0003c6:	bd10      	pop	{r4, pc}
1a0003c8:	10001108 	.word	0x10001108
1a0003cc:	100009e8 	.word	0x100009e8
1a0003d0:	10000f74 	.word	0x10000f74

1a0003d4 <calMedicion>:

void calMedicion(void)
{
1a0003d4:	b508      	push	{r3, lr}
	if(modoElegido == FALSE)	//modo BIPOLAR
1a0003d6:	4b0d      	ldr	r3, [pc, #52]	; (1a00040c <calMedicion+0x38>)
1a0003d8:	781b      	ldrb	r3, [r3, #0]
1a0003da:	b913      	cbnz	r3, 1a0003e2 <calMedicion+0xe>
	{
		calibracion = TRUE;
1a0003dc:	4a0c      	ldr	r2, [pc, #48]	; (1a000410 <calMedicion+0x3c>)
1a0003de:	2101      	movs	r1, #1
1a0003e0:	7011      	strb	r1, [r2, #0]
	}

	if(modoElegido == TRUE)	//modo TETRAPOLAR
1a0003e2:	2b01      	cmp	r3, #1
1a0003e4:	d00d      	beq.n	1a000402 <calMedicion+0x2e>
	{
		calibracion = TRUE;
	}
	   gpioWrite(LEDG,ON);
1a0003e6:	2101      	movs	r1, #1
1a0003e8:	2029      	movs	r0, #41	; 0x29
1a0003ea:	f004 fbbd 	bl	1a004b68 <gpioWrite>
	   delay(500);
1a0003ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a0003f2:	2100      	movs	r1, #0
1a0003f4:	f004 fc36 	bl	1a004c64 <delay>
	   gpioWrite(LEDG,OFF);
1a0003f8:	2100      	movs	r1, #0
1a0003fa:	2029      	movs	r0, #41	; 0x29
1a0003fc:	f004 fbb4 	bl	1a004b68 <gpioWrite>
}
1a000400:	bd08      	pop	{r3, pc}
		calibracion = TRUE;
1a000402:	4b03      	ldr	r3, [pc, #12]	; (1a000410 <calMedicion+0x3c>)
1a000404:	2201      	movs	r2, #1
1a000406:	701a      	strb	r2, [r3, #0]
1a000408:	e7ed      	b.n	1a0003e6 <calMedicion+0x12>
1a00040a:	bf00      	nop
1a00040c:	10001108 	.word	0x10001108
1a000410:	100009e8 	.word	0x100009e8

1a000414 <ejecutaMedicion>:

void ejecutaMedicion(void)
{
1a000414:	b508      	push	{r3, lr}
	gpioWrite(LED2,OFF);
1a000416:	2100      	movs	r1, #0
1a000418:	202c      	movs	r0, #44	; 0x2c
1a00041a:	f004 fba5 	bl	1a004b68 <gpioWrite>
	if(calibracion == TRUE)
1a00041e:	4b0a      	ldr	r3, [pc, #40]	; (1a000448 <ejecutaMedicion+0x34>)
1a000420:	781b      	ldrb	r3, [r3, #0]
1a000422:	2b01      	cmp	r3, #1
1a000424:	d000      	beq.n	1a000428 <ejecutaMedicion+0x14>
		medicion = TRUE;
		gpioWrite(LEDG,ON);
		delay(1000);
		gpioWrite(LEDG,OFF);
	}
}
1a000426:	bd08      	pop	{r3, pc}
		medicion = TRUE;
1a000428:	2101      	movs	r1, #1
1a00042a:	4b08      	ldr	r3, [pc, #32]	; (1a00044c <ejecutaMedicion+0x38>)
1a00042c:	7019      	strb	r1, [r3, #0]
		gpioWrite(LEDG,ON);
1a00042e:	2029      	movs	r0, #41	; 0x29
1a000430:	f004 fb9a 	bl	1a004b68 <gpioWrite>
		delay(1000);
1a000434:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000438:	2100      	movs	r1, #0
1a00043a:	f004 fc13 	bl	1a004c64 <delay>
		gpioWrite(LEDG,OFF);
1a00043e:	2100      	movs	r1, #0
1a000440:	2029      	movs	r0, #41	; 0x29
1a000442:	f004 fb91 	bl	1a004b68 <gpioWrite>
}
1a000446:	e7ee      	b.n	1a000426 <ejecutaMedicion+0x12>
1a000448:	100009e8 	.word	0x100009e8
1a00044c:	10000f74 	.word	0x10000f74

1a000450 <enviarDatosGUI>:

void enviarDatosGUI(uint32_t * vector2 , uint32_t * vector3)
{
1a000450:	b508      	push	{r3, lr}
	   gpioWrite(LEDB,ON);
1a000452:	2101      	movs	r1, #1
1a000454:	202a      	movs	r0, #42	; 0x2a
1a000456:	f004 fb87 	bl	1a004b68 <gpioWrite>
	   delay(1000);
1a00045a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a00045e:	2100      	movs	r1, #0
1a000460:	f004 fc00 	bl	1a004c64 <delay>
	   gpioWrite(LEDB,OFF);
1a000464:	2100      	movs	r1, #0
1a000466:	202a      	movs	r0, #42	; 0x2a
1a000468:	f004 fb7e 	bl	1a004b68 <gpioWrite>

	   //agregar envio de parametro a pantalla nextion
}
1a00046c:	bd08      	pop	{r3, pc}
1a00046e:	Address 0x000000001a00046e is out of bounds.


1a000470 <guardaDatosSD>:

void guardaDatosSD(void)
{
1a000470:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000472:	b085      	sub	sp, #20

static	uint8_t i = 0;		// indice que recorre todos los arrays de datos
static	uint8_t n = 0;		// cantidad de bytes de toda la fila de datos

//	gpioWrite(LEDB,ON);
	gpioWrite(LED2,ON);
1a000474:	2101      	movs	r1, #1
1a000476:	202c      	movs	r0, #44	; 0x2c
1a000478:	f004 fb76 	bl	1a004b68 <gpioWrite>
	delay(1000);
1a00047c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000480:	2100      	movs	r1, #0
1a000482:	f004 fbef 	bl	1a004c64 <delay>
//	gpioWrite(LEDB,OFF);
	gpioWrite(LED2,ON);
1a000486:	2101      	movs	r1, #1
1a000488:	202c      	movs	r0, #44	; 0x2c
1a00048a:	f004 fb6d 	bl	1a004b68 <gpioWrite>

	rtcRead( &rtc ); // en la variable de estructura rtc te queda la fecha/hora actual
1a00048e:	4844      	ldr	r0, [pc, #272]	; (1a0005a0 <guardaDatosSD+0x130>)
1a000490:	f004 f95e 	bl	1a004750 <rtcRead>
	if(modoElegido == FALSE) //modo BIPOLAR
1a000494:	4b43      	ldr	r3, [pc, #268]	; (1a0005a4 <guardaDatosSD+0x134>)
1a000496:	781b      	ldrb	r3, [r3, #0]
1a000498:	b193      	cbz	r3, 1a0004c0 <guardaDatosSD+0x50>
	{
		sprintf( filename, "SDC:/BIPOLAR %02d_%02d_%04d %02d-%02d-%02d.csv",rtc.mday,rtc.month,rtc.year,rtc.hour,rtc.min,rtc.sec);
	}

	if(modoElegido == TRUE) //modo TETRAPOLAR
1a00049a:	4b42      	ldr	r3, [pc, #264]	; (1a0005a4 <guardaDatosSD+0x134>)
1a00049c:	781b      	ldrb	r3, [r3, #0]
1a00049e:	2b01      	cmp	r3, #1
1a0004a0:	d01e      	beq.n	1a0004e0 <guardaDatosSD+0x70>
	{
		sprintf( filename, "SDC:/TETRAPOLAR %02d_%02d_%04d %02d-%02d-%02d.csv",rtc.mday,rtc.month,rtc.year,rtc.hour,rtc.min,rtc.sec);
	}

	   if( f_mount( &fs, "SDC:", 0 ) != FR_OK ) {}
1a0004a2:	2200      	movs	r2, #0
1a0004a4:	4940      	ldr	r1, [pc, #256]	; (1a0005a8 <guardaDatosSD+0x138>)
1a0004a6:	4841      	ldr	r0, [pc, #260]	; (1a0005ac <guardaDatosSD+0x13c>)
1a0004a8:	f002 f8ea 	bl	1a002680 <f_mount>

	   if( f_open( &fp, &filename, FA_WRITE | FA_OPEN_APPEND ) == FR_OK ){
1a0004ac:	2232      	movs	r2, #50	; 0x32
1a0004ae:	4940      	ldr	r1, [pc, #256]	; (1a0005b0 <guardaDatosSD+0x140>)
1a0004b0:	4840      	ldr	r0, [pc, #256]	; (1a0005b4 <guardaDatosSD+0x144>)
1a0004b2:	f002 f90d 	bl	1a0026d0 <f_open>
1a0004b6:	b318      	cbz	r0, 1a000500 <guardaDatosSD+0x90>
	      f_write( &fp, "frecuencia,moduloZ,faseZ,val_real,val_img\r\n", 43, &nbytes );
	      f_close(&fp);
	   }

	   for( i = 0; i<100; i++ ){
1a0004b8:	4b3f      	ldr	r3, [pc, #252]	; (1a0005b8 <guardaDatosSD+0x148>)
1a0004ba:	2200      	movs	r2, #0
1a0004bc:	701a      	strb	r2, [r3, #0]
1a0004be:	e032      	b.n	1a000526 <guardaDatosSD+0xb6>
		sprintf( filename, "SDC:/BIPOLAR %02d_%02d_%04d %02d-%02d-%02d.csv",rtc.mday,rtc.month,rtc.year,rtc.hour,rtc.min,rtc.sec);
1a0004c0:	4a37      	ldr	r2, [pc, #220]	; (1a0005a0 <guardaDatosSD+0x130>)
1a0004c2:	8813      	ldrh	r3, [r2, #0]
1a0004c4:	7951      	ldrb	r1, [r2, #5]
1a0004c6:	7990      	ldrb	r0, [r2, #6]
1a0004c8:	79d4      	ldrb	r4, [r2, #7]
1a0004ca:	9403      	str	r4, [sp, #12]
1a0004cc:	9002      	str	r0, [sp, #8]
1a0004ce:	9101      	str	r1, [sp, #4]
1a0004d0:	9300      	str	r3, [sp, #0]
1a0004d2:	7893      	ldrb	r3, [r2, #2]
1a0004d4:	78d2      	ldrb	r2, [r2, #3]
1a0004d6:	4939      	ldr	r1, [pc, #228]	; (1a0005bc <guardaDatosSD+0x14c>)
1a0004d8:	4835      	ldr	r0, [pc, #212]	; (1a0005b0 <guardaDatosSD+0x140>)
1a0004da:	f004 ffcf 	bl	1a00547c <siprintf>
1a0004de:	e7dc      	b.n	1a00049a <guardaDatosSD+0x2a>
		sprintf( filename, "SDC:/TETRAPOLAR %02d_%02d_%04d %02d-%02d-%02d.csv",rtc.mday,rtc.month,rtc.year,rtc.hour,rtc.min,rtc.sec);
1a0004e0:	4a2f      	ldr	r2, [pc, #188]	; (1a0005a0 <guardaDatosSD+0x130>)
1a0004e2:	8813      	ldrh	r3, [r2, #0]
1a0004e4:	7951      	ldrb	r1, [r2, #5]
1a0004e6:	7990      	ldrb	r0, [r2, #6]
1a0004e8:	79d4      	ldrb	r4, [r2, #7]
1a0004ea:	9403      	str	r4, [sp, #12]
1a0004ec:	9002      	str	r0, [sp, #8]
1a0004ee:	9101      	str	r1, [sp, #4]
1a0004f0:	9300      	str	r3, [sp, #0]
1a0004f2:	7893      	ldrb	r3, [r2, #2]
1a0004f4:	78d2      	ldrb	r2, [r2, #3]
1a0004f6:	4932      	ldr	r1, [pc, #200]	; (1a0005c0 <guardaDatosSD+0x150>)
1a0004f8:	482d      	ldr	r0, [pc, #180]	; (1a0005b0 <guardaDatosSD+0x140>)
1a0004fa:	f004 ffbf 	bl	1a00547c <siprintf>
1a0004fe:	e7d0      	b.n	1a0004a2 <guardaDatosSD+0x32>
	      f_write( &fp, "frecuencia,moduloZ,faseZ,val_real,val_img\r\n", 43, &nbytes );
1a000500:	4c2c      	ldr	r4, [pc, #176]	; (1a0005b4 <guardaDatosSD+0x144>)
1a000502:	4b30      	ldr	r3, [pc, #192]	; (1a0005c4 <guardaDatosSD+0x154>)
1a000504:	222b      	movs	r2, #43	; 0x2b
1a000506:	4930      	ldr	r1, [pc, #192]	; (1a0005c8 <guardaDatosSD+0x158>)
1a000508:	4620      	mov	r0, r4
1a00050a:	f002 fa38 	bl	1a00297e <f_write>
	      f_close(&fp);
1a00050e:	4620      	mov	r0, r4
1a000510:	f002 fc02 	bl	1a002d18 <f_close>
1a000514:	e7d0      	b.n	1a0004b8 <guardaDatosSD+0x48>
	            // Turn ON LEDG if the write operation was successful
	            gpioWrite( LEDG, ON );
	         }
	      } else{
	         // Turn ON LEDR if the write operation was fail
	         gpioWrite( LEDR, ON );
1a000516:	2101      	movs	r1, #1
1a000518:	2028      	movs	r0, #40	; 0x28
1a00051a:	f004 fb25 	bl	1a004b68 <gpioWrite>
	   for( i = 0; i<100; i++ ){
1a00051e:	4a26      	ldr	r2, [pc, #152]	; (1a0005b8 <guardaDatosSD+0x148>)
1a000520:	7813      	ldrb	r3, [r2, #0]
1a000522:	3301      	adds	r3, #1
1a000524:	7013      	strb	r3, [r2, #0]
1a000526:	4b24      	ldr	r3, [pc, #144]	; (1a0005b8 <guardaDatosSD+0x148>)
1a000528:	781b      	ldrb	r3, [r3, #0]
1a00052a:	2b63      	cmp	r3, #99	; 0x63
1a00052c:	d835      	bhi.n	1a00059a <guardaDatosSD+0x12a>
	      if( f_open( &fp, &filename, FA_WRITE | FA_OPEN_APPEND ) == FR_OK ){
1a00052e:	2232      	movs	r2, #50	; 0x32
1a000530:	491f      	ldr	r1, [pc, #124]	; (1a0005b0 <guardaDatosSD+0x140>)
1a000532:	4820      	ldr	r0, [pc, #128]	; (1a0005b4 <guardaDatosSD+0x144>)
1a000534:	f002 f8cc 	bl	1a0026d0 <f_open>
1a000538:	2800      	cmp	r0, #0
1a00053a:	d1ec      	bne.n	1a000516 <guardaDatosSD+0xa6>
	    	  n = sprintf( buffer, "%04d,%04d,%04d,%04d,%04d\r\n",
1a00053c:	4b1e      	ldr	r3, [pc, #120]	; (1a0005b8 <guardaDatosSD+0x148>)
1a00053e:	781a      	ldrb	r2, [r3, #0]
1a000540:	4f22      	ldr	r7, [pc, #136]	; (1a0005cc <guardaDatosSD+0x15c>)
1a000542:	4b23      	ldr	r3, [pc, #140]	; (1a0005d0 <guardaDatosSD+0x160>)
1a000544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
1a000548:	9302      	str	r3, [sp, #8]
1a00054a:	4b22      	ldr	r3, [pc, #136]	; (1a0005d4 <guardaDatosSD+0x164>)
1a00054c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
1a000550:	9301      	str	r3, [sp, #4]
1a000552:	4b21      	ldr	r3, [pc, #132]	; (1a0005d8 <guardaDatosSD+0x168>)
1a000554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
1a000558:	9300      	str	r3, [sp, #0]
1a00055a:	4b20      	ldr	r3, [pc, #128]	; (1a0005dc <guardaDatosSD+0x16c>)
1a00055c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
1a000560:	491f      	ldr	r1, [pc, #124]	; (1a0005e0 <guardaDatosSD+0x170>)
1a000562:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
1a000566:	491f      	ldr	r1, [pc, #124]	; (1a0005e4 <guardaDatosSD+0x174>)
1a000568:	4638      	mov	r0, r7
1a00056a:	f004 ff87 	bl	1a00547c <siprintf>
1a00056e:	b2c2      	uxtb	r2, r0
1a000570:	4d1d      	ldr	r5, [pc, #116]	; (1a0005e8 <guardaDatosSD+0x178>)
1a000572:	702a      	strb	r2, [r5, #0]
	    	           f_write( &fp, buffer, n, &nbytes );
1a000574:	4c13      	ldr	r4, [pc, #76]	; (1a0005c4 <guardaDatosSD+0x154>)
1a000576:	4e0f      	ldr	r6, [pc, #60]	; (1a0005b4 <guardaDatosSD+0x144>)
1a000578:	4623      	mov	r3, r4
1a00057a:	4639      	mov	r1, r7
1a00057c:	4630      	mov	r0, r6
1a00057e:	f002 f9fe 	bl	1a00297e <f_write>
	         f_close(&fp);
1a000582:	4630      	mov	r0, r6
1a000584:	f002 fbc8 	bl	1a002d18 <f_close>
	         if( nbytes == n ){
1a000588:	782a      	ldrb	r2, [r5, #0]
1a00058a:	6823      	ldr	r3, [r4, #0]
1a00058c:	429a      	cmp	r2, r3
1a00058e:	d1c6      	bne.n	1a00051e <guardaDatosSD+0xae>
	            gpioWrite( LEDG, ON );
1a000590:	2101      	movs	r1, #1
1a000592:	2029      	movs	r0, #41	; 0x29
1a000594:	f004 fae8 	bl	1a004b68 <gpioWrite>
1a000598:	e7c1      	b.n	1a00051e <guardaDatosSD+0xae>
	      }
	   }
}
1a00059a:	b005      	add	sp, #20
1a00059c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00059e:	bf00      	nop
1a0005a0:	10000dd4 	.word	0x10000dd4
1a0005a4:	10001108 	.word	0x10001108
1a0005a8:	1a005914 	.word	0x1a005914
1a0005ac:	100007b0 	.word	0x100007b0
1a0005b0:	10000b7c 	.word	0x10000b7c
1a0005b4:	10000560 	.word	0x10000560
1a0005b8:	100000c0 	.word	0x100000c0
1a0005bc:	1a0058b0 	.word	0x1a0058b0
1a0005c0:	1a0058e0 	.word	0x1a0058e0
1a0005c4:	10000f70 	.word	0x10000f70
1a0005c8:	1a00591c 	.word	0x1a00591c
1a0005cc:	10000d70 	.word	0x10000d70
1a0005d0:	100009ec 	.word	0x100009ec
1a0005d4:	10000de0 	.word	0x10000de0
1a0005d8:	1000110c 	.word	0x1000110c
1a0005dc:	10000f78 	.word	0x10000f78
1a0005e0:	10000be0 	.word	0x10000be0
1a0005e4:	1a005948 	.word	0x1a005948
1a0005e8:	100000c1 	.word	0x100000c1

1a0005ec <initVectores>:


void initVectores(uint32_t * vector , uint32_t * vector2 , uint32_t * vector3 , uint32_t * vector4, uint32_t * vector5)
{
1a0005ec:	b470      	push	{r4, r5, r6}
1a0005ee:	9e03      	ldr	r6, [sp, #12]
//	static uint32_t	largo = sizeof(vector)/sizeof(uint32_t);
	static uint32_t	largo = 100;

	for(uint32_t i = 0 ; i < largo ; i++)
1a0005f0:	2400      	movs	r4, #0
1a0005f2:	2c63      	cmp	r4, #99	; 0x63
1a0005f4:	d811      	bhi.n	1a00061a <initVectores+0x2e>
	{
		vector[i] = 100*i;
1a0005f6:	2564      	movs	r5, #100	; 0x64
1a0005f8:	fb05 f504 	mul.w	r5, r5, r4
1a0005fc:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
		vector2[i] = i + 2;
1a000600:	1ca5      	adds	r5, r4, #2
1a000602:	f841 5024 	str.w	r5, [r1, r4, lsl #2]
		vector3[i] = i*2;
1a000606:	0065      	lsls	r5, r4, #1
1a000608:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
		vector4[i] = i*2;
1a00060c:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
		vector5[i] = i + 4;
1a000610:	1d25      	adds	r5, r4, #4
1a000612:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	for(uint32_t i = 0 ; i < largo ; i++)
1a000616:	3401      	adds	r4, #1
1a000618:	e7eb      	b.n	1a0005f2 <initVectores+0x6>
	}
}
1a00061a:	bc70      	pop	{r4, r5, r6}
1a00061c:	4770      	bx	lr
1a00061e:	Address 0x000000001a00061e is out of bounds.


1a000620 <actualizaSistema>:
{
1a000620:	b500      	push	{lr}
1a000622:	b083      	sub	sp, #12
	   while(uartReadByte(UART_232, &datoGUI)){
1a000624:	e001      	b.n	1a00062a <actualizaSistema+0xa>
			   setModoBipolar();
1a000626:	f7ff fe9d 	bl	1a000364 <setModoBipolar>
	   while(uartReadByte(UART_232, &datoGUI)){
1a00062a:	491e      	ldr	r1, [pc, #120]	; (1a0006a4 <actualizaSistema+0x84>)
1a00062c:	2005      	movs	r0, #5
1a00062e:	f004 f8fd 	bl	1a00482c <uartReadByte>
1a000632:	2800      	cmp	r0, #0
1a000634:	d032      	beq.n	1a00069c <actualizaSistema+0x7c>
		   switch(datoGUI){
1a000636:	4b1b      	ldr	r3, [pc, #108]	; (1a0006a4 <actualizaSistema+0x84>)
1a000638:	781b      	ldrb	r3, [r3, #0]
1a00063a:	3b61      	subs	r3, #97	; 0x61
1a00063c:	2b06      	cmp	r3, #6
1a00063e:	d8f4      	bhi.n	1a00062a <actualizaSistema+0xa>
1a000640:	a201      	add	r2, pc, #4	; (adr r2, 1a000648 <actualizaSistema+0x28>)
1a000642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a000646:	bf00      	nop
1a000648:	1a000627 	.word	0x1a000627
1a00064c:	1a000665 	.word	0x1a000665
1a000650:	1a00066b 	.word	0x1a00066b
1a000654:	1a000671 	.word	0x1a000671
1a000658:	1a000687 	.word	0x1a000687
1a00065c:	1a000691 	.word	0x1a000691
1a000660:	1a000697 	.word	0x1a000697
			   setModoTetrapolar();
1a000664:	f7ff fe9a 	bl	1a00039c <setModoTetrapolar>
		   break;
1a000668:	e7df      	b.n	1a00062a <actualizaSistema+0xa>
			   calMedicion();
1a00066a:	f7ff feb3 	bl	1a0003d4 <calMedicion>
		   break;
1a00066e:	e7dc      	b.n	1a00062a <actualizaSistema+0xa>
			   initVectores(valFrecuencia,valModulo,valFase,valRealZ,valImgZ);
1a000670:	4b0d      	ldr	r3, [pc, #52]	; (1a0006a8 <actualizaSistema+0x88>)
1a000672:	9300      	str	r3, [sp, #0]
1a000674:	4b0d      	ldr	r3, [pc, #52]	; (1a0006ac <actualizaSistema+0x8c>)
1a000676:	4a0e      	ldr	r2, [pc, #56]	; (1a0006b0 <actualizaSistema+0x90>)
1a000678:	490e      	ldr	r1, [pc, #56]	; (1a0006b4 <actualizaSistema+0x94>)
1a00067a:	480f      	ldr	r0, [pc, #60]	; (1a0006b8 <actualizaSistema+0x98>)
1a00067c:	f7ff ffb6 	bl	1a0005ec <initVectores>
			   ejecutaMedicion();
1a000680:	f7ff fec8 	bl	1a000414 <ejecutaMedicion>
		   break;
1a000684:	e7d1      	b.n	1a00062a <actualizaSistema+0xa>
			   enviarDatosGUI(valModulo , valFase);
1a000686:	490a      	ldr	r1, [pc, #40]	; (1a0006b0 <actualizaSistema+0x90>)
1a000688:	480a      	ldr	r0, [pc, #40]	; (1a0006b4 <actualizaSistema+0x94>)
1a00068a:	f7ff fee1 	bl	1a000450 <enviarDatosGUI>
		   break;
1a00068e:	e7cc      	b.n	1a00062a <actualizaSistema+0xa>
			   guardaDatosSD();
1a000690:	f7ff feee 	bl	1a000470 <guardaDatosSD>
		   break;
1a000694:	e7c9      	b.n	1a00062a <actualizaSistema+0xa>
			   finalizaSesion();
1a000696:	f7ff fe59 	bl	1a00034c <finalizaSesion>
		   break;
1a00069a:	e7c6      	b.n	1a00062a <actualizaSistema+0xa>
}
1a00069c:	b003      	add	sp, #12
1a00069e:	f85d fb04 	ldr.w	pc, [sp], #4
1a0006a2:	bf00      	nop
1a0006a4:	10000ddc 	.word	0x10000ddc
1a0006a8:	100009ec 	.word	0x100009ec
1a0006ac:	10000de0 	.word	0x10000de0
1a0006b0:	1000110c 	.word	0x1000110c
1a0006b4:	10000f78 	.word	0x10000f78
1a0006b8:	10000be0 	.word	0x10000be0

1a0006bc <initialise_monitor_handles>:
}
1a0006bc:	4770      	bx	lr
1a0006be:	Address 0x000000001a0006be is out of bounds.


1a0006c0 <Reset_Handler>:
void Reset_Handler(void) {
1a0006c0:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a0006c2:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0006c4:	4b19      	ldr	r3, [pc, #100]	; (1a00072c <Reset_Handler+0x6c>)
1a0006c6:	4a1a      	ldr	r2, [pc, #104]	; (1a000730 <Reset_Handler+0x70>)
1a0006c8:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0006ca:	3304      	adds	r3, #4
1a0006cc:	4a19      	ldr	r2, [pc, #100]	; (1a000734 <Reset_Handler+0x74>)
1a0006ce:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0006d0:	2300      	movs	r3, #0
1a0006d2:	e005      	b.n	1a0006e0 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0006d4:	4a18      	ldr	r2, [pc, #96]	; (1a000738 <Reset_Handler+0x78>)
1a0006d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0006da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0006de:	3301      	adds	r3, #1
1a0006e0:	2b07      	cmp	r3, #7
1a0006e2:	d9f7      	bls.n	1a0006d4 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a0006e4:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a0006e6:	4b15      	ldr	r3, [pc, #84]	; (1a00073c <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0006e8:	e007      	b.n	1a0006fa <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a0006ea:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0006ee:	689a      	ldr	r2, [r3, #8]
1a0006f0:	6859      	ldr	r1, [r3, #4]
1a0006f2:	6818      	ldr	r0, [r3, #0]
1a0006f4:	f7ff fd1f 	bl	1a000136 <data_init>
        SectionLen = *SectionTableAddr++;
1a0006f8:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0006fa:	4a11      	ldr	r2, [pc, #68]	; (1a000740 <Reset_Handler+0x80>)
1a0006fc:	4293      	cmp	r3, r2
1a0006fe:	d3f4      	bcc.n	1a0006ea <Reset_Handler+0x2a>
1a000700:	e006      	b.n	1a000710 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a000702:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000704:	6859      	ldr	r1, [r3, #4]
1a000706:	f854 0b08 	ldr.w	r0, [r4], #8
1a00070a:	f7ff fd23 	bl	1a000154 <bss_init>
        SectionLen = *SectionTableAddr++;
1a00070e:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000710:	4a0c      	ldr	r2, [pc, #48]	; (1a000744 <Reset_Handler+0x84>)
1a000712:	4293      	cmp	r3, r2
1a000714:	d3f5      	bcc.n	1a000702 <Reset_Handler+0x42>
    SystemInit();
1a000716:	f003 ffdd 	bl	1a0046d4 <SystemInit>
    __libc_init_array();
1a00071a:	f004 fc41 	bl	1a004fa0 <__libc_init_array>
    initialise_monitor_handles();
1a00071e:	f7ff ffcd 	bl	1a0006bc <initialise_monitor_handles>
    main();
1a000722:	f7ff fdf1 	bl	1a000308 <main>
        __asm__ volatile("wfi");
1a000726:	bf30      	wfi
1a000728:	e7fd      	b.n	1a000726 <Reset_Handler+0x66>
1a00072a:	bf00      	nop
1a00072c:	40053100 	.word	0x40053100
1a000730:	10df1000 	.word	0x10df1000
1a000734:	01dff7ff 	.word	0x01dff7ff
1a000738:	e000e280 	.word	0xe000e280
1a00073c:	1a0000c0 	.word	0x1a0000c0
1a000740:	1a0000fc 	.word	0x1a0000fc
1a000744:	1a000124 	.word	0x1a000124

1a000748 <_fini>:
void _fini(void) {}
1a000748:	4770      	bx	lr

1a00074a <_init>:
void _init(void) {}
1a00074a:	4770      	bx	lr

1a00074c <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a00074c:	4b05      	ldr	r3, [pc, #20]	; (1a000764 <_sbrk_r+0x18>)
1a00074e:	681b      	ldr	r3, [r3, #0]
1a000750:	b123      	cbz	r3, 1a00075c <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a000752:	4b04      	ldr	r3, [pc, #16]	; (1a000764 <_sbrk_r+0x18>)
1a000754:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a000756:	4401      	add	r1, r0
1a000758:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a00075a:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a00075c:	4b01      	ldr	r3, [pc, #4]	; (1a000764 <_sbrk_r+0x18>)
1a00075e:	4a02      	ldr	r2, [pc, #8]	; (1a000768 <_sbrk_r+0x1c>)
1a000760:	601a      	str	r2, [r3, #0]
1a000762:	e7f6      	b.n	1a000752 <_sbrk_r+0x6>
1a000764:	100000c4 	.word	0x100000c4
1a000768:	100012b0 	.word	0x100012b0

1a00076c <ld_word>:

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
1a00076c:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
1a00076e:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
1a000770:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
1a000774:	4770      	bx	lr

1a000776 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
1a000776:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
1a000778:	7883      	ldrb	r3, [r0, #2]
1a00077a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
1a00077e:	7843      	ldrb	r3, [r0, #1]
1a000780:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
1a000784:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
1a000786:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
1a00078a:	4770      	bx	lr

1a00078c <ld_qword>:

#if FF_FS_EXFAT
static QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
1a00078c:	b430      	push	{r4, r5}
	QWORD rv;

	rv = ptr[7];
1a00078e:	79c2      	ldrb	r2, [r0, #7]
	rv = rv << 8 | ptr[6];
1a000790:	7984      	ldrb	r4, [r0, #6]
1a000792:	ea44 2102 	orr.w	r1, r4, r2, lsl #8
	rv = rv << 8 | ptr[5];
1a000796:	7944      	ldrb	r4, [r0, #5]
1a000798:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
	rv = rv << 8 | ptr[4];
1a00079c:	0e0b      	lsrs	r3, r1, #24
1a00079e:	7904      	ldrb	r4, [r0, #4]
1a0007a0:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
	rv = rv << 8 | ptr[3];
1a0007a4:	021b      	lsls	r3, r3, #8
1a0007a6:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
1a0007aa:	78c4      	ldrb	r4, [r0, #3]
1a0007ac:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
	rv = rv << 8 | ptr[2];
1a0007b0:	021b      	lsls	r3, r3, #8
1a0007b2:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
1a0007b6:	7884      	ldrb	r4, [r0, #2]
1a0007b8:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
	rv = rv << 8 | ptr[1];
1a0007bc:	021b      	lsls	r3, r3, #8
1a0007be:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
1a0007c2:	7844      	ldrb	r4, [r0, #1]
1a0007c4:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
	rv = rv << 8 | ptr[0];
1a0007c8:	021b      	lsls	r3, r3, #8
1a0007ca:	7804      	ldrb	r4, [r0, #0]
	return rv;
}
1a0007cc:	ea44 2001 	orr.w	r0, r4, r1, lsl #8
1a0007d0:	ea43 6111 	orr.w	r1, r3, r1, lsr #24
1a0007d4:	bc30      	pop	{r4, r5}
1a0007d6:	4770      	bx	lr

1a0007d8 <st_word>:
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
1a0007d8:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
1a0007da:	0a09      	lsrs	r1, r1, #8
1a0007dc:	7041      	strb	r1, [r0, #1]
}
1a0007de:	4770      	bx	lr

1a0007e0 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
1a0007e0:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
1a0007e2:	f3c1 2307 	ubfx	r3, r1, #8, #8
1a0007e6:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
1a0007e8:	f3c1 4307 	ubfx	r3, r1, #16, #8
1a0007ec:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
1a0007ee:	0e09      	lsrs	r1, r1, #24
1a0007f0:	70c1      	strb	r1, [r0, #3]
}
1a0007f2:	4770      	bx	lr

1a0007f4 <st_qword>:

#if FF_FS_EXFAT
static void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
1a0007f4:	7002      	strb	r2, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
1a0007f6:	f3c2 2107 	ubfx	r1, r2, #8, #8
1a0007fa:	7041      	strb	r1, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
1a0007fc:	f3c2 4107 	ubfx	r1, r2, #16, #8
1a000800:	7081      	strb	r1, [r0, #2]
	*ptr++ = (BYTE)val; val >>= 8;
1a000802:	0e12      	lsrs	r2, r2, #24
1a000804:	70c2      	strb	r2, [r0, #3]
	*ptr++ = (BYTE)val; val >>= 8;
1a000806:	7103      	strb	r3, [r0, #4]
	*ptr++ = (BYTE)val; val >>= 8;
1a000808:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a00080c:	7142      	strb	r2, [r0, #5]
	*ptr++ = (BYTE)val; val >>= 8;
1a00080e:	f3c3 4207 	ubfx	r2, r3, #16, #8
1a000812:	7182      	strb	r2, [r0, #6]
	*ptr++ = (BYTE)val;
1a000814:	0e1b      	lsrs	r3, r3, #24
1a000816:	71c3      	strb	r3, [r0, #7]
}
1a000818:	4770      	bx	lr

1a00081a <mem_cpy>:
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt != 0) {
1a00081a:	4613      	mov	r3, r2
1a00081c:	b12a      	cbz	r2, 1a00082a <mem_cpy+0x10>
		do {
			*d++ = *s++;
1a00081e:	f811 2b01 	ldrb.w	r2, [r1], #1
1a000822:	f800 2b01 	strb.w	r2, [r0], #1
		} while (--cnt);
1a000826:	3b01      	subs	r3, #1
1a000828:	d1f9      	bne.n	1a00081e <mem_cpy+0x4>
	}
}
1a00082a:	4770      	bx	lr

1a00082c <mem_set>:
static void mem_set (void* dst, int val, UINT cnt)
{
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
1a00082c:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
1a000830:	3a01      	subs	r2, #1
1a000832:	d1fb      	bne.n	1a00082c <mem_set>
}
1a000834:	4770      	bx	lr

1a000836 <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
1a000836:	b410      	push	{r4}
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
1a000838:	f810 3b01 	ldrb.w	r3, [r0], #1
1a00083c:	f811 4b01 	ldrb.w	r4, [r1], #1
1a000840:	1b1b      	subs	r3, r3, r4
	} while (--cnt && r == 0);
1a000842:	3a01      	subs	r2, #1
1a000844:	d001      	beq.n	1a00084a <mem_cmp+0x14>
1a000846:	2b00      	cmp	r3, #0
1a000848:	d0f6      	beq.n	1a000838 <mem_cmp+0x2>

	return r;
}
1a00084a:	4618      	mov	r0, r3
1a00084c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000850:	4770      	bx	lr

1a000852 <chk_chr>:


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
	while (*str && *str != chr) str++;
1a000852:	7803      	ldrb	r3, [r0, #0]
1a000854:	b11b      	cbz	r3, 1a00085e <chk_chr+0xc>
1a000856:	428b      	cmp	r3, r1
1a000858:	d001      	beq.n	1a00085e <chk_chr+0xc>
1a00085a:	3001      	adds	r0, #1
1a00085c:	e7f9      	b.n	1a000852 <chk_chr>
	return *str;
}
1a00085e:	4618      	mov	r0, r3
1a000860:	4770      	bx	lr

1a000862 <dbc_1st>:
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
}
1a000862:	2000      	movs	r0, #0
1a000864:	4770      	bx	lr
1a000866:	Address 0x000000001a000866 is out of bounds.


1a000868 <tchar2uni>:

/* Get a character from TCHAR string in defined API encodeing */
static DWORD tchar2uni (	/* Returns character in UTF-16 encoding (>=0x10000 on double encoding unit, 0xFFFFFFFF on decode error) */
	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
)
{
1a000868:	b430      	push	{r4, r5}
1a00086a:	4605      	mov	r5, r0

#elif FF_LFN_UNICODE == 2	/* UTF-8 input */
	BYTE b;
	int nf;

	uc = (BYTE)*p++;	/* Get a unit */
1a00086c:	6803      	ldr	r3, [r0, #0]
1a00086e:	f813 2b01 	ldrb.w	r2, [r3], #1
1a000872:	4610      	mov	r0, r2
	if (uc & 0x80) {	/* Multiple byte code? */
1a000874:	f012 0f80 	tst.w	r2, #128	; 0x80
1a000878:	d102      	bne.n	1a000880 <tchar2uni+0x18>
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
	}
	uc = wc;

#endif
	*str = p;	/* Next read pointer */
1a00087a:	602b      	str	r3, [r5, #0]
	return uc;
}
1a00087c:	bc30      	pop	{r4, r5}
1a00087e:	4770      	bx	lr
		if ((uc & 0xE0) == 0xC0) {	/* 2-byte sequence? */
1a000880:	f002 01e0 	and.w	r1, r2, #224	; 0xe0
1a000884:	29c0      	cmp	r1, #192	; 0xc0
1a000886:	d00b      	beq.n	1a0008a0 <tchar2uni+0x38>
			if ((uc & 0xF0) == 0xE0) {	/* 3-byte sequence? */
1a000888:	f002 01f0 	and.w	r1, r2, #240	; 0xf0
1a00088c:	29e0      	cmp	r1, #224	; 0xe0
1a00088e:	d034      	beq.n	1a0008fa <tchar2uni+0x92>
				if ((uc & 0xF8) == 0xF0) {	/* 4-byte sequence? */
1a000890:	f002 01f8 	and.w	r1, r2, #248	; 0xf8
1a000894:	29f0      	cmp	r1, #240	; 0xf0
1a000896:	d136      	bne.n	1a000906 <tchar2uni+0x9e>
					uc &= 0x07; nf = 3;
1a000898:	f002 0007 	and.w	r0, r2, #7
1a00089c:	2103      	movs	r1, #3
1a00089e:	e002      	b.n	1a0008a6 <tchar2uni+0x3e>
			uc &= 0x1F; nf = 1;
1a0008a0:	f002 001f 	and.w	r0, r2, #31
1a0008a4:	2101      	movs	r1, #1
			b = (BYTE)*p++;
1a0008a6:	461a      	mov	r2, r3
1a0008a8:	f812 3b01 	ldrb.w	r3, [r2], #1
			if ((b & 0xC0) != 0x80) return 0xFFFFFFFF;	/* Wrong sequence? */
1a0008ac:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
1a0008b0:	2c80      	cmp	r4, #128	; 0x80
1a0008b2:	d12b      	bne.n	1a00090c <tchar2uni+0xa4>
			uc = uc << 6 | (b & 0x3F);
1a0008b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
1a0008b8:	ea43 1080 	orr.w	r0, r3, r0, lsl #6
			b = (BYTE)*p++;
1a0008bc:	4613      	mov	r3, r2
		} while (--nf != 0);
1a0008be:	3901      	subs	r1, #1
1a0008c0:	d1f1      	bne.n	1a0008a6 <tchar2uni+0x3e>
		if (uc < 0x80 || IsSurrogate(uc) || uc >= 0x110000) return 0xFFFFFFFF;	/* Wrong code? */
1a0008c2:	287f      	cmp	r0, #127	; 0x7f
1a0008c4:	d925      	bls.n	1a000912 <tchar2uni+0xaa>
1a0008c6:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
1a0008ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
1a0008ce:	d323      	bcc.n	1a000918 <tchar2uni+0xb0>
1a0008d0:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
1a0008d4:	d223      	bcs.n	1a00091e <tchar2uni+0xb6>
		if (uc >= 0x010000) uc = 0xD800DC00 | ((uc - 0x10000) << 6 & 0x3FF0000) | (uc & 0x3FF);	/* Make a surrogate pair if needed */
1a0008d6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
1a0008da:	d312      	bcc.n	1a000902 <tchar2uni+0x9a>
1a0008dc:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
1a0008e0:	4910      	ldr	r1, [pc, #64]	; (1a000924 <tchar2uni+0xbc>)
1a0008e2:	ea01 1183 	and.w	r1, r1, r3, lsl #6
1a0008e6:	f3c0 0309 	ubfx	r3, r0, #0, #10
1a0008ea:	ea41 0003 	orr.w	r0, r1, r3
1a0008ee:	f040 4058 	orr.w	r0, r0, #3623878656	; 0xd8000000
1a0008f2:	f440 405c 	orr.w	r0, r0, #56320	; 0xdc00
			b = (BYTE)*p++;
1a0008f6:	4613      	mov	r3, r2
1a0008f8:	e7bf      	b.n	1a00087a <tchar2uni+0x12>
				uc &= 0x0F; nf = 2;
1a0008fa:	f002 000f 	and.w	r0, r2, #15
1a0008fe:	2102      	movs	r1, #2
1a000900:	e7d1      	b.n	1a0008a6 <tchar2uni+0x3e>
			b = (BYTE)*p++;
1a000902:	4613      	mov	r3, r2
1a000904:	e7b9      	b.n	1a00087a <tchar2uni+0x12>
					return 0xFFFFFFFF;
1a000906:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00090a:	e7b7      	b.n	1a00087c <tchar2uni+0x14>
			if ((b & 0xC0) != 0x80) return 0xFFFFFFFF;	/* Wrong sequence? */
1a00090c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000910:	e7b4      	b.n	1a00087c <tchar2uni+0x14>
		if (uc < 0x80 || IsSurrogate(uc) || uc >= 0x110000) return 0xFFFFFFFF;	/* Wrong code? */
1a000912:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000916:	e7b1      	b.n	1a00087c <tchar2uni+0x14>
1a000918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00091c:	e7ae      	b.n	1a00087c <tchar2uni+0x14>
1a00091e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000922:	e7ab      	b.n	1a00087c <tchar2uni+0x14>
1a000924:	03ff0000 	.word	0x03ff0000

1a000928 <clst2sect>:
static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
1a000928:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
1a00092a:	69c3      	ldr	r3, [r0, #28]
1a00092c:	3b02      	subs	r3, #2
1a00092e:	428b      	cmp	r3, r1
1a000930:	d904      	bls.n	1a00093c <clst2sect+0x14>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
1a000932:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a000934:	8940      	ldrh	r0, [r0, #10]
1a000936:	fb01 3000 	mla	r0, r1, r0, r3
1a00093a:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
1a00093c:	2000      	movs	r0, #0
}
1a00093e:	4770      	bx	lr

1a000940 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
1a000940:	b570      	push	{r4, r5, r6, lr}
1a000942:	4606      	mov	r6, r0
1a000944:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
1a000946:	f101 001a 	add.w	r0, r1, #26
1a00094a:	f7ff ff0f 	bl	1a00076c <ld_word>
	if (fs->fs_type == FS_FAT32) {
1a00094e:	7833      	ldrb	r3, [r6, #0]
1a000950:	2b03      	cmp	r3, #3
1a000952:	d000      	beq.n	1a000956 <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
1a000954:	bd70      	pop	{r4, r5, r6, pc}
1a000956:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
1a000958:	f105 0014 	add.w	r0, r5, #20
1a00095c:	f7ff ff06 	bl	1a00076c <ld_word>
1a000960:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
1a000964:	e7f6      	b.n	1a000954 <ld_clust+0x14>

1a000966 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
1a000966:	b570      	push	{r4, r5, r6, lr}
1a000968:	4606      	mov	r6, r0
1a00096a:	460c      	mov	r4, r1
1a00096c:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
1a00096e:	b291      	uxth	r1, r2
1a000970:	f104 001a 	add.w	r0, r4, #26
1a000974:	f7ff ff30 	bl	1a0007d8 <st_word>
	if (fs->fs_type == FS_FAT32) {
1a000978:	7833      	ldrb	r3, [r6, #0]
1a00097a:	2b03      	cmp	r3, #3
1a00097c:	d000      	beq.n	1a000980 <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
1a00097e:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
1a000980:	0c29      	lsrs	r1, r5, #16
1a000982:	f104 0014 	add.w	r0, r4, #20
1a000986:	f7ff ff27 	bl	1a0007d8 <st_word>
}
1a00098a:	e7f8      	b.n	1a00097e <st_clust+0x18>

1a00098c <pick_lfn>:

static int pick_lfn (	/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
1a00098c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000990:	4680      	mov	r8, r0
1a000992:	460f      	mov	r7, r1
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
1a000994:	f101 001a 	add.w	r0, r1, #26
1a000998:	f7ff fee8 	bl	1a00076c <ld_word>
1a00099c:	bb50      	cbnz	r0, 1a0009f4 <pick_lfn+0x68>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
1a00099e:	783d      	ldrb	r5, [r7, #0]
1a0009a0:	f025 0540 	bic.w	r5, r5, #64	; 0x40
1a0009a4:	3d01      	subs	r5, #1
1a0009a6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
1a0009aa:	eb05 0583 	add.w	r5, r5, r3, lsl #2

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1a0009ae:	2601      	movs	r6, #1
1a0009b0:	2400      	movs	r4, #0
1a0009b2:	e004      	b.n	1a0009be <pick_lfn+0x32>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc != 0) {
			if (i >= FF_MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
1a0009b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a0009b8:	4298      	cmp	r0, r3
1a0009ba:	d120      	bne.n	1a0009fe <pick_lfn+0x72>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1a0009bc:	3401      	adds	r4, #1
1a0009be:	2c0c      	cmp	r4, #12
1a0009c0:	d80d      	bhi.n	1a0009de <pick_lfn+0x52>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
1a0009c2:	4b12      	ldr	r3, [pc, #72]	; (1a000a0c <pick_lfn+0x80>)
1a0009c4:	5d18      	ldrb	r0, [r3, r4]
1a0009c6:	4438      	add	r0, r7
1a0009c8:	f7ff fed0 	bl	1a00076c <ld_word>
		if (wc != 0) {
1a0009cc:	2e00      	cmp	r6, #0
1a0009ce:	d0f1      	beq.n	1a0009b4 <pick_lfn+0x28>
			if (i >= FF_MAX_LFN) return 0;	/* Buffer overflow? */
1a0009d0:	2dfe      	cmp	r5, #254	; 0xfe
1a0009d2:	d812      	bhi.n	1a0009fa <pick_lfn+0x6e>
			lfnbuf[i++] = wc = uc;			/* Store it */
1a0009d4:	f828 0015 	strh.w	r0, [r8, r5, lsl #1]
1a0009d8:	4606      	mov	r6, r0
1a0009da:	3501      	adds	r5, #1
1a0009dc:	e7ee      	b.n	1a0009bc <pick_lfn+0x30>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
1a0009de:	783b      	ldrb	r3, [r7, #0]
1a0009e0:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0009e4:	d00d      	beq.n	1a000a02 <pick_lfn+0x76>
		if (i >= FF_MAX_LFN) return 0;		/* Buffer overflow? */
1a0009e6:	2dfe      	cmp	r5, #254	; 0xfe
1a0009e8:	d80d      	bhi.n	1a000a06 <pick_lfn+0x7a>
		lfnbuf[i] = 0;
1a0009ea:	2300      	movs	r3, #0
1a0009ec:	f828 3015 	strh.w	r3, [r8, r5, lsl #1]
	}

	return 1;		/* The part of LFN is valid */
1a0009f0:	2001      	movs	r0, #1
1a0009f2:	e000      	b.n	1a0009f6 <pick_lfn+0x6a>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
1a0009f4:	2000      	movs	r0, #0
}
1a0009f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (i >= FF_MAX_LFN) return 0;	/* Buffer overflow? */
1a0009fa:	2000      	movs	r0, #0
1a0009fc:	e7fb      	b.n	1a0009f6 <pick_lfn+0x6a>
			if (uc != 0xFFFF) return 0;		/* Check filler */
1a0009fe:	2000      	movs	r0, #0
1a000a00:	e7f9      	b.n	1a0009f6 <pick_lfn+0x6a>
	return 1;		/* The part of LFN is valid */
1a000a02:	2001      	movs	r0, #1
1a000a04:	e7f7      	b.n	1a0009f6 <pick_lfn+0x6a>
		if (i >= FF_MAX_LFN) return 0;		/* Buffer overflow? */
1a000a06:	2000      	movs	r0, #0
1a000a08:	e7f5      	b.n	1a0009f6 <pick_lfn+0x6a>
1a000a0a:	bf00      	nop
1a000a0c:	1a0059e4 	.word	0x1a0059e4

1a000a10 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
1a000a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a000a14:	4680      	mov	r8, r0
1a000a16:	460f      	mov	r7, r1
1a000a18:	4691      	mov	r9, r2
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
1a000a1a:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
1a000a1c:	230f      	movs	r3, #15
1a000a1e:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
1a000a20:	2400      	movs	r4, #0
1a000a22:	730c      	strb	r4, [r1, #12]
	st_word(dir + LDIR_FstClusLO, 0);
1a000a24:	4621      	mov	r1, r4
1a000a26:	f107 001a 	add.w	r0, r7, #26
1a000a2a:	f7ff fed5 	bl	1a0007d8 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
1a000a2e:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
1a000a32:	eb06 0346 	add.w	r3, r6, r6, lsl #1
1a000a36:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	s = wc = 0;
1a000a3a:	4625      	mov	r5, r4
1a000a3c:	e002      	b.n	1a000a44 <put_lfn+0x34>
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
	} while (++s < 13);
1a000a3e:	3401      	adds	r4, #1
1a000a40:	2c0c      	cmp	r4, #12
1a000a42:	d811      	bhi.n	1a000a68 <put_lfn+0x58>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
1a000a44:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a000a48:	429d      	cmp	r5, r3
1a000a4a:	d002      	beq.n	1a000a52 <put_lfn+0x42>
1a000a4c:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
1a000a50:	3601      	adds	r6, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
1a000a52:	4b0c      	ldr	r3, [pc, #48]	; (1a000a84 <put_lfn+0x74>)
1a000a54:	5d18      	ldrb	r0, [r3, r4]
1a000a56:	4629      	mov	r1, r5
1a000a58:	4438      	add	r0, r7
1a000a5a:	f7ff febd 	bl	1a0007d8 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
1a000a5e:	2d00      	cmp	r5, #0
1a000a60:	d1ed      	bne.n	1a000a3e <put_lfn+0x2e>
1a000a62:	f64f 75ff 	movw	r5, #65535	; 0xffff
1a000a66:	e7ea      	b.n	1a000a3e <put_lfn+0x2e>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
1a000a68:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a000a6c:	429d      	cmp	r5, r3
1a000a6e:	d002      	beq.n	1a000a76 <put_lfn+0x66>
1a000a70:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
1a000a74:	b90b      	cbnz	r3, 1a000a7a <put_lfn+0x6a>
1a000a76:	f049 0940 	orr.w	r9, r9, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
1a000a7a:	f887 9000 	strb.w	r9, [r7]
}
1a000a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a000a82:	bf00      	nop
1a000a84:	1a0059e4 	.word	0x1a0059e4

1a000a88 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
1a000a88:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000a8a:	b083      	sub	sp, #12
1a000a8c:	4606      	mov	r6, r0
1a000a8e:	4615      	mov	r5, r2
1a000a90:	461c      	mov	r4, r3
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
1a000a92:	220b      	movs	r2, #11
1a000a94:	f7ff fec1 	bl	1a00081a <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
1a000a98:	2c05      	cmp	r4, #5
1a000a9a:	d811      	bhi.n	1a000ac0 <gen_numname+0x38>
		sr = seq;
		while (*lfn) {	/* Create a CRC as hash value */
			wc = *lfn++;
			for (i = 0; i < 16; i++) {
1a000a9c:	2707      	movs	r7, #7
1a000a9e:	e01f      	b.n	1a000ae0 <gen_numname+0x58>
1a000aa0:	3201      	adds	r2, #1
1a000aa2:	2a0f      	cmp	r2, #15
1a000aa4:	d80c      	bhi.n	1a000ac0 <gen_numname+0x38>
				sr = (sr << 1) + (wc & 1);
1a000aa6:	f003 0101 	and.w	r1, r3, #1
1a000aaa:	eb01 0444 	add.w	r4, r1, r4, lsl #1
				wc >>= 1;
1a000aae:	085b      	lsrs	r3, r3, #1
				if (sr & 0x10000) sr ^= 0x11021;
1a000ab0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
1a000ab4:	d0f4      	beq.n	1a000aa0 <gen_numname+0x18>
1a000ab6:	f484 3488 	eor.w	r4, r4, #69632	; 0x11000
1a000aba:	f084 0421 	eor.w	r4, r4, #33	; 0x21
1a000abe:	e7ef      	b.n	1a000aa0 <gen_numname+0x18>
		while (*lfn) {	/* Create a CRC as hash value */
1a000ac0:	882b      	ldrh	r3, [r5, #0]
1a000ac2:	2b00      	cmp	r3, #0
1a000ac4:	d0ea      	beq.n	1a000a9c <gen_numname+0x14>
			wc = *lfn++;
1a000ac6:	3502      	adds	r5, #2
			for (i = 0; i < 16; i++) {
1a000ac8:	2200      	movs	r2, #0
1a000aca:	e7ea      	b.n	1a000aa2 <gen_numname+0x1a>
	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (BYTE)((seq % 16) + '0');
		if (c > '9') c += 7;
		ns[i--] = c;
1a000acc:	1e7d      	subs	r5, r7, #1
1a000ace:	aa02      	add	r2, sp, #8
1a000ad0:	443a      	add	r2, r7
1a000ad2:	f802 3c08 	strb.w	r3, [r2, #-8]
		seq /= 16;
1a000ad6:	0923      	lsrs	r3, r4, #4
	} while (seq);
1a000ad8:	2c0f      	cmp	r4, #15
1a000ada:	d90a      	bls.n	1a000af2 <gen_numname+0x6a>
		ns[i--] = c;
1a000adc:	462f      	mov	r7, r5
		seq /= 16;
1a000ade:	461c      	mov	r4, r3
		c = (BYTE)((seq % 16) + '0');
1a000ae0:	f004 020f 	and.w	r2, r4, #15
1a000ae4:	f102 0330 	add.w	r3, r2, #48	; 0x30
		if (c > '9') c += 7;
1a000ae8:	2b39      	cmp	r3, #57	; 0x39
1a000aea:	d9ef      	bls.n	1a000acc <gen_numname+0x44>
1a000aec:	f102 0337 	add.w	r3, r2, #55	; 0x37
1a000af0:	e7ec      	b.n	1a000acc <gen_numname+0x44>
	ns[i] = '~';
1a000af2:	227e      	movs	r2, #126	; 0x7e
1a000af4:	ab02      	add	r3, sp, #8
1a000af6:	442b      	add	r3, r5
1a000af8:	f803 2c08 	strb.w	r2, [r3, #-8]

	/* Append the number to the SFN body */
	for (j = 0; j < i && dst[j] != ' '; j++) {
1a000afc:	2400      	movs	r4, #0
1a000afe:	e000      	b.n	1a000b02 <gen_numname+0x7a>
1a000b00:	3401      	adds	r4, #1
1a000b02:	42ac      	cmp	r4, r5
1a000b04:	d211      	bcs.n	1a000b2a <gen_numname+0xa2>
1a000b06:	5d30      	ldrb	r0, [r6, r4]
1a000b08:	2820      	cmp	r0, #32
1a000b0a:	d00e      	beq.n	1a000b2a <gen_numname+0xa2>
		if (dbc_1st(dst[j])) {
1a000b0c:	f7ff fea9 	bl	1a000862 <dbc_1st>
1a000b10:	2800      	cmp	r0, #0
1a000b12:	d0f5      	beq.n	1a000b00 <gen_numname+0x78>
			if (j == i - 1) break;
1a000b14:	1ebb      	subs	r3, r7, #2
1a000b16:	42a3      	cmp	r3, r4
1a000b18:	d007      	beq.n	1a000b2a <gen_numname+0xa2>
			j++;
1a000b1a:	3401      	adds	r4, #1
1a000b1c:	e7f0      	b.n	1a000b00 <gen_numname+0x78>
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
1a000b1e:	2220      	movs	r2, #32
1a000b20:	1c63      	adds	r3, r4, #1
1a000b22:	5532      	strb	r2, [r6, r4]
	} while (j < 8);
1a000b24:	2b07      	cmp	r3, #7
1a000b26:	d808      	bhi.n	1a000b3a <gen_numname+0xb2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
1a000b28:	461c      	mov	r4, r3
1a000b2a:	2d07      	cmp	r5, #7
1a000b2c:	d8f7      	bhi.n	1a000b1e <gen_numname+0x96>
1a000b2e:	ab02      	add	r3, sp, #8
1a000b30:	442b      	add	r3, r5
1a000b32:	f813 2c08 	ldrb.w	r2, [r3, #-8]
1a000b36:	3501      	adds	r5, #1
1a000b38:	e7f2      	b.n	1a000b20 <gen_numname+0x98>
}
1a000b3a:	b003      	add	sp, #12
1a000b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a000b3e <sum_sfn>:
static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
	BYTE sum = 0;
	UINT n = 11;
1a000b3e:	210b      	movs	r1, #11
	BYTE sum = 0;
1a000b40:	2200      	movs	r2, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
1a000b42:	01d3      	lsls	r3, r2, #7
1a000b44:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
1a000b48:	f810 2b01 	ldrb.w	r2, [r0], #1
1a000b4c:	fa52 f383 	uxtab	r3, r2, r3
1a000b50:	b2da      	uxtb	r2, r3
	} while (--n);
1a000b52:	3901      	subs	r1, #1
1a000b54:	d1f5      	bne.n	1a000b42 <sum_sfn+0x4>
	return sum;
}
1a000b56:	4610      	mov	r0, r2
1a000b58:	4770      	bx	lr

1a000b5a <xdir_sum>:
/*-----------------------------------------------------------------------*/

static WORD xdir_sum (	/* Get checksum of the directoly entry block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
1a000b5a:	b430      	push	{r4, r5}
1a000b5c:	4605      	mov	r5, r0
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
1a000b5e:	7841      	ldrb	r1, [r0, #1]
1a000b60:	3101      	adds	r1, #1
1a000b62:	0149      	lsls	r1, r1, #5
	for (i = sum = 0; i < szblk; i++) {
1a000b64:	2000      	movs	r0, #0
1a000b66:	4603      	mov	r3, r0
1a000b68:	e007      	b.n	1a000b7a <xdir_sum+0x20>
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
			i++;
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
1a000b6a:	0842      	lsrs	r2, r0, #1
1a000b6c:	eb02 32c0 	add.w	r2, r2, r0, lsl #15
1a000b70:	5cec      	ldrb	r4, [r5, r3]
1a000b72:	fa14 f282 	uxtah	r2, r4, r2
1a000b76:	b290      	uxth	r0, r2
	for (i = sum = 0; i < szblk; i++) {
1a000b78:	3301      	adds	r3, #1
1a000b7a:	428b      	cmp	r3, r1
1a000b7c:	d203      	bcs.n	1a000b86 <xdir_sum+0x2c>
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
1a000b7e:	2b02      	cmp	r3, #2
1a000b80:	d1f3      	bne.n	1a000b6a <xdir_sum+0x10>
			i++;
1a000b82:	3301      	adds	r3, #1
1a000b84:	e7f8      	b.n	1a000b78 <xdir_sum+0x1e>
		}
	}
	return sum;
}
1a000b86:	bc30      	pop	{r4, r5}
1a000b88:	4770      	bx	lr

1a000b8a <init_alloc_info>:

static void init_alloc_info (
	FATFS* fs,		/* Filesystem object */
	FFOBJID* obj	/* Object allocation information to be initialized */
)
{
1a000b8a:	b538      	push	{r3, r4, r5, lr}
1a000b8c:	4605      	mov	r5, r0
1a000b8e:	460c      	mov	r4, r1
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
1a000b90:	6900      	ldr	r0, [r0, #16]
1a000b92:	3034      	adds	r0, #52	; 0x34
1a000b94:	f7ff fdef 	bl	1a000776 <ld_dword>
1a000b98:	60a0      	str	r0, [r4, #8]
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
1a000b9a:	6928      	ldr	r0, [r5, #16]
1a000b9c:	3038      	adds	r0, #56	; 0x38
1a000b9e:	f7ff fdf5 	bl	1a00078c <ld_qword>
1a000ba2:	e9c4 0104 	strd	r0, r1, [r4, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
1a000ba6:	692b      	ldr	r3, [r5, #16]
1a000ba8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
1a000bac:	f003 0302 	and.w	r3, r3, #2
1a000bb0:	71e3      	strb	r3, [r4, #7]
	obj->n_frag = 0;										/* No last fragment info */
1a000bb2:	2300      	movs	r3, #0
1a000bb4:	61e3      	str	r3, [r4, #28]
}
1a000bb6:	bd38      	pop	{r3, r4, r5, pc}

1a000bb8 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
1a000bb8:	b4f0      	push	{r4, r5, r6, r7}
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
1a000bba:	6807      	ldr	r7, [r0, #0]
	if (!tp) return vol;	/* Invalid path name? */
1a000bbc:	2f00      	cmp	r7, #0
1a000bbe:	d04e      	beq.n	1a000c5e <get_ldnumber+0xa6>
	tt = tp = *path;
1a000bc0:	4639      	mov	r1, r7
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
1a000bc2:	460b      	mov	r3, r1
1a000bc4:	f813 2b01 	ldrb.w	r2, [r3], #1
1a000bc8:	2a1f      	cmp	r2, #31
1a000bca:	d902      	bls.n	1a000bd2 <get_ldnumber+0x1a>
1a000bcc:	4619      	mov	r1, r3
1a000bce:	2a3a      	cmp	r2, #58	; 0x3a
1a000bd0:	d1f7      	bne.n	1a000bc2 <get_ldnumber+0xa>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
1a000bd2:	2a3a      	cmp	r2, #58	; 0x3a
1a000bd4:	d004      	beq.n	1a000be0 <get_ldnumber+0x28>
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
1a000bd6:	f04f 0c00 	mov.w	ip, #0
}
1a000bda:	4660      	mov	r0, ip
1a000bdc:	bcf0      	pop	{r4, r5, r6, r7}
1a000bde:	4770      	bx	lr
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
1a000be0:	f897 c000 	ldrb.w	ip, [r7]
1a000be4:	f1ac 0230 	sub.w	r2, ip, #48	; 0x30
1a000be8:	b2d2      	uxtb	r2, r2
1a000bea:	2a09      	cmp	r2, #9
1a000bec:	d808      	bhi.n	1a000c00 <get_ldnumber+0x48>
1a000bee:	1cba      	adds	r2, r7, #2
1a000bf0:	429a      	cmp	r2, r3
1a000bf2:	d002      	beq.n	1a000bfa <get_ldnumber+0x42>
1a000bf4:	f04f 0c00 	mov.w	ip, #0
1a000bf8:	e004      	b.n	1a000c04 <get_ldnumber+0x4c>
			i = (int)*tp - '0';	/* Get the LD number */
1a000bfa:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
1a000bfe:	e026      	b.n	1a000c4e <get_ldnumber+0x96>
1a000c00:	f04f 0c00 	mov.w	ip, #0
				sp = VolumeStr[i]; tp = *path;	/* This string volume ID and path name */
1a000c04:	4a17      	ldr	r2, [pc, #92]	; (1a000c64 <get_ldnumber+0xac>)
1a000c06:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
1a000c0a:	463d      	mov	r5, r7
1a000c0c:	e003      	b.n	1a000c16 <get_ldnumber+0x5e>
				} while (c && (TCHAR)c == tc);
1a000c0e:	b1b2      	cbz	r2, 1a000c3e <get_ldnumber+0x86>
					c = *sp++; tc = *tp++;
1a000c10:	4635      	mov	r5, r6
				} while (c && (TCHAR)c == tc);
1a000c12:	4294      	cmp	r4, r2
1a000c14:	d113      	bne.n	1a000c3e <get_ldnumber+0x86>
					c = *sp++; tc = *tp++;
1a000c16:	f811 2b01 	ldrb.w	r2, [r1], #1
1a000c1a:	462e      	mov	r6, r5
1a000c1c:	f816 4b01 	ldrb.w	r4, [r6], #1
					if (IsLower(c)) c -= 0x20;
1a000c20:	f1a2 0561 	sub.w	r5, r2, #97	; 0x61
1a000c24:	b2ed      	uxtb	r5, r5
1a000c26:	2d19      	cmp	r5, #25
1a000c28:	d801      	bhi.n	1a000c2e <get_ldnumber+0x76>
1a000c2a:	3a20      	subs	r2, #32
1a000c2c:	b2d2      	uxtb	r2, r2
					if (IsLower(tc)) tc -= 0x20;
1a000c2e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
1a000c32:	b2ed      	uxtb	r5, r5
1a000c34:	2d19      	cmp	r5, #25
1a000c36:	d8ea      	bhi.n	1a000c0e <get_ldnumber+0x56>
1a000c38:	3c20      	subs	r4, #32
1a000c3a:	b2e4      	uxtb	r4, r4
1a000c3c:	e7e7      	b.n	1a000c0e <get_ldnumber+0x56>
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
1a000c3e:	b90a      	cbnz	r2, 1a000c44 <get_ldnumber+0x8c>
1a000c40:	42b3      	cmp	r3, r6
1a000c42:	d004      	beq.n	1a000c4e <get_ldnumber+0x96>
1a000c44:	f10c 0c01 	add.w	ip, ip, #1
1a000c48:	f1bc 0f01 	cmp.w	ip, #1
1a000c4c:	ddda      	ble.n	1a000c04 <get_ldnumber+0x4c>
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
1a000c4e:	f1bc 0f01 	cmp.w	ip, #1
1a000c52:	dd02      	ble.n	1a000c5a <get_ldnumber+0xa2>
	int i, vol = -1;
1a000c54:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
		return vol;
1a000c58:	e7bf      	b.n	1a000bda <get_ldnumber+0x22>
			*path = tt;		/* Snip the drive prefix off */
1a000c5a:	6003      	str	r3, [r0, #0]
1a000c5c:	e7bd      	b.n	1a000bda <get_ldnumber+0x22>
	if (!tp) return vol;	/* Invalid path name? */
1a000c5e:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
1a000c62:	e7ba      	b.n	1a000bda <get_ldnumber+0x22>
1a000c64:	1a0059f4 	.word	0x1a0059f4

1a000c68 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
1a000c68:	b538      	push	{r3, r4, r5, lr}
1a000c6a:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
1a000c6c:	b1a8      	cbz	r0, 1a000c9a <validate+0x32>
1a000c6e:	4604      	mov	r4, r0
1a000c70:	6803      	ldr	r3, [r0, #0]
1a000c72:	b1ab      	cbz	r3, 1a000ca0 <validate+0x38>
1a000c74:	781a      	ldrb	r2, [r3, #0]
1a000c76:	b1aa      	cbz	r2, 1a000ca4 <validate+0x3c>
1a000c78:	8881      	ldrh	r1, [r0, #4]
1a000c7a:	88da      	ldrh	r2, [r3, #6]
1a000c7c:	4291      	cmp	r1, r2
1a000c7e:	d003      	beq.n	1a000c88 <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
1a000c80:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
1a000c82:	2300      	movs	r3, #0
1a000c84:	602b      	str	r3, [r5, #0]
	return res;
}
1a000c86:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
1a000c88:	7858      	ldrb	r0, [r3, #1]
1a000c8a:	f002 fd3f 	bl	1a00370c <disk_status>
1a000c8e:	f010 0f01 	tst.w	r0, #1
1a000c92:	d10a      	bne.n	1a000caa <validate+0x42>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
1a000c94:	6823      	ldr	r3, [r4, #0]
			res = FR_OK;
1a000c96:	2000      	movs	r0, #0
1a000c98:	e7f4      	b.n	1a000c84 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
1a000c9a:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
1a000c9c:	2300      	movs	r3, #0
1a000c9e:	e7f1      	b.n	1a000c84 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
1a000ca0:	2009      	movs	r0, #9
1a000ca2:	e7ef      	b.n	1a000c84 <validate+0x1c>
1a000ca4:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
1a000ca6:	2300      	movs	r3, #0
1a000ca8:	e7ec      	b.n	1a000c84 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
1a000caa:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
1a000cac:	2300      	movs	r3, #0
1a000cae:	e7e9      	b.n	1a000c84 <validate+0x1c>

1a000cb0 <sync_window>:
{
1a000cb0:	b538      	push	{r3, r4, r5, lr}
	if (fs->wflag) {	/* Is the disk access window dirty */
1a000cb2:	78c3      	ldrb	r3, [r0, #3]
1a000cb4:	b90b      	cbnz	r3, 1a000cba <sync_window+0xa>
	FRESULT res = FR_OK;
1a000cb6:	2000      	movs	r0, #0
}
1a000cb8:	bd38      	pop	{r3, r4, r5, pc}
1a000cba:	4604      	mov	r4, r0
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
1a000cbc:	f100 0538 	add.w	r5, r0, #56	; 0x38
1a000cc0:	2301      	movs	r3, #1
1a000cc2:	6b42      	ldr	r2, [r0, #52]	; 0x34
1a000cc4:	4629      	mov	r1, r5
1a000cc6:	7840      	ldrb	r0, [r0, #1]
1a000cc8:	f002 fd3e 	bl	1a003748 <disk_write>
1a000ccc:	b9a0      	cbnz	r0, 1a000cf8 <sync_window+0x48>
			fs->wflag = 0;	/* Clear window dirty flag */
1a000cce:	2300      	movs	r3, #0
1a000cd0:	70e3      	strb	r3, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
1a000cd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a000cd4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
1a000cd6:	1acb      	subs	r3, r1, r3
1a000cd8:	6a22      	ldr	r2, [r4, #32]
1a000cda:	4293      	cmp	r3, r2
1a000cdc:	d20e      	bcs.n	1a000cfc <sync_window+0x4c>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
1a000cde:	78a3      	ldrb	r3, [r4, #2]
1a000ce0:	2b02      	cmp	r3, #2
1a000ce2:	d001      	beq.n	1a000ce8 <sync_window+0x38>
	FRESULT res = FR_OK;
1a000ce4:	2000      	movs	r0, #0
1a000ce6:	e7e7      	b.n	1a000cb8 <sync_window+0x8>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
1a000ce8:	2301      	movs	r3, #1
1a000cea:	440a      	add	r2, r1
1a000cec:	4629      	mov	r1, r5
1a000cee:	7860      	ldrb	r0, [r4, #1]
1a000cf0:	f002 fd2a 	bl	1a003748 <disk_write>
	FRESULT res = FR_OK;
1a000cf4:	2000      	movs	r0, #0
1a000cf6:	e7df      	b.n	1a000cb8 <sync_window+0x8>
			res = FR_DISK_ERR;
1a000cf8:	2001      	movs	r0, #1
1a000cfa:	e7dd      	b.n	1a000cb8 <sync_window+0x8>
	FRESULT res = FR_OK;
1a000cfc:	2000      	movs	r0, #0
1a000cfe:	e7db      	b.n	1a000cb8 <sync_window+0x8>

1a000d00 <move_window>:
{
1a000d00:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
1a000d02:	6b43      	ldr	r3, [r0, #52]	; 0x34
1a000d04:	428b      	cmp	r3, r1
1a000d06:	d102      	bne.n	1a000d0e <move_window+0xe>
	FRESULT res = FR_OK;
1a000d08:	2600      	movs	r6, #0
}
1a000d0a:	4630      	mov	r0, r6
1a000d0c:	bd70      	pop	{r4, r5, r6, pc}
1a000d0e:	4604      	mov	r4, r0
1a000d10:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
1a000d12:	f7ff ffcd 	bl	1a000cb0 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
1a000d16:	4606      	mov	r6, r0
1a000d18:	2800      	cmp	r0, #0
1a000d1a:	d1f6      	bne.n	1a000d0a <move_window+0xa>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
1a000d1c:	2301      	movs	r3, #1
1a000d1e:	462a      	mov	r2, r5
1a000d20:	f104 0138 	add.w	r1, r4, #56	; 0x38
1a000d24:	7860      	ldrb	r0, [r4, #1]
1a000d26:	f002 fcff 	bl	1a003728 <disk_read>
1a000d2a:	b110      	cbz	r0, 1a000d32 <move_window+0x32>
				res = FR_DISK_ERR;
1a000d2c:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
1a000d2e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
			fs->winsect = sector;
1a000d32:	6365      	str	r5, [r4, #52]	; 0x34
1a000d34:	e7e9      	b.n	1a000d0a <move_window+0xa>
1a000d36:	Address 0x000000001a000d36 is out of bounds.


1a000d38 <check_fs>:
{
1a000d38:	b510      	push	{r4, lr}
1a000d3a:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
1a000d3c:	2300      	movs	r3, #0
1a000d3e:	70c3      	strb	r3, [r0, #3]
1a000d40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a000d44:	6343      	str	r3, [r0, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
1a000d46:	f7ff ffdb 	bl	1a000d00 <move_window>
1a000d4a:	bb40      	cbnz	r0, 1a000d9e <check_fs+0x66>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
1a000d4c:	f204 2036 	addw	r0, r4, #566	; 0x236
1a000d50:	f7ff fd0c 	bl	1a00076c <ld_word>
1a000d54:	f64a 2355 	movw	r3, #43605	; 0xaa55
1a000d58:	4298      	cmp	r0, r3
1a000d5a:	d122      	bne.n	1a000da2 <check_fs+0x6a>
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
1a000d5c:	220b      	movs	r2, #11
1a000d5e:	4915      	ldr	r1, [pc, #84]	; (1a000db4 <check_fs+0x7c>)
1a000d60:	f104 0038 	add.w	r0, r4, #56	; 0x38
1a000d64:	f7ff fd67 	bl	1a000836 <mem_cmp>
1a000d68:	b1e8      	cbz	r0, 1a000da6 <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
1a000d6a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
1a000d6e:	2be9      	cmp	r3, #233	; 0xe9
1a000d70:	d005      	beq.n	1a000d7e <check_fs+0x46>
1a000d72:	2beb      	cmp	r3, #235	; 0xeb
1a000d74:	d003      	beq.n	1a000d7e <check_fs+0x46>
1a000d76:	2be8      	cmp	r3, #232	; 0xe8
1a000d78:	d001      	beq.n	1a000d7e <check_fs+0x46>
	return 2;	/* Valid BS but not FAT */
1a000d7a:	2002      	movs	r0, #2
1a000d7c:	e012      	b.n	1a000da4 <check_fs+0x6c>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
1a000d7e:	2203      	movs	r2, #3
1a000d80:	490d      	ldr	r1, [pc, #52]	; (1a000db8 <check_fs+0x80>)
1a000d82:	f104 006e 	add.w	r0, r4, #110	; 0x6e
1a000d86:	f7ff fd56 	bl	1a000836 <mem_cmp>
1a000d8a:	b170      	cbz	r0, 1a000daa <check_fs+0x72>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
1a000d8c:	2205      	movs	r2, #5
1a000d8e:	490b      	ldr	r1, [pc, #44]	; (1a000dbc <check_fs+0x84>)
1a000d90:	f104 008a 	add.w	r0, r4, #138	; 0x8a
1a000d94:	f7ff fd4f 	bl	1a000836 <mem_cmp>
1a000d98:	b148      	cbz	r0, 1a000dae <check_fs+0x76>
	return 2;	/* Valid BS but not FAT */
1a000d9a:	2002      	movs	r0, #2
1a000d9c:	e002      	b.n	1a000da4 <check_fs+0x6c>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
1a000d9e:	2004      	movs	r0, #4
1a000da0:	e000      	b.n	1a000da4 <check_fs+0x6c>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
1a000da2:	2003      	movs	r0, #3
}
1a000da4:	bd10      	pop	{r4, pc}
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
1a000da6:	2001      	movs	r0, #1
1a000da8:	e7fc      	b.n	1a000da4 <check_fs+0x6c>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
1a000daa:	2000      	movs	r0, #0
1a000dac:	e7fa      	b.n	1a000da4 <check_fs+0x6c>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
1a000dae:	2000      	movs	r0, #0
1a000db0:	e7f8      	b.n	1a000da4 <check_fs+0x6c>
1a000db2:	bf00      	nop
1a000db4:	1a0059fc 	.word	0x1a0059fc
1a000db8:	1a005a08 	.word	0x1a005a08
1a000dbc:	1a005a0c 	.word	0x1a005a0c

1a000dc0 <find_volume>:
{
1a000dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a000dc4:	b084      	sub	sp, #16
1a000dc6:	460d      	mov	r5, r1
1a000dc8:	4617      	mov	r7, r2
	*rfs = 0;
1a000dca:	2300      	movs	r3, #0
1a000dcc:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
1a000dce:	f7ff fef3 	bl	1a000bb8 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
1a000dd2:	1e06      	subs	r6, r0, #0
1a000dd4:	f2c0 81fe 	blt.w	1a0011d4 <find_volume+0x414>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
1a000dd8:	4bbd      	ldr	r3, [pc, #756]	; (1a0010d0 <find_volume+0x310>)
1a000dda:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
1a000dde:	2c00      	cmp	r4, #0
1a000de0:	f000 81fc 	beq.w	1a0011dc <find_volume+0x41c>
	*rfs = fs;							/* Return pointer to the filesystem object */
1a000de4:	602c      	str	r4, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
1a000de6:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
1a000dea:	7823      	ldrb	r3, [r4, #0]
1a000dec:	b173      	cbz	r3, 1a000e0c <find_volume+0x4c>
		stat = disk_status(fs->pdrv);
1a000dee:	7860      	ldrb	r0, [r4, #1]
1a000df0:	f002 fc8c 	bl	1a00370c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
1a000df4:	f010 0f01 	tst.w	r0, #1
1a000df8:	d108      	bne.n	1a000e0c <find_volume+0x4c>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
1a000dfa:	2f00      	cmp	r7, #0
1a000dfc:	f000 81f0 	beq.w	1a0011e0 <find_volume+0x420>
1a000e00:	f010 0f04 	tst.w	r0, #4
1a000e04:	f040 81ee 	bne.w	1a0011e4 <find_volume+0x424>
			return FR_OK;				/* The filesystem object is valid */
1a000e08:	2000      	movs	r0, #0
1a000e0a:	e1e4      	b.n	1a0011d6 <find_volume+0x416>
	fs->fs_type = 0;					/* Clear the filesystem object */
1a000e0c:	2300      	movs	r3, #0
1a000e0e:	7023      	strb	r3, [r4, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
1a000e10:	4bb0      	ldr	r3, [pc, #704]	; (1a0010d4 <find_volume+0x314>)
1a000e12:	f813 0016 	ldrb.w	r0, [r3, r6, lsl #1]
1a000e16:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
1a000e18:	f002 fc7f 	bl	1a00371a <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
1a000e1c:	f010 0f01 	tst.w	r0, #1
1a000e20:	f040 81e2 	bne.w	1a0011e8 <find_volume+0x428>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
1a000e24:	b11f      	cbz	r7, 1a000e2e <find_volume+0x6e>
1a000e26:	f010 0f04 	tst.w	r0, #4
1a000e2a:	f040 81df 	bne.w	1a0011ec <find_volume+0x42c>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
1a000e2e:	2100      	movs	r1, #0
1a000e30:	4620      	mov	r0, r4
1a000e32:	f7ff ff81 	bl	1a000d38 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
1a000e36:	2802      	cmp	r0, #2
1a000e38:	f000 8092 	beq.w	1a000f60 <find_volume+0x1a0>
1a000e3c:	2801      	cmp	r0, #1
1a000e3e:	d972      	bls.n	1a000f26 <find_volume+0x166>
	bsect = 0;
1a000e40:	2700      	movs	r7, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
1a000e42:	2804      	cmp	r0, #4
1a000e44:	f000 81d4 	beq.w	1a0011f0 <find_volume+0x430>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
1a000e48:	2801      	cmp	r0, #1
1a000e4a:	f200 81d3 	bhi.w	1a0011f4 <find_volume+0x434>
	if (fmt == 1) {
1a000e4e:	f000 811d 	beq.w	1a00108c <find_volume+0x2cc>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
1a000e52:	f104 0043 	add.w	r0, r4, #67	; 0x43
1a000e56:	f7ff fc89 	bl	1a00076c <ld_word>
1a000e5a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
1a000e5e:	f040 81df 	bne.w	1a001220 <find_volume+0x460>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
1a000e62:	f104 004e 	add.w	r0, r4, #78	; 0x4e
1a000e66:	f7ff fc81 	bl	1a00076c <ld_word>
1a000e6a:	4680      	mov	r8, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
1a000e6c:	b920      	cbnz	r0, 1a000e78 <find_volume+0xb8>
1a000e6e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a000e72:	f7ff fc80 	bl	1a000776 <ld_dword>
1a000e76:	4680      	mov	r8, r0
		fs->fsize = fasize;
1a000e78:	f8c4 8020 	str.w	r8, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
1a000e7c:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
1a000e80:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
1a000e82:	1e53      	subs	r3, r2, #1
1a000e84:	b2db      	uxtb	r3, r3
1a000e86:	2b01      	cmp	r3, #1
1a000e88:	f200 81cc 	bhi.w	1a001224 <find_volume+0x464>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
1a000e8c:	fb08 f502 	mul.w	r5, r8, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
1a000e90:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
1a000e94:	8166      	strh	r6, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
1a000e96:	2e00      	cmp	r6, #0
1a000e98:	f000 81c6 	beq.w	1a001228 <find_volume+0x468>
1a000e9c:	1e73      	subs	r3, r6, #1
1a000e9e:	421e      	tst	r6, r3
1a000ea0:	f040 81c4 	bne.w	1a00122c <find_volume+0x46c>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
1a000ea4:	f104 0049 	add.w	r0, r4, #73	; 0x49
1a000ea8:	f7ff fc60 	bl	1a00076c <ld_word>
1a000eac:	4681      	mov	r9, r0
1a000eae:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
1a000eb0:	f010 0f0f 	tst.w	r0, #15
1a000eb4:	f040 81bc 	bne.w	1a001230 <find_volume+0x470>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
1a000eb8:	f104 004b 	add.w	r0, r4, #75	; 0x4b
1a000ebc:	f7ff fc56 	bl	1a00076c <ld_word>
1a000ec0:	4682      	mov	sl, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
1a000ec2:	b920      	cbnz	r0, 1a000ece <find_volume+0x10e>
1a000ec4:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a000ec8:	f7ff fc55 	bl	1a000776 <ld_dword>
1a000ecc:	4682      	mov	sl, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
1a000ece:	f104 0046 	add.w	r0, r4, #70	; 0x46
1a000ed2:	f7ff fc4b 	bl	1a00076c <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
1a000ed6:	4684      	mov	ip, r0
1a000ed8:	2800      	cmp	r0, #0
1a000eda:	f000 81ab 	beq.w	1a001234 <find_volume+0x474>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
1a000ede:	1943      	adds	r3, r0, r5
1a000ee0:	eb03 1319 	add.w	r3, r3, r9, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
1a000ee4:	459a      	cmp	sl, r3
1a000ee6:	f0c0 81a7 	bcc.w	1a001238 <find_volume+0x478>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
1a000eea:	ebaa 0203 	sub.w	r2, sl, r3
1a000eee:	fbb2 f1f6 	udiv	r1, r2, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
1a000ef2:	42b2      	cmp	r2, r6
1a000ef4:	f0c0 81a2 	bcc.w	1a00123c <find_volume+0x47c>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
1a000ef8:	4a77      	ldr	r2, [pc, #476]	; (1a0010d8 <find_volume+0x318>)
1a000efa:	4291      	cmp	r1, r2
1a000efc:	f240 80e5 	bls.w	1a0010ca <find_volume+0x30a>
		fmt = 0;
1a000f00:	f04f 0a00 	mov.w	sl, #0
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
1a000f04:	f64f 72f5 	movw	r2, #65525	; 0xfff5
1a000f08:	4291      	cmp	r1, r2
1a000f0a:	d801      	bhi.n	1a000f10 <find_volume+0x150>
1a000f0c:	f04f 0a02 	mov.w	sl, #2
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
1a000f10:	f640 72f5 	movw	r2, #4085	; 0xff5
1a000f14:	4291      	cmp	r1, r2
1a000f16:	f240 80e3 	bls.w	1a0010e0 <find_volume+0x320>
		if (fmt == 0) return FR_NO_FILESYSTEM;
1a000f1a:	f1ba 0f00 	cmp.w	sl, #0
1a000f1e:	f040 80e1 	bne.w	1a0010e4 <find_volume+0x324>
1a000f22:	200d      	movs	r0, #13
1a000f24:	e157      	b.n	1a0011d6 <find_volume+0x416>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
1a000f26:	4b6b      	ldr	r3, [pc, #428]	; (1a0010d4 <find_volume+0x314>)
1a000f28:	eb03 0346 	add.w	r3, r3, r6, lsl #1
1a000f2c:	785b      	ldrb	r3, [r3, #1]
1a000f2e:	b9cb      	cbnz	r3, 1a000f64 <find_volume+0x1a4>
	bsect = 0;
1a000f30:	2700      	movs	r7, #0
1a000f32:	e786      	b.n	1a000e42 <find_volume+0x82>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
1a000f34:	2000      	movs	r0, #0
1a000f36:	ab04      	add	r3, sp, #16
1a000f38:	eb03 0385 	add.w	r3, r3, r5, lsl #2
1a000f3c:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
1a000f40:	3501      	adds	r5, #1
1a000f42:	2d03      	cmp	r5, #3
1a000f44:	d810      	bhi.n	1a000f68 <find_volume+0x1a8>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
1a000f46:	f104 0038 	add.w	r0, r4, #56	; 0x38
1a000f4a:	012b      	lsls	r3, r5, #4
1a000f4c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
1a000f50:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
1a000f52:	7903      	ldrb	r3, [r0, #4]
1a000f54:	2b00      	cmp	r3, #0
1a000f56:	d0ed      	beq.n	1a000f34 <find_volume+0x174>
1a000f58:	3008      	adds	r0, #8
1a000f5a:	f7ff fc0c 	bl	1a000776 <ld_dword>
1a000f5e:	e7ea      	b.n	1a000f36 <find_volume+0x176>
1a000f60:	2500      	movs	r5, #0
1a000f62:	e7ee      	b.n	1a000f42 <find_volume+0x182>
1a000f64:	2500      	movs	r5, #0
1a000f66:	e7ec      	b.n	1a000f42 <find_volume+0x182>
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
1a000f68:	4b5a      	ldr	r3, [pc, #360]	; (1a0010d4 <find_volume+0x314>)
1a000f6a:	eb03 0346 	add.w	r3, r3, r6, lsl #1
1a000f6e:	785d      	ldrb	r5, [r3, #1]
		if (i != 0) i--;
1a000f70:	b19d      	cbz	r5, 1a000f9a <find_volume+0x1da>
1a000f72:	3d01      	subs	r5, #1
1a000f74:	e011      	b.n	1a000f9a <find_volume+0x1da>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
1a000f76:	4639      	mov	r1, r7
1a000f78:	4620      	mov	r0, r4
1a000f7a:	f7ff fedd 	bl	1a000d38 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
1a000f7e:	4b55      	ldr	r3, [pc, #340]	; (1a0010d4 <find_volume+0x314>)
1a000f80:	eb03 0346 	add.w	r3, r3, r6, lsl #1
1a000f84:	785b      	ldrb	r3, [r3, #1]
1a000f86:	2b00      	cmp	r3, #0
1a000f88:	f47f af5b 	bne.w	1a000e42 <find_volume+0x82>
1a000f8c:	2801      	cmp	r0, #1
1a000f8e:	f67f af58 	bls.w	1a000e42 <find_volume+0x82>
1a000f92:	3501      	adds	r5, #1
1a000f94:	2d03      	cmp	r5, #3
1a000f96:	f63f af54 	bhi.w	1a000e42 <find_volume+0x82>
			bsect = br[i];
1a000f9a:	ab04      	add	r3, sp, #16
1a000f9c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
1a000fa0:	f853 7c10 	ldr.w	r7, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
1a000fa4:	2f00      	cmp	r7, #0
1a000fa6:	d1e6      	bne.n	1a000f76 <find_volume+0x1b6>
1a000fa8:	2003      	movs	r0, #3
1a000faa:	e7e8      	b.n	1a000f7e <find_volume+0x1be>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
1a000fac:	3301      	adds	r3, #1
1a000fae:	2b3f      	cmp	r3, #63	; 0x3f
1a000fb0:	d804      	bhi.n	1a000fbc <find_volume+0x1fc>
1a000fb2:	18e2      	adds	r2, r4, r3
1a000fb4:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
1a000fb8:	2a00      	cmp	r2, #0
1a000fba:	d0f7      	beq.n	1a000fac <find_volume+0x1ec>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
1a000fbc:	2b3f      	cmp	r3, #63	; 0x3f
1a000fbe:	f240 811b 	bls.w	1a0011f8 <find_volume+0x438>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
1a000fc2:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
1a000fc6:	f7ff fbd1 	bl	1a00076c <ld_word>
1a000fca:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
1a000fce:	f040 8115 	bne.w	1a0011fc <find_volume+0x43c>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
1a000fd2:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
1a000fd6:	2b09      	cmp	r3, #9
1a000fd8:	f040 8112 	bne.w	1a001200 <find_volume+0x440>
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
1a000fdc:	f104 0080 	add.w	r0, r4, #128	; 0x80
1a000fe0:	f7ff fbd4 	bl	1a00078c <ld_qword>
1a000fe4:	eb10 0807 	adds.w	r8, r0, r7
1a000fe8:	f141 0900 	adc.w	r9, r1, #0
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
1a000fec:	f1b9 0f01 	cmp.w	r9, #1
1a000ff0:	bf08      	it	eq
1a000ff2:	f1b8 0f00 	cmpeq.w	r8, #0
1a000ff6:	f080 8105 	bcs.w	1a001204 <find_volume+0x444>
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
1a000ffa:	f104 008c 	add.w	r0, r4, #140	; 0x8c
1a000ffe:	f7ff fbba 	bl	1a000776 <ld_dword>
1a001002:	6220      	str	r0, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
1a001004:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
1a001008:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
1a00100a:	2b01      	cmp	r3, #1
1a00100c:	f040 80fc 	bne.w	1a001208 <find_volume+0x448>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
1a001010:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
1a001014:	2501      	movs	r5, #1
1a001016:	409d      	lsls	r5, r3
1a001018:	b2ad      	uxth	r5, r5
1a00101a:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
1a00101c:	2d00      	cmp	r5, #0
1a00101e:	f000 80f5 	beq.w	1a00120c <find_volume+0x44c>
		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
1a001022:	f104 0094 	add.w	r0, r4, #148	; 0x94
1a001026:	f7ff fba6 	bl	1a000776 <ld_dword>
1a00102a:	4682      	mov	sl, r0
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
1a00102c:	4b2b      	ldr	r3, [pc, #172]	; (1a0010dc <find_volume+0x31c>)
1a00102e:	4298      	cmp	r0, r3
1a001030:	f200 80ee 	bhi.w	1a001210 <find_volume+0x450>
		fs->n_fatent = nclst + 2;
1a001034:	1c83      	adds	r3, r0, #2
1a001036:	61e3      	str	r3, [r4, #28]
		fs->volbase = bsect;
1a001038:	6267      	str	r7, [r4, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
1a00103a:	f104 0090 	add.w	r0, r4, #144	; 0x90
1a00103e:	f7ff fb9a 	bl	1a000776 <ld_dword>
1a001042:	19c6      	adds	r6, r0, r7
1a001044:	6326      	str	r6, [r4, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
1a001046:	f104 0088 	add.w	r0, r4, #136	; 0x88
1a00104a:	f7ff fb94 	bl	1a000776 <ld_dword>
1a00104e:	4438      	add	r0, r7
1a001050:	62a0      	str	r0, [r4, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
1a001052:	fb0a f205 	mul.w	r2, sl, r5
1a001056:	2100      	movs	r1, #0
1a001058:	1992      	adds	r2, r2, r6
1a00105a:	f141 0300 	adc.w	r3, r1, #0
1a00105e:	4599      	cmp	r9, r3
1a001060:	bf08      	it	eq
1a001062:	4590      	cmpeq	r8, r2
1a001064:	f0c0 80d6 	bcc.w	1a001214 <find_volume+0x454>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
1a001068:	f104 0098 	add.w	r0, r4, #152	; 0x98
1a00106c:	f7ff fb83 	bl	1a000776 <ld_dword>
1a001070:	4601      	mov	r1, r0
1a001072:	62e0      	str	r0, [r4, #44]	; 0x2c
		if (move_window(fs, clst2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
1a001074:	4620      	mov	r0, r4
1a001076:	f7ff fc57 	bl	1a000928 <clst2sect>
1a00107a:	4601      	mov	r1, r0
1a00107c:	4620      	mov	r0, r4
1a00107e:	f7ff fe3f 	bl	1a000d00 <move_window>
1a001082:	2800      	cmp	r0, #0
1a001084:	f040 80c8 	bne.w	1a001218 <find_volume+0x458>
		for (i = 0; i < SS(fs); i += SZDIRE) {
1a001088:	2500      	movs	r5, #0
1a00108a:	e002      	b.n	1a001092 <find_volume+0x2d2>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
1a00108c:	230b      	movs	r3, #11
1a00108e:	e78e      	b.n	1a000fae <find_volume+0x1ee>
		for (i = 0; i < SS(fs); i += SZDIRE) {
1a001090:	3520      	adds	r5, #32
1a001092:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
1a001096:	d20d      	bcs.n	1a0010b4 <find_volume+0x2f4>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
1a001098:	1963      	adds	r3, r4, r5
1a00109a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
1a00109e:	2b81      	cmp	r3, #129	; 0x81
1a0010a0:	d1f6      	bne.n	1a001090 <find_volume+0x2d0>
1a0010a2:	f104 0338 	add.w	r3, r4, #56	; 0x38
1a0010a6:	f105 0014 	add.w	r0, r5, #20
1a0010aa:	4418      	add	r0, r3
1a0010ac:	f7ff fb63 	bl	1a000776 <ld_dword>
1a0010b0:	2802      	cmp	r0, #2
1a0010b2:	d1ed      	bne.n	1a001090 <find_volume+0x2d0>
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
1a0010b4:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
1a0010b8:	f000 80b0 	beq.w	1a00121c <find_volume+0x45c>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
1a0010bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0010c0:	61a3      	str	r3, [r4, #24]
1a0010c2:	6163      	str	r3, [r4, #20]
		fmt = FS_EXFAT;			/* FAT sub-type */
1a0010c4:	f04f 0a04 	mov.w	sl, #4
1a0010c8:	e035      	b.n	1a001136 <find_volume+0x376>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
1a0010ca:	f04f 0a03 	mov.w	sl, #3
1a0010ce:	e719      	b.n	1a000f04 <find_volume+0x144>
1a0010d0:	10000328 	.word	0x10000328
1a0010d4:	1000000c 	.word	0x1000000c
1a0010d8:	0ffffff5 	.word	0x0ffffff5
1a0010dc:	7ffffffd 	.word	0x7ffffffd
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
1a0010e0:	f04f 0a01 	mov.w	sl, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
1a0010e4:	1c8e      	adds	r6, r1, #2
1a0010e6:	61e6      	str	r6, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
1a0010e8:	6267      	str	r7, [r4, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
1a0010ea:	eb0c 0207 	add.w	r2, ip, r7
1a0010ee:	62a2      	str	r2, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
1a0010f0:	443b      	add	r3, r7
1a0010f2:	6323      	str	r3, [r4, #48]	; 0x30
		if (fmt == FS_FAT32) {
1a0010f4:	f1ba 0f03 	cmp.w	sl, #3
1a0010f8:	d02b      	beq.n	1a001152 <find_volume+0x392>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
1a0010fa:	f1b9 0f00 	cmp.w	r9, #0
1a0010fe:	f000 80a3 	beq.w	1a001248 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
1a001102:	442a      	add	r2, r5
1a001104:	62e2      	str	r2, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
1a001106:	f1ba 0f02 	cmp.w	sl, #2
1a00110a:	d032      	beq.n	1a001172 <find_volume+0x3b2>
1a00110c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
1a001110:	f006 0601 	and.w	r6, r6, #1
1a001114:	eb06 0653 	add.w	r6, r6, r3, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
1a001118:	f206 13ff 	addw	r3, r6, #511	; 0x1ff
1a00111c:	ebb8 2f53 	cmp.w	r8, r3, lsr #9
1a001120:	f0c0 8094 	bcc.w	1a00124c <find_volume+0x48c>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
1a001124:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a001128:	61a3      	str	r3, [r4, #24]
1a00112a:	6163      	str	r3, [r4, #20]
		fs->fsi_flag = 0x80;
1a00112c:	2380      	movs	r3, #128	; 0x80
1a00112e:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
1a001130:	f1ba 0f03 	cmp.w	sl, #3
1a001134:	d01f      	beq.n	1a001176 <find_volume+0x3b6>
	fs->fs_type = fmt;		/* FAT sub-type */
1a001136:	f884 a000 	strb.w	sl, [r4]
	fs->id = ++Fsid;		/* Volume mount ID */
1a00113a:	4a45      	ldr	r2, [pc, #276]	; (1a001250 <find_volume+0x490>)
1a00113c:	8813      	ldrh	r3, [r2, #0]
1a00113e:	3301      	adds	r3, #1
1a001140:	b29b      	uxth	r3, r3
1a001142:	8013      	strh	r3, [r2, #0]
1a001144:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
1a001146:	4b43      	ldr	r3, [pc, #268]	; (1a001254 <find_volume+0x494>)
1a001148:	60e3      	str	r3, [r4, #12]
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
1a00114a:	4b43      	ldr	r3, [pc, #268]	; (1a001258 <find_volume+0x498>)
1a00114c:	6123      	str	r3, [r4, #16]
	return FR_OK;
1a00114e:	2000      	movs	r0, #0
1a001150:	e041      	b.n	1a0011d6 <find_volume+0x416>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
1a001152:	f104 0062 	add.w	r0, r4, #98	; 0x62
1a001156:	f7ff fb09 	bl	1a00076c <ld_word>
1a00115a:	2800      	cmp	r0, #0
1a00115c:	d170      	bne.n	1a001240 <find_volume+0x480>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
1a00115e:	f1b9 0f00 	cmp.w	r9, #0
1a001162:	d16f      	bne.n	1a001244 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
1a001164:	f104 0064 	add.w	r0, r4, #100	; 0x64
1a001168:	f7ff fb05 	bl	1a000776 <ld_dword>
1a00116c:	62e0      	str	r0, [r4, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
1a00116e:	00b6      	lsls	r6, r6, #2
1a001170:	e7d2      	b.n	1a001118 <find_volume+0x358>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
1a001172:	0076      	lsls	r6, r6, #1
1a001174:	e7d0      	b.n	1a001118 <find_volume+0x358>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
1a001176:	f104 0068 	add.w	r0, r4, #104	; 0x68
1a00117a:	f7ff faf7 	bl	1a00076c <ld_word>
1a00117e:	2801      	cmp	r0, #1
1a001180:	d1d9      	bne.n	1a001136 <find_volume+0x376>
			&& move_window(fs, bsect + 1) == FR_OK)
1a001182:	1c79      	adds	r1, r7, #1
1a001184:	4620      	mov	r0, r4
1a001186:	f7ff fdbb 	bl	1a000d00 <move_window>
1a00118a:	2800      	cmp	r0, #0
1a00118c:	d1d3      	bne.n	1a001136 <find_volume+0x376>
			fs->fsi_flag = 0;
1a00118e:	2300      	movs	r3, #0
1a001190:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
1a001192:	f204 2036 	addw	r0, r4, #566	; 0x236
1a001196:	f7ff fae9 	bl	1a00076c <ld_word>
1a00119a:	f64a 2355 	movw	r3, #43605	; 0xaa55
1a00119e:	4298      	cmp	r0, r3
1a0011a0:	d1c9      	bne.n	1a001136 <find_volume+0x376>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
1a0011a2:	f104 0038 	add.w	r0, r4, #56	; 0x38
1a0011a6:	f7ff fae6 	bl	1a000776 <ld_dword>
1a0011aa:	4b2c      	ldr	r3, [pc, #176]	; (1a00125c <find_volume+0x49c>)
1a0011ac:	4298      	cmp	r0, r3
1a0011ae:	d1c2      	bne.n	1a001136 <find_volume+0x376>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
1a0011b0:	f504 7007 	add.w	r0, r4, #540	; 0x21c
1a0011b4:	f7ff fadf 	bl	1a000776 <ld_dword>
1a0011b8:	4b29      	ldr	r3, [pc, #164]	; (1a001260 <find_volume+0x4a0>)
1a0011ba:	4298      	cmp	r0, r3
1a0011bc:	d1bb      	bne.n	1a001136 <find_volume+0x376>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
1a0011be:	f504 7008 	add.w	r0, r4, #544	; 0x220
1a0011c2:	f7ff fad8 	bl	1a000776 <ld_dword>
1a0011c6:	61a0      	str	r0, [r4, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
1a0011c8:	f504 7009 	add.w	r0, r4, #548	; 0x224
1a0011cc:	f7ff fad3 	bl	1a000776 <ld_dword>
1a0011d0:	6160      	str	r0, [r4, #20]
1a0011d2:	e7b0      	b.n	1a001136 <find_volume+0x376>
	if (vol < 0) return FR_INVALID_DRIVE;
1a0011d4:	200b      	movs	r0, #11
}
1a0011d6:	b004      	add	sp, #16
1a0011d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
1a0011dc:	200c      	movs	r0, #12
1a0011de:	e7fa      	b.n	1a0011d6 <find_volume+0x416>
			return FR_OK;				/* The filesystem object is valid */
1a0011e0:	2000      	movs	r0, #0
1a0011e2:	e7f8      	b.n	1a0011d6 <find_volume+0x416>
				return FR_WRITE_PROTECTED;
1a0011e4:	200a      	movs	r0, #10
1a0011e6:	e7f6      	b.n	1a0011d6 <find_volume+0x416>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
1a0011e8:	2003      	movs	r0, #3
1a0011ea:	e7f4      	b.n	1a0011d6 <find_volume+0x416>
		return FR_WRITE_PROTECTED;
1a0011ec:	200a      	movs	r0, #10
1a0011ee:	e7f2      	b.n	1a0011d6 <find_volume+0x416>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
1a0011f0:	2001      	movs	r0, #1
1a0011f2:	e7f0      	b.n	1a0011d6 <find_volume+0x416>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
1a0011f4:	200d      	movs	r0, #13
1a0011f6:	e7ee      	b.n	1a0011d6 <find_volume+0x416>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
1a0011f8:	200d      	movs	r0, #13
1a0011fa:	e7ec      	b.n	1a0011d6 <find_volume+0x416>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
1a0011fc:	200d      	movs	r0, #13
1a0011fe:	e7ea      	b.n	1a0011d6 <find_volume+0x416>
			return FR_NO_FILESYSTEM;
1a001200:	200d      	movs	r0, #13
1a001202:	e7e8      	b.n	1a0011d6 <find_volume+0x416>
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
1a001204:	200d      	movs	r0, #13
1a001206:	e7e6      	b.n	1a0011d6 <find_volume+0x416>
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
1a001208:	200d      	movs	r0, #13
1a00120a:	e7e4      	b.n	1a0011d6 <find_volume+0x416>
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
1a00120c:	200d      	movs	r0, #13
1a00120e:	e7e2      	b.n	1a0011d6 <find_volume+0x416>
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
1a001210:	200d      	movs	r0, #13
1a001212:	e7e0      	b.n	1a0011d6 <find_volume+0x416>
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
1a001214:	200d      	movs	r0, #13
1a001216:	e7de      	b.n	1a0011d6 <find_volume+0x416>
		if (move_window(fs, clst2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
1a001218:	2001      	movs	r0, #1
1a00121a:	e7dc      	b.n	1a0011d6 <find_volume+0x416>
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
1a00121c:	200d      	movs	r0, #13
1a00121e:	e7da      	b.n	1a0011d6 <find_volume+0x416>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
1a001220:	200d      	movs	r0, #13
1a001222:	e7d8      	b.n	1a0011d6 <find_volume+0x416>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
1a001224:	200d      	movs	r0, #13
1a001226:	e7d6      	b.n	1a0011d6 <find_volume+0x416>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
1a001228:	200d      	movs	r0, #13
1a00122a:	e7d4      	b.n	1a0011d6 <find_volume+0x416>
1a00122c:	200d      	movs	r0, #13
1a00122e:	e7d2      	b.n	1a0011d6 <find_volume+0x416>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
1a001230:	200d      	movs	r0, #13
1a001232:	e7d0      	b.n	1a0011d6 <find_volume+0x416>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
1a001234:	200d      	movs	r0, #13
1a001236:	e7ce      	b.n	1a0011d6 <find_volume+0x416>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
1a001238:	200d      	movs	r0, #13
1a00123a:	e7cc      	b.n	1a0011d6 <find_volume+0x416>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
1a00123c:	200d      	movs	r0, #13
1a00123e:	e7ca      	b.n	1a0011d6 <find_volume+0x416>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
1a001240:	200d      	movs	r0, #13
1a001242:	e7c8      	b.n	1a0011d6 <find_volume+0x416>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
1a001244:	200d      	movs	r0, #13
1a001246:	e7c6      	b.n	1a0011d6 <find_volume+0x416>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
1a001248:	200d      	movs	r0, #13
1a00124a:	e7c4      	b.n	1a0011d6 <find_volume+0x416>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
1a00124c:	200d      	movs	r0, #13
1a00124e:	e7c2      	b.n	1a0011d6 <find_volume+0x416>
1a001250:	10000330 	.word	0x10000330
1a001254:	10000334 	.word	0x10000334
1a001258:	100000c8 	.word	0x100000c8
1a00125c:	41615252 	.word	0x41615252
1a001260:	61417272 	.word	0x61417272

1a001264 <find_bitmap>:
{
1a001264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001268:	4605      	mov	r5, r0
1a00126a:	4691      	mov	r9, r2
	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
1a00126c:	1e8f      	subs	r7, r1, #2
	if (clst >= fs->n_fatent - 2) clst = 0;
1a00126e:	69c3      	ldr	r3, [r0, #28]
1a001270:	3b02      	subs	r3, #2
1a001272:	42bb      	cmp	r3, r7
1a001274:	d800      	bhi.n	1a001278 <find_bitmap+0x14>
1a001276:	2700      	movs	r7, #0
	scl = val = clst; ctr = 0;
1a001278:	46b8      	mov	r8, r7
1a00127a:	463c      	mov	r4, r7
1a00127c:	2600      	movs	r6, #0
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
1a00127e:	6b29      	ldr	r1, [r5, #48]	; 0x30
1a001280:	eb01 3114 	add.w	r1, r1, r4, lsr #12
1a001284:	4628      	mov	r0, r5
1a001286:	f7ff fd3b 	bl	1a000d00 <move_window>
1a00128a:	bb40      	cbnz	r0, 1a0012de <find_bitmap+0x7a>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
1a00128c:	f3c4 00c8 	ubfx	r0, r4, #3, #9
1a001290:	f004 0207 	and.w	r2, r4, #7
1a001294:	2301      	movs	r3, #1
1a001296:	4093      	lsls	r3, r2
1a001298:	b2db      	uxtb	r3, r3
1a00129a:	e009      	b.n	1a0012b0 <find_bitmap+0x4c>
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
1a00129c:	46a0      	mov	r8, r4
1a00129e:	2600      	movs	r6, #0
				if (val == clst) return 0;	/* All cluster scanned? */
1a0012a0:	42a7      	cmp	r7, r4
1a0012a2:	d01f      	beq.n	1a0012e4 <find_bitmap+0x80>
			} while (bm != 0);
1a0012a4:	b923      	cbnz	r3, 1a0012b0 <find_bitmap+0x4c>
		} while (++i < SS(fs));
1a0012a6:	3001      	adds	r0, #1
1a0012a8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
1a0012ac:	d2e7      	bcs.n	1a00127e <find_bitmap+0x1a>
			bm = 1;
1a0012ae:	2301      	movs	r3, #1
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
1a0012b0:	182a      	adds	r2, r5, r0
1a0012b2:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
1a0012b6:	401a      	ands	r2, r3
1a0012b8:	005b      	lsls	r3, r3, #1
1a0012ba:	b2db      	uxtb	r3, r3
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
1a0012bc:	3401      	adds	r4, #1
1a0012be:	69e9      	ldr	r1, [r5, #28]
1a0012c0:	3902      	subs	r1, #2
1a0012c2:	42a1      	cmp	r1, r4
1a0012c4:	d803      	bhi.n	1a0012ce <find_bitmap+0x6a>
					val = 0; bm = 0; i = SS(fs);
1a0012c6:	2400      	movs	r4, #0
1a0012c8:	f44f 7000 	mov.w	r0, #512	; 0x200
1a0012cc:	4623      	mov	r3, r4
				if (bv == 0) {	/* Is it a free cluster? */
1a0012ce:	2a00      	cmp	r2, #0
1a0012d0:	d1e4      	bne.n	1a00129c <find_bitmap+0x38>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
1a0012d2:	3601      	adds	r6, #1
1a0012d4:	454e      	cmp	r6, r9
1a0012d6:	d1e3      	bne.n	1a0012a0 <find_bitmap+0x3c>
1a0012d8:	f108 0002 	add.w	r0, r8, #2
1a0012dc:	e003      	b.n	1a0012e6 <find_bitmap+0x82>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
1a0012de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0012e2:	e000      	b.n	1a0012e6 <find_bitmap+0x82>
				if (val == clst) return 0;	/* All cluster scanned? */
1a0012e4:	2000      	movs	r0, #0
}
1a0012e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a0012ea <change_bitmap>:
{
1a0012ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0012ee:	4606      	mov	r6, r0
1a0012f0:	4617      	mov	r7, r2
1a0012f2:	4698      	mov	r8, r3
	clst -= 2;	/* The first bit corresponds to cluster #2 */
1a0012f4:	1e8c      	subs	r4, r1, #2
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
1a0012f6:	6b01      	ldr	r1, [r0, #48]	; 0x30
1a0012f8:	eb01 3114 	add.w	r1, r1, r4, lsr #12
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
1a0012fc:	f3c4 05c8 	ubfx	r5, r4, #3, #9
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
1a001300:	f004 0407 	and.w	r4, r4, #7
1a001304:	2301      	movs	r3, #1
1a001306:	fa03 f404 	lsl.w	r4, r3, r4
1a00130a:	b2e4      	uxtb	r4, r4
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
1a00130c:	f101 0901 	add.w	r9, r1, #1
1a001310:	4630      	mov	r0, r6
1a001312:	f7ff fcf5 	bl	1a000d00 <move_window>
1a001316:	4601      	mov	r1, r0
1a001318:	b110      	cbz	r0, 1a001320 <change_bitmap+0x36>
1a00131a:	2101      	movs	r1, #1
1a00131c:	e01e      	b.n	1a00135c <change_bitmap+0x72>
			bm = 1;
1a00131e:	2401      	movs	r4, #1
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
1a001320:	1973      	adds	r3, r6, r5
1a001322:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
1a001326:	4223      	tst	r3, r4
1a001328:	bf14      	ite	ne
1a00132a:	2201      	movne	r2, #1
1a00132c:	2200      	moveq	r2, #0
1a00132e:	4542      	cmp	r2, r8
1a001330:	d013      	beq.n	1a00135a <change_bitmap+0x70>
				fs->win[i] ^= bm;	/* Flip the bit */
1a001332:	1972      	adds	r2, r6, r5
1a001334:	4063      	eors	r3, r4
1a001336:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
				fs->wflag = 1;
1a00133a:	2301      	movs	r3, #1
1a00133c:	70f3      	strb	r3, [r6, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
1a00133e:	3f01      	subs	r7, #1
1a001340:	d00c      	beq.n	1a00135c <change_bitmap+0x72>
			} while (bm <<= 1);		/* Next bit */
1a001342:	409c      	lsls	r4, r3
1a001344:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
1a001348:	d1ea      	bne.n	1a001320 <change_bitmap+0x36>
		} while (++i < SS(fs));		/* Next byte */
1a00134a:	441d      	add	r5, r3
			bm = 1;
1a00134c:	461c      	mov	r4, r3
		} while (++i < SS(fs));		/* Next byte */
1a00134e:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
1a001352:	d3e4      	bcc.n	1a00131e <change_bitmap+0x34>
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
1a001354:	4649      	mov	r1, r9
		i = 0;
1a001356:	2500      	movs	r5, #0
1a001358:	e7d8      	b.n	1a00130c <change_bitmap+0x22>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
1a00135a:	2102      	movs	r1, #2
}
1a00135c:	4608      	mov	r0, r1
1a00135e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a001362 <put_fat>:
{
1a001362:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
1a001366:	2901      	cmp	r1, #1
1a001368:	f240 8082 	bls.w	1a001470 <put_fat+0x10e>
1a00136c:	4605      	mov	r5, r0
1a00136e:	460c      	mov	r4, r1
1a001370:	4617      	mov	r7, r2
1a001372:	69c3      	ldr	r3, [r0, #28]
1a001374:	428b      	cmp	r3, r1
1a001376:	d97f      	bls.n	1a001478 <put_fat+0x116>
		switch (fs->fs_type) {
1a001378:	7803      	ldrb	r3, [r0, #0]
1a00137a:	3b01      	subs	r3, #1
1a00137c:	2b03      	cmp	r3, #3
1a00137e:	d87d      	bhi.n	1a00147c <put_fat+0x11a>
1a001380:	e8df f003 	tbb	[pc, r3]
1a001384:	53534002 	.word	0x53534002
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
1a001388:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1a00138c:	6a81      	ldr	r1, [r0, #40]	; 0x28
1a00138e:	eb01 2158 	add.w	r1, r1, r8, lsr #9
1a001392:	f7ff fcb5 	bl	1a000d00 <move_window>
			if (res != FR_OK) break;
1a001396:	4606      	mov	r6, r0
1a001398:	2800      	cmp	r0, #0
1a00139a:	d16a      	bne.n	1a001472 <put_fat+0x110>
			p = fs->win + bc++ % SS(fs);
1a00139c:	f105 0a38 	add.w	sl, r5, #56	; 0x38
1a0013a0:	f108 0901 	add.w	r9, r8, #1
1a0013a4:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
1a0013a8:	f014 0401 	ands.w	r4, r4, #1
1a0013ac:	d01f      	beq.n	1a0013ee <put_fat+0x8c>
1a0013ae:	f91a 3008 	ldrsb.w	r3, [sl, r8]
1a0013b2:	f003 030f 	and.w	r3, r3, #15
1a0013b6:	013a      	lsls	r2, r7, #4
1a0013b8:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
1a0013bc:	4313      	orrs	r3, r2
1a0013be:	b2db      	uxtb	r3, r3
1a0013c0:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
1a0013c4:	2301      	movs	r3, #1
1a0013c6:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1a0013c8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a0013ca:	eb01 2159 	add.w	r1, r1, r9, lsr #9
1a0013ce:	4628      	mov	r0, r5
1a0013d0:	f7ff fc96 	bl	1a000d00 <move_window>
			if (res != FR_OK) break;
1a0013d4:	4606      	mov	r6, r0
1a0013d6:	2800      	cmp	r0, #0
1a0013d8:	d14b      	bne.n	1a001472 <put_fat+0x110>
			p = fs->win + bc % SS(fs);
1a0013da:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
1a0013de:	b144      	cbz	r4, 1a0013f2 <put_fat+0x90>
1a0013e0:	f3c7 1707 	ubfx	r7, r7, #4, #8
1a0013e4:	f80a 7009 	strb.w	r7, [sl, r9]
			fs->wflag = 1;
1a0013e8:	2301      	movs	r3, #1
1a0013ea:	70eb      	strb	r3, [r5, #3]
			break;
1a0013ec:	e041      	b.n	1a001472 <put_fat+0x110>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
1a0013ee:	b2fb      	uxtb	r3, r7
1a0013f0:	e7e6      	b.n	1a0013c0 <put_fat+0x5e>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
1a0013f2:	f91a 3009 	ldrsb.w	r3, [sl, r9]
1a0013f6:	f023 030f 	bic.w	r3, r3, #15
1a0013fa:	f3c7 2703 	ubfx	r7, r7, #8, #4
1a0013fe:	431f      	orrs	r7, r3
1a001400:	b2ff      	uxtb	r7, r7
1a001402:	e7ef      	b.n	1a0013e4 <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
1a001404:	6a81      	ldr	r1, [r0, #40]	; 0x28
1a001406:	eb01 2114 	add.w	r1, r1, r4, lsr #8
1a00140a:	f7ff fc79 	bl	1a000d00 <move_window>
			if (res != FR_OK) break;
1a00140e:	4606      	mov	r6, r0
1a001410:	bb78      	cbnz	r0, 1a001472 <put_fat+0x110>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
1a001412:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a001416:	0064      	lsls	r4, r4, #1
1a001418:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
1a00141c:	b2b9      	uxth	r1, r7
1a00141e:	4420      	add	r0, r4
1a001420:	f7ff f9da 	bl	1a0007d8 <st_word>
			fs->wflag = 1;
1a001424:	2301      	movs	r3, #1
1a001426:	70eb      	strb	r3, [r5, #3]
			break;
1a001428:	e023      	b.n	1a001472 <put_fat+0x110>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
1a00142a:	6a81      	ldr	r1, [r0, #40]	; 0x28
1a00142c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
1a001430:	f7ff fc66 	bl	1a000d00 <move_window>
			if (res != FR_OK) break;
1a001434:	4606      	mov	r6, r0
1a001436:	b9e0      	cbnz	r0, 1a001472 <put_fat+0x110>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1a001438:	782b      	ldrb	r3, [r5, #0]
1a00143a:	2b04      	cmp	r3, #4
1a00143c:	d00c      	beq.n	1a001458 <put_fat+0xf6>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
1a00143e:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
1a001442:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a001446:	00a3      	lsls	r3, r4, #2
1a001448:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
1a00144c:	4418      	add	r0, r3
1a00144e:	f7ff f992 	bl	1a000776 <ld_dword>
1a001452:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
1a001456:	4307      	orrs	r7, r0
			st_dword(fs->win + clst * 4 % SS(fs), val);
1a001458:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a00145c:	00a4      	lsls	r4, r4, #2
1a00145e:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
1a001462:	4639      	mov	r1, r7
1a001464:	4420      	add	r0, r4
1a001466:	f7ff f9bb 	bl	1a0007e0 <st_dword>
			fs->wflag = 1;
1a00146a:	2301      	movs	r3, #1
1a00146c:	70eb      	strb	r3, [r5, #3]
			break;
1a00146e:	e000      	b.n	1a001472 <put_fat+0x110>
	FRESULT res = FR_INT_ERR;
1a001470:	2602      	movs	r6, #2
}
1a001472:	4630      	mov	r0, r6
1a001474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	FRESULT res = FR_INT_ERR;
1a001478:	2602      	movs	r6, #2
1a00147a:	e7fa      	b.n	1a001472 <put_fat+0x110>
1a00147c:	2602      	movs	r6, #2
1a00147e:	e7f8      	b.n	1a001472 <put_fat+0x110>

1a001480 <fill_last_frag>:
{
1a001480:	b570      	push	{r4, r5, r6, lr}
1a001482:	4604      	mov	r4, r0
1a001484:	460d      	mov	r5, r1
1a001486:	4616      	mov	r6, r2
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
1a001488:	e007      	b.n	1a00149a <fill_last_frag+0x1a>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
1a00148a:	4632      	mov	r2, r6
1a00148c:	f7ff ff69 	bl	1a001362 <put_fat>
		if (res != FR_OK) return res;
1a001490:	4603      	mov	r3, r0
1a001492:	b958      	cbnz	r0, 1a0014ac <fill_last_frag+0x2c>
		obj->n_frag--;
1a001494:	69e3      	ldr	r3, [r4, #28]
1a001496:	3b01      	subs	r3, #1
1a001498:	61e3      	str	r3, [r4, #28]
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
1a00149a:	69e3      	ldr	r3, [r4, #28]
1a00149c:	b133      	cbz	r3, 1a0014ac <fill_last_frag+0x2c>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
1a00149e:	6820      	ldr	r0, [r4, #0]
1a0014a0:	1aea      	subs	r2, r5, r3
1a0014a2:	1c51      	adds	r1, r2, #1
1a0014a4:	2b01      	cmp	r3, #1
1a0014a6:	d9f0      	bls.n	1a00148a <fill_last_frag+0xa>
1a0014a8:	3202      	adds	r2, #2
1a0014aa:	e7ef      	b.n	1a00148c <fill_last_frag+0xc>
}
1a0014ac:	4618      	mov	r0, r3
1a0014ae:	bd70      	pop	{r4, r5, r6, pc}

1a0014b0 <fill_first_frag>:
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
1a0014b0:	79c3      	ldrb	r3, [r0, #7]
1a0014b2:	2b03      	cmp	r3, #3
1a0014b4:	d002      	beq.n	1a0014bc <fill_first_frag+0xc>
	return FR_OK;
1a0014b6:	2300      	movs	r3, #0
}
1a0014b8:	4618      	mov	r0, r3
1a0014ba:	4770      	bx	lr
{
1a0014bc:	b570      	push	{r4, r5, r6, lr}
1a0014be:	4606      	mov	r6, r0
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
1a0014c0:	6881      	ldr	r1, [r0, #8]
1a0014c2:	6984      	ldr	r4, [r0, #24]
1a0014c4:	b14c      	cbz	r4, 1a0014da <fill_first_frag+0x2a>
			res = put_fat(obj->fs, cl, cl + 1);
1a0014c6:	1c4d      	adds	r5, r1, #1
1a0014c8:	462a      	mov	r2, r5
1a0014ca:	6830      	ldr	r0, [r6, #0]
1a0014cc:	f7ff ff49 	bl	1a001362 <put_fat>
			if (res != FR_OK) return res;
1a0014d0:	4603      	mov	r3, r0
1a0014d2:	b920      	cbnz	r0, 1a0014de <fill_first_frag+0x2e>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
1a0014d4:	3c01      	subs	r4, #1
1a0014d6:	4629      	mov	r1, r5
1a0014d8:	e7f4      	b.n	1a0014c4 <fill_first_frag+0x14>
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
1a0014da:	2300      	movs	r3, #0
1a0014dc:	71f3      	strb	r3, [r6, #7]
}
1a0014de:	4618      	mov	r0, r3
1a0014e0:	bd70      	pop	{r4, r5, r6, pc}

1a0014e2 <get_fat>:
{
1a0014e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
1a0014e4:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
1a0014e6:	2901      	cmp	r1, #1
1a0014e8:	f240 8099 	bls.w	1a00161e <get_fat+0x13c>
1a0014ec:	69eb      	ldr	r3, [r5, #28]
1a0014ee:	428b      	cmp	r3, r1
1a0014f0:	f240 8097 	bls.w	1a001622 <get_fat+0x140>
1a0014f4:	460c      	mov	r4, r1
		switch (fs->fs_type) {
1a0014f6:	782b      	ldrb	r3, [r5, #0]
1a0014f8:	3b01      	subs	r3, #1
1a0014fa:	2b03      	cmp	r3, #3
1a0014fc:	f200 8093 	bhi.w	1a001626 <get_fat+0x144>
1a001500:	e8df f003 	tbb	[pc, r3]
1a001504:	4f3c2b02 	.word	0x4f3c2b02
			bc = (UINT)clst; bc += bc / 2;
1a001508:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
1a00150c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a00150e:	eb01 2156 	add.w	r1, r1, r6, lsr #9
1a001512:	4628      	mov	r0, r5
1a001514:	f7ff fbf4 	bl	1a000d00 <move_window>
1a001518:	b110      	cbz	r0, 1a001520 <get_fat+0x3e>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
1a00151a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00151e:	e07f      	b.n	1a001620 <get_fat+0x13e>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
1a001520:	1c77      	adds	r7, r6, #1
1a001522:	f3c6 0608 	ubfx	r6, r6, #0, #9
1a001526:	442e      	add	r6, r5
1a001528:	f896 6038 	ldrb.w	r6, [r6, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
1a00152c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a00152e:	eb01 2157 	add.w	r1, r1, r7, lsr #9
1a001532:	4628      	mov	r0, r5
1a001534:	f7ff fbe4 	bl	1a000d00 <move_window>
1a001538:	2800      	cmp	r0, #0
1a00153a:	d176      	bne.n	1a00162a <get_fat+0x148>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
1a00153c:	f3c7 0008 	ubfx	r0, r7, #0, #9
1a001540:	4428      	add	r0, r5
1a001542:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
1a001546:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
1a00154a:	f014 0f01 	tst.w	r4, #1
1a00154e:	d001      	beq.n	1a001554 <get_fat+0x72>
1a001550:	0900      	lsrs	r0, r0, #4
1a001552:	e065      	b.n	1a001620 <get_fat+0x13e>
1a001554:	f3c0 000b 	ubfx	r0, r0, #0, #12
1a001558:	e062      	b.n	1a001620 <get_fat+0x13e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
1a00155a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a00155c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
1a001560:	4628      	mov	r0, r5
1a001562:	f7ff fbcd 	bl	1a000d00 <move_window>
1a001566:	2800      	cmp	r0, #0
1a001568:	d162      	bne.n	1a001630 <get_fat+0x14e>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
1a00156a:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a00156e:	0064      	lsls	r4, r4, #1
1a001570:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
1a001574:	4420      	add	r0, r4
1a001576:	f7ff f8f9 	bl	1a00076c <ld_word>
			break;
1a00157a:	e051      	b.n	1a001620 <get_fat+0x13e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1a00157c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a00157e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
1a001582:	4628      	mov	r0, r5
1a001584:	f7ff fbbc 	bl	1a000d00 <move_window>
1a001588:	2800      	cmp	r0, #0
1a00158a:	d154      	bne.n	1a001636 <get_fat+0x154>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
1a00158c:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a001590:	00a4      	lsls	r4, r4, #2
1a001592:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
1a001596:	4420      	add	r0, r4
1a001598:	f7ff f8ed 	bl	1a000776 <ld_dword>
1a00159c:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
1a0015a0:	e03e      	b.n	1a001620 <get_fat+0x13e>
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
1a0015a2:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
1a0015a6:	ea56 0307 	orrs.w	r3, r6, r7
1a0015aa:	d001      	beq.n	1a0015b0 <get_fat+0xce>
1a0015ac:	6883      	ldr	r3, [r0, #8]
1a0015ae:	b913      	cbnz	r3, 1a0015b6 <get_fat+0xd4>
1a0015b0:	79c3      	ldrb	r3, [r0, #7]
1a0015b2:	2b00      	cmp	r3, #0
1a0015b4:	d142      	bne.n	1a00163c <get_fat+0x15a>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
1a0015b6:	6883      	ldr	r3, [r0, #8]
1a0015b8:	1ae2      	subs	r2, r4, r3
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
1a0015ba:	f116 33ff 	adds.w	r3, r6, #4294967295	; 0xffffffff
1a0015be:	f147 31ff 	adc.w	r1, r7, #4294967295	; 0xffffffff
1a0015c2:	0a5b      	lsrs	r3, r3, #9
1a0015c4:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
1a0015c8:	8969      	ldrh	r1, [r5, #10]
1a0015ca:	fbb3 f3f1 	udiv	r3, r3, r1
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
1a0015ce:	79c1      	ldrb	r1, [r0, #7]
1a0015d0:	2902      	cmp	r1, #2
1a0015d2:	d008      	beq.n	1a0015e6 <get_fat+0x104>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
1a0015d4:	2903      	cmp	r1, #3
1a0015d6:	d00b      	beq.n	1a0015f0 <get_fat+0x10e>
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
1a0015d8:	2902      	cmp	r1, #2
1a0015da:	d034      	beq.n	1a001646 <get_fat+0x164>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
1a0015dc:	69c3      	ldr	r3, [r0, #28]
1a0015de:	b163      	cbz	r3, 1a0015fa <get_fat+0x118>
						val = 0x7FFFFFFF;	/* Generate EOC */
1a0015e0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
1a0015e4:	e01c      	b.n	1a001620 <get_fat+0x13e>
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
1a0015e6:	429a      	cmp	r2, r3
1a0015e8:	d8f4      	bhi.n	1a0015d4 <get_fat+0xf2>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
1a0015ea:	d029      	beq.n	1a001640 <get_fat+0x15e>
1a0015ec:	1c60      	adds	r0, r4, #1
1a0015ee:	e017      	b.n	1a001620 <get_fat+0x13e>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
1a0015f0:	6983      	ldr	r3, [r0, #24]
1a0015f2:	4293      	cmp	r3, r2
1a0015f4:	d9f0      	bls.n	1a0015d8 <get_fat+0xf6>
					val = clst + 1; 	/* Generate the value */
1a0015f6:	1c60      	adds	r0, r4, #1
					break;
1a0015f8:	e012      	b.n	1a001620 <get_fat+0x13e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1a0015fa:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a0015fc:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
1a001600:	4628      	mov	r0, r5
1a001602:	f7ff fb7d 	bl	1a000d00 <move_window>
1a001606:	bb00      	cbnz	r0, 1a00164a <get_fat+0x168>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
1a001608:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a00160c:	00a3      	lsls	r3, r4, #2
1a00160e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
1a001612:	4418      	add	r0, r3
1a001614:	f7ff f8af 	bl	1a000776 <ld_dword>
1a001618:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
1a00161c:	e000      	b.n	1a001620 <get_fat+0x13e>
		val = 1;	/* Internal error */
1a00161e:	2001      	movs	r0, #1
}
1a001620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
1a001622:	2001      	movs	r0, #1
1a001624:	e7fc      	b.n	1a001620 <get_fat+0x13e>
			val = 1;	/* Internal error */
1a001626:	2001      	movs	r0, #1
1a001628:	e7fa      	b.n	1a001620 <get_fat+0x13e>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
1a00162a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00162e:	e7f7      	b.n	1a001620 <get_fat+0x13e>
1a001630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001634:	e7f4      	b.n	1a001620 <get_fat+0x13e>
1a001636:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00163a:	e7f1      	b.n	1a001620 <get_fat+0x13e>
			val = 1;	/* Internal error */
1a00163c:	2001      	movs	r0, #1
1a00163e:	e7ef      	b.n	1a001620 <get_fat+0x13e>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
1a001640:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
1a001644:	e7ec      	b.n	1a001620 <get_fat+0x13e>
			val = 1;	/* Internal error */
1a001646:	2001      	movs	r0, #1
1a001648:	e7ea      	b.n	1a001620 <get_fat+0x13e>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
1a00164a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return val;
1a00164e:	e7e7      	b.n	1a001620 <get_fat+0x13e>

1a001650 <dir_sdi>:
{
1a001650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001654:	4606      	mov	r6, r0
1a001656:	460d      	mov	r5, r1
	FATFS *fs = dp->obj.fs;
1a001658:	6807      	ldr	r7, [r0, #0]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
1a00165a:	783b      	ldrb	r3, [r7, #0]
1a00165c:	2b04      	cmp	r3, #4
1a00165e:	d024      	beq.n	1a0016aa <dir_sdi+0x5a>
1a001660:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
1a001664:	42ab      	cmp	r3, r5
1a001666:	d941      	bls.n	1a0016ec <dir_sdi+0x9c>
1a001668:	f015 0f1f 	tst.w	r5, #31
1a00166c:	d140      	bne.n	1a0016f0 <dir_sdi+0xa0>
	dp->dptr = ofs;				/* Set current offset */
1a00166e:	6335      	str	r5, [r6, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
1a001670:	68b4      	ldr	r4, [r6, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
1a001672:	b92c      	cbnz	r4, 1a001680 <dir_sdi+0x30>
1a001674:	783b      	ldrb	r3, [r7, #0]
1a001676:	2b02      	cmp	r3, #2
1a001678:	d902      	bls.n	1a001680 <dir_sdi+0x30>
		clst = fs->dirbase;
1a00167a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
1a00167c:	2300      	movs	r3, #0
1a00167e:	71f3      	strb	r3, [r6, #7]
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
1a001680:	b9b4      	cbnz	r4, 1a0016b0 <dir_sdi+0x60>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
1a001682:	893b      	ldrh	r3, [r7, #8]
1a001684:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
1a001688:	d934      	bls.n	1a0016f4 <dir_sdi+0xa4>
		dp->sect = fs->dirbase;
1a00168a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a00168c:	63b3      	str	r3, [r6, #56]	; 0x38
	dp->clust = clst;					/* Current cluster# */
1a00168e:	6374      	str	r4, [r6, #52]	; 0x34
	if (dp->sect == 0) return FR_INT_ERR;
1a001690:	6bb3      	ldr	r3, [r6, #56]	; 0x38
1a001692:	b3ab      	cbz	r3, 1a001700 <dir_sdi+0xb0>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
1a001694:	eb03 2355 	add.w	r3, r3, r5, lsr #9
1a001698:	63b3      	str	r3, [r6, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
1a00169a:	3738      	adds	r7, #56	; 0x38
1a00169c:	f3c5 0508 	ubfx	r5, r5, #0, #9
1a0016a0:	443d      	add	r5, r7
1a0016a2:	63f5      	str	r5, [r6, #60]	; 0x3c
	return FR_OK;
1a0016a4:	2000      	movs	r0, #0
}
1a0016a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
1a0016aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
1a0016ae:	e7d9      	b.n	1a001664 <dir_sdi+0x14>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
1a0016b0:	f8b7 800a 	ldrh.w	r8, [r7, #10]
1a0016b4:	ea4f 2848 	mov.w	r8, r8, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
1a0016b8:	e001      	b.n	1a0016be <dir_sdi+0x6e>
			ofs -= csz;
1a0016ba:	eba5 0508 	sub.w	r5, r5, r8
		while (ofs >= csz) {				/* Follow cluster chain */
1a0016be:	4545      	cmp	r5, r8
1a0016c0:	d30e      	bcc.n	1a0016e0 <dir_sdi+0x90>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
1a0016c2:	4621      	mov	r1, r4
1a0016c4:	4630      	mov	r0, r6
1a0016c6:	f7ff ff0c 	bl	1a0014e2 <get_fat>
1a0016ca:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a0016cc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0016d0:	d012      	beq.n	1a0016f8 <dir_sdi+0xa8>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
1a0016d2:	2801      	cmp	r0, #1
1a0016d4:	d912      	bls.n	1a0016fc <dir_sdi+0xac>
1a0016d6:	69fb      	ldr	r3, [r7, #28]
1a0016d8:	4283      	cmp	r3, r0
1a0016da:	d8ee      	bhi.n	1a0016ba <dir_sdi+0x6a>
1a0016dc:	2002      	movs	r0, #2
1a0016de:	e7e2      	b.n	1a0016a6 <dir_sdi+0x56>
		dp->sect = clst2sect(fs, clst);
1a0016e0:	4621      	mov	r1, r4
1a0016e2:	4638      	mov	r0, r7
1a0016e4:	f7ff f920 	bl	1a000928 <clst2sect>
1a0016e8:	63b0      	str	r0, [r6, #56]	; 0x38
1a0016ea:	e7d0      	b.n	1a00168e <dir_sdi+0x3e>
		return FR_INT_ERR;
1a0016ec:	2002      	movs	r0, #2
1a0016ee:	e7da      	b.n	1a0016a6 <dir_sdi+0x56>
1a0016f0:	2002      	movs	r0, #2
1a0016f2:	e7d8      	b.n	1a0016a6 <dir_sdi+0x56>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
1a0016f4:	2002      	movs	r0, #2
1a0016f6:	e7d6      	b.n	1a0016a6 <dir_sdi+0x56>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a0016f8:	2001      	movs	r0, #1
1a0016fa:	e7d4      	b.n	1a0016a6 <dir_sdi+0x56>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
1a0016fc:	2002      	movs	r0, #2
1a0016fe:	e7d2      	b.n	1a0016a6 <dir_sdi+0x56>
	if (dp->sect == 0) return FR_INT_ERR;
1a001700:	2002      	movs	r0, #2
1a001702:	e7d0      	b.n	1a0016a6 <dir_sdi+0x56>

1a001704 <create_chain>:
{
1a001704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001708:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
1a00170a:	6807      	ldr	r7, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
1a00170c:	4689      	mov	r9, r1
1a00170e:	b931      	cbnz	r1, 1a00171e <create_chain+0x1a>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
1a001710:	697e      	ldr	r6, [r7, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
1a001712:	b1a6      	cbz	r6, 1a00173e <create_chain+0x3a>
1a001714:	69fb      	ldr	r3, [r7, #28]
1a001716:	42b3      	cmp	r3, r6
1a001718:	d812      	bhi.n	1a001740 <create_chain+0x3c>
1a00171a:	2601      	movs	r6, #1
1a00171c:	e010      	b.n	1a001740 <create_chain+0x3c>
		cs = get_fat(obj, clst);			/* Check the cluster status */
1a00171e:	f7ff fee0 	bl	1a0014e2 <get_fat>
1a001722:	4605      	mov	r5, r0
		if (cs < 2) return 1;				/* Test for insanity */
1a001724:	2801      	cmp	r0, #1
1a001726:	f240 80c6 	bls.w	1a0018b6 <create_chain+0x1b2>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
1a00172a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00172e:	f000 80c3 	beq.w	1a0018b8 <create_chain+0x1b4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
1a001732:	69fb      	ldr	r3, [r7, #28]
1a001734:	4283      	cmp	r3, r0
1a001736:	f200 80bf 	bhi.w	1a0018b8 <create_chain+0x1b4>
		scl = clst;							/* Cluster to start to find */
1a00173a:	464e      	mov	r6, r9
1a00173c:	e000      	b.n	1a001740 <create_chain+0x3c>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
1a00173e:	2601      	movs	r6, #1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
1a001740:	69bd      	ldr	r5, [r7, #24]
1a001742:	2d00      	cmp	r5, #0
1a001744:	f000 80b8 	beq.w	1a0018b8 <create_chain+0x1b4>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1a001748:	783b      	ldrb	r3, [r7, #0]
1a00174a:	2b04      	cmp	r3, #4
1a00174c:	d003      	beq.n	1a001756 <create_chain+0x52>
		if (scl == clst) {						/* Stretching an existing chain? */
1a00174e:	454e      	cmp	r6, r9
1a001750:	d055      	beq.n	1a0017fe <create_chain+0xfa>
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
1a001752:	4634      	mov	r4, r6
1a001754:	e095      	b.n	1a001882 <create_chain+0x17e>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1a001756:	2201      	movs	r2, #1
1a001758:	4631      	mov	r1, r6
1a00175a:	4638      	mov	r0, r7
1a00175c:	f7ff fd82 	bl	1a001264 <find_bitmap>
1a001760:	4605      	mov	r5, r0
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
1a001762:	1e43      	subs	r3, r0, #1
1a001764:	f113 0f03 	cmn.w	r3, #3
1a001768:	f200 80a6 	bhi.w	1a0018b8 <create_chain+0x1b4>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
1a00176c:	2301      	movs	r3, #1
1a00176e:	461a      	mov	r2, r3
1a001770:	4601      	mov	r1, r0
1a001772:	4638      	mov	r0, r7
1a001774:	f7ff fdb9 	bl	1a0012ea <change_bitmap>
1a001778:	4603      	mov	r3, r0
		if (res == FR_INT_ERR) return 1;
1a00177a:	2802      	cmp	r0, #2
1a00177c:	f000 809f 	beq.w	1a0018be <create_chain+0x1ba>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
1a001780:	2801      	cmp	r0, #1
1a001782:	f000 809e 	beq.w	1a0018c2 <create_chain+0x1be>
		if (clst == 0) {							/* Is it a new chain? */
1a001786:	f1b9 0f00 	cmp.w	r9, #0
1a00178a:	d11e      	bne.n	1a0017ca <create_chain+0xc6>
			obj->stat = 2;							/* Set status 'contiguous' */
1a00178c:	2202      	movs	r2, #2
1a00178e:	f888 2007 	strb.w	r2, [r8, #7]
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
1a001792:	f898 2007 	ldrb.w	r2, [r8, #7]
1a001796:	2a02      	cmp	r2, #2
1a001798:	f000 8082 	beq.w	1a0018a0 <create_chain+0x19c>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
1a00179c:	f109 0201 	add.w	r2, r9, #1
1a0017a0:	42aa      	cmp	r2, r5
1a0017a2:	d022      	beq.n	1a0017ea <create_chain+0xe6>
				if (obj->n_frag == 0) obj->n_frag = 1;
1a0017a4:	f8d8 301c 	ldr.w	r3, [r8, #28]
1a0017a8:	b913      	cbnz	r3, 1a0017b0 <create_chain+0xac>
1a0017aa:	2301      	movs	r3, #1
1a0017ac:	f8c8 301c 	str.w	r3, [r8, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
1a0017b0:	462a      	mov	r2, r5
1a0017b2:	4649      	mov	r1, r9
1a0017b4:	4640      	mov	r0, r8
1a0017b6:	f7ff fe63 	bl	1a001480 <fill_last_frag>
				if (res == FR_OK) obj->n_frag = 1;
1a0017ba:	4603      	mov	r3, r0
1a0017bc:	2800      	cmp	r0, #0
1a0017be:	d171      	bne.n	1a0018a4 <create_chain+0x1a0>
1a0017c0:	2201      	movs	r2, #1
1a0017c2:	f8c8 201c 	str.w	r2, [r8, #28]
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1a0017c6:	462c      	mov	r4, r5
1a0017c8:	e03e      	b.n	1a001848 <create_chain+0x144>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
1a0017ca:	f898 2007 	ldrb.w	r2, [r8, #7]
1a0017ce:	2a02      	cmp	r2, #2
1a0017d0:	d1df      	bne.n	1a001792 <create_chain+0x8e>
1a0017d2:	1c72      	adds	r2, r6, #1
1a0017d4:	42aa      	cmp	r2, r5
1a0017d6:	d0dc      	beq.n	1a001792 <create_chain+0x8e>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
1a0017d8:	f8d8 2008 	ldr.w	r2, [r8, #8]
1a0017dc:	1ab2      	subs	r2, r6, r2
1a0017de:	f8c8 2018 	str.w	r2, [r8, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
1a0017e2:	2203      	movs	r2, #3
1a0017e4:	f888 2007 	strb.w	r2, [r8, #7]
1a0017e8:	e7d3      	b.n	1a001792 <create_chain+0x8e>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
1a0017ea:	f8d8 201c 	ldr.w	r2, [r8, #28]
1a0017ee:	b122      	cbz	r2, 1a0017fa <create_chain+0xf6>
1a0017f0:	3201      	adds	r2, #1
1a0017f2:	f8c8 201c 	str.w	r2, [r8, #28]
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1a0017f6:	462c      	mov	r4, r5
1a0017f8:	e026      	b.n	1a001848 <create_chain+0x144>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
1a0017fa:	2202      	movs	r2, #2
1a0017fc:	e7f9      	b.n	1a0017f2 <create_chain+0xee>
			ncl = scl + 1;						/* Test if next cluster is free */
1a0017fe:	1c74      	adds	r4, r6, #1
			if (ncl >= fs->n_fatent) ncl = 2;
1a001800:	69fb      	ldr	r3, [r7, #28]
1a001802:	42a3      	cmp	r3, r4
1a001804:	d800      	bhi.n	1a001808 <create_chain+0x104>
1a001806:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
1a001808:	4621      	mov	r1, r4
1a00180a:	4640      	mov	r0, r8
1a00180c:	f7ff fe69 	bl	1a0014e2 <get_fat>
1a001810:	4605      	mov	r5, r0
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
1a001812:	2801      	cmp	r0, #1
1a001814:	d050      	beq.n	1a0018b8 <create_chain+0x1b4>
1a001816:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00181a:	d04d      	beq.n	1a0018b8 <create_chain+0x1b4>
			if (cs != 0) {						/* Not free? */
1a00181c:	b138      	cbz	r0, 1a00182e <create_chain+0x12a>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
1a00181e:	697b      	ldr	r3, [r7, #20]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
1a001820:	2b01      	cmp	r3, #1
1a001822:	d996      	bls.n	1a001752 <create_chain+0x4e>
1a001824:	69fa      	ldr	r2, [r7, #28]
1a001826:	429a      	cmp	r2, r3
1a001828:	d993      	bls.n	1a001752 <create_chain+0x4e>
1a00182a:	461e      	mov	r6, r3
1a00182c:	e791      	b.n	1a001752 <create_chain+0x4e>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
1a00182e:	2c00      	cmp	r4, #0
1a001830:	d08f      	beq.n	1a001752 <create_chain+0x4e>
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
1a001832:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001836:	4621      	mov	r1, r4
1a001838:	4638      	mov	r0, r7
1a00183a:	f7ff fd92 	bl	1a001362 <put_fat>
		if (res == FR_OK && clst != 0) {
1a00183e:	4603      	mov	r3, r0
1a001840:	b910      	cbnz	r0, 1a001848 <create_chain+0x144>
1a001842:	f1b9 0f00 	cmp.w	r9, #0
1a001846:	d124      	bne.n	1a001892 <create_chain+0x18e>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
1a001848:	bb73      	cbnz	r3, 1a0018a8 <create_chain+0x1a4>
		fs->last_clst = ncl;
1a00184a:	617c      	str	r4, [r7, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
1a00184c:	69ba      	ldr	r2, [r7, #24]
1a00184e:	69fb      	ldr	r3, [r7, #28]
1a001850:	3b02      	subs	r3, #2
1a001852:	429a      	cmp	r2, r3
1a001854:	d801      	bhi.n	1a00185a <create_chain+0x156>
1a001856:	3a01      	subs	r2, #1
1a001858:	61ba      	str	r2, [r7, #24]
		fs->fsi_flag |= 1;
1a00185a:	793b      	ldrb	r3, [r7, #4]
1a00185c:	f043 0301 	orr.w	r3, r3, #1
1a001860:	713b      	strb	r3, [r7, #4]
1a001862:	4625      	mov	r5, r4
1a001864:	e028      	b.n	1a0018b8 <create_chain+0x1b4>
				cs = get_fat(obj, ncl);			/* Get the cluster status */
1a001866:	4621      	mov	r1, r4
1a001868:	4640      	mov	r0, r8
1a00186a:	f7ff fe3a 	bl	1a0014e2 <get_fat>
				if (cs == 0) break;				/* Found a free cluster? */
1a00186e:	4605      	mov	r5, r0
1a001870:	2800      	cmp	r0, #0
1a001872:	d0de      	beq.n	1a001832 <create_chain+0x12e>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
1a001874:	2801      	cmp	r0, #1
1a001876:	d01f      	beq.n	1a0018b8 <create_chain+0x1b4>
1a001878:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00187c:	d01c      	beq.n	1a0018b8 <create_chain+0x1b4>
				if (ncl == scl) return 0;		/* No free cluster found? */
1a00187e:	42b4      	cmp	r4, r6
1a001880:	d024      	beq.n	1a0018cc <create_chain+0x1c8>
				ncl++;							/* Next cluster */
1a001882:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
1a001884:	69fb      	ldr	r3, [r7, #28]
1a001886:	42a3      	cmp	r3, r4
1a001888:	d8ed      	bhi.n	1a001866 <create_chain+0x162>
					if (ncl > scl) return 0;	/* No free cluster found? */
1a00188a:	2e01      	cmp	r6, #1
1a00188c:	d91c      	bls.n	1a0018c8 <create_chain+0x1c4>
					ncl = 2;
1a00188e:	2402      	movs	r4, #2
1a001890:	e7e9      	b.n	1a001866 <create_chain+0x162>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
1a001892:	4622      	mov	r2, r4
1a001894:	4649      	mov	r1, r9
1a001896:	4638      	mov	r0, r7
1a001898:	f7ff fd63 	bl	1a001362 <put_fat>
1a00189c:	4603      	mov	r3, r0
1a00189e:	e7d3      	b.n	1a001848 <create_chain+0x144>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1a0018a0:	462c      	mov	r4, r5
1a0018a2:	e7d1      	b.n	1a001848 <create_chain+0x144>
1a0018a4:	462c      	mov	r4, r5
1a0018a6:	e7cf      	b.n	1a001848 <create_chain+0x144>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
1a0018a8:	2b01      	cmp	r3, #1
1a0018aa:	d001      	beq.n	1a0018b0 <create_chain+0x1ac>
1a0018ac:	2501      	movs	r5, #1
1a0018ae:	e003      	b.n	1a0018b8 <create_chain+0x1b4>
1a0018b0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a0018b4:	e000      	b.n	1a0018b8 <create_chain+0x1b4>
		if (cs < 2) return 1;				/* Test for insanity */
1a0018b6:	2501      	movs	r5, #1
}
1a0018b8:	4628      	mov	r0, r5
1a0018ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (res == FR_INT_ERR) return 1;
1a0018be:	2501      	movs	r5, #1
1a0018c0:	e7fa      	b.n	1a0018b8 <create_chain+0x1b4>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
1a0018c2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a0018c6:	e7f7      	b.n	1a0018b8 <create_chain+0x1b4>
					if (ncl > scl) return 0;	/* No free cluster found? */
1a0018c8:	2500      	movs	r5, #0
1a0018ca:	e7f5      	b.n	1a0018b8 <create_chain+0x1b4>
				if (ncl == scl) return 0;		/* No free cluster found? */
1a0018cc:	2500      	movs	r5, #0
1a0018ce:	e7f3      	b.n	1a0018b8 <create_chain+0x1b4>

1a0018d0 <remove_chain>:
{
1a0018d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
1a0018d4:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
1a0018d6:	2901      	cmp	r1, #1
1a0018d8:	f240 8087 	bls.w	1a0019ea <remove_chain+0x11a>
1a0018dc:	4607      	mov	r7, r0
1a0018de:	460e      	mov	r6, r1
1a0018e0:	4691      	mov	r9, r2
1a0018e2:	69e3      	ldr	r3, [r4, #28]
1a0018e4:	428b      	cmp	r3, r1
1a0018e6:	f240 8082 	bls.w	1a0019ee <remove_chain+0x11e>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
1a0018ea:	b172      	cbz	r2, 1a00190a <remove_chain+0x3a>
1a0018ec:	7823      	ldrb	r3, [r4, #0]
1a0018ee:	2b04      	cmp	r3, #4
1a0018f0:	d102      	bne.n	1a0018f8 <remove_chain+0x28>
1a0018f2:	79c3      	ldrb	r3, [r0, #7]
1a0018f4:	2b02      	cmp	r3, #2
1a0018f6:	d008      	beq.n	1a00190a <remove_chain+0x3a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
1a0018f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0018fc:	4649      	mov	r1, r9
1a0018fe:	4620      	mov	r0, r4
1a001900:	f7ff fd2f 	bl	1a001362 <put_fat>
		if (res != FR_OK) return res;
1a001904:	4603      	mov	r3, r0
1a001906:	2800      	cmp	r0, #0
1a001908:	d172      	bne.n	1a0019f0 <remove_chain+0x120>
{
1a00190a:	46b0      	mov	r8, r6
1a00190c:	e012      	b.n	1a001934 <remove_chain+0x64>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
1a00190e:	2200      	movs	r2, #0
1a001910:	4631      	mov	r1, r6
1a001912:	4620      	mov	r0, r4
1a001914:	f7ff fd25 	bl	1a001362 <put_fat>
			if (res != FR_OK) return res;
1a001918:	4603      	mov	r3, r0
1a00191a:	b1c8      	cbz	r0, 1a001950 <remove_chain+0x80>
1a00191c:	e068      	b.n	1a0019f0 <remove_chain+0x120>
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
1a00191e:	1c73      	adds	r3, r6, #1
1a001920:	42ab      	cmp	r3, r5
1a001922:	d003      	beq.n	1a00192c <remove_chain+0x5c>
			if (fs->fs_type == FS_EXFAT) {
1a001924:	7823      	ldrb	r3, [r4, #0]
1a001926:	2b04      	cmp	r3, #4
1a001928:	d01e      	beq.n	1a001968 <remove_chain+0x98>
			scl = ecl = nxt;
1a00192a:	46a8      	mov	r8, r5
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
1a00192c:	69e3      	ldr	r3, [r4, #28]
		clst = nxt;					/* Next cluster */
1a00192e:	462e      	mov	r6, r5
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
1a001930:	42ab      	cmp	r3, r5
1a001932:	d925      	bls.n	1a001980 <remove_chain+0xb0>
		nxt = get_fat(obj, clst);			/* Get cluster status */
1a001934:	4631      	mov	r1, r6
1a001936:	4638      	mov	r0, r7
1a001938:	f7ff fdd3 	bl	1a0014e2 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
1a00193c:	4605      	mov	r5, r0
1a00193e:	b1f8      	cbz	r0, 1a001980 <remove_chain+0xb0>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
1a001940:	2801      	cmp	r0, #1
1a001942:	d058      	beq.n	1a0019f6 <remove_chain+0x126>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
1a001944:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001948:	d057      	beq.n	1a0019fa <remove_chain+0x12a>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1a00194a:	7823      	ldrb	r3, [r4, #0]
1a00194c:	2b04      	cmp	r3, #4
1a00194e:	d1de      	bne.n	1a00190e <remove_chain+0x3e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
1a001950:	69a2      	ldr	r2, [r4, #24]
1a001952:	69e3      	ldr	r3, [r4, #28]
1a001954:	3b02      	subs	r3, #2
1a001956:	429a      	cmp	r2, r3
1a001958:	d2e1      	bcs.n	1a00191e <remove_chain+0x4e>
			fs->free_clst++;
1a00195a:	3201      	adds	r2, #1
1a00195c:	61a2      	str	r2, [r4, #24]
			fs->fsi_flag |= 1;
1a00195e:	7923      	ldrb	r3, [r4, #4]
1a001960:	f043 0301 	orr.w	r3, r3, #1
1a001964:	7123      	strb	r3, [r4, #4]
1a001966:	e7da      	b.n	1a00191e <remove_chain+0x4e>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
1a001968:	eba6 0208 	sub.w	r2, r6, r8
1a00196c:	2300      	movs	r3, #0
1a00196e:	3201      	adds	r2, #1
1a001970:	4641      	mov	r1, r8
1a001972:	4620      	mov	r0, r4
1a001974:	f7ff fcb9 	bl	1a0012ea <change_bitmap>
				if (res != FR_OK) return res;
1a001978:	4603      	mov	r3, r0
1a00197a:	bbc8      	cbnz	r0, 1a0019f0 <remove_chain+0x120>
			scl = ecl = nxt;
1a00197c:	46a8      	mov	r8, r5
1a00197e:	e7d5      	b.n	1a00192c <remove_chain+0x5c>
	if (fs->fs_type == FS_EXFAT) {
1a001980:	7823      	ldrb	r3, [r4, #0]
1a001982:	2b04      	cmp	r3, #4
1a001984:	d001      	beq.n	1a00198a <remove_chain+0xba>
	return FR_OK;
1a001986:	2300      	movs	r3, #0
1a001988:	e032      	b.n	1a0019f0 <remove_chain+0x120>
		if (pclst == 0) {	/* Has the entire chain been removed? */
1a00198a:	f1b9 0f00 	cmp.w	r9, #0
1a00198e:	d102      	bne.n	1a001996 <remove_chain+0xc6>
			obj->stat = 0;		/* Change the chain status 'initial' */
1a001990:	2300      	movs	r3, #0
1a001992:	71fb      	strb	r3, [r7, #7]
1a001994:	e02c      	b.n	1a0019f0 <remove_chain+0x120>
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
1a001996:	79fb      	ldrb	r3, [r7, #7]
1a001998:	b9c3      	cbnz	r3, 1a0019cc <remove_chain+0xfc>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
1a00199a:	68bc      	ldr	r4, [r7, #8]
				while (clst != pclst) {
1a00199c:	454c      	cmp	r4, r9
1a00199e:	d00d      	beq.n	1a0019bc <remove_chain+0xec>
					nxt = get_fat(obj, clst);
1a0019a0:	4621      	mov	r1, r4
1a0019a2:	4638      	mov	r0, r7
1a0019a4:	f7ff fd9d 	bl	1a0014e2 <get_fat>
					if (nxt < 2) return FR_INT_ERR;
1a0019a8:	2801      	cmp	r0, #1
1a0019aa:	d928      	bls.n	1a0019fe <remove_chain+0x12e>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
1a0019ac:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0019b0:	d027      	beq.n	1a001a02 <remove_chain+0x132>
					if (nxt != clst + 1) break;	/* Not contiguous? */
1a0019b2:	1c63      	adds	r3, r4, #1
1a0019b4:	4283      	cmp	r3, r0
1a0019b6:	d101      	bne.n	1a0019bc <remove_chain+0xec>
					clst++;
1a0019b8:	461c      	mov	r4, r3
1a0019ba:	e7ef      	b.n	1a00199c <remove_chain+0xcc>
				if (clst == pclst) {	/* Has the chain got contiguous again? */
1a0019bc:	454c      	cmp	r4, r9
1a0019be:	d001      	beq.n	1a0019c4 <remove_chain+0xf4>
	return FR_OK;
1a0019c0:	2300      	movs	r3, #0
1a0019c2:	e015      	b.n	1a0019f0 <remove_chain+0x120>
					obj->stat = 2;		/* Change the chain status 'contiguous' */
1a0019c4:	2302      	movs	r3, #2
1a0019c6:	71fb      	strb	r3, [r7, #7]
	return FR_OK;
1a0019c8:	2300      	movs	r3, #0
1a0019ca:	e011      	b.n	1a0019f0 <remove_chain+0x120>
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
1a0019cc:	2b03      	cmp	r3, #3
1a0019ce:	d001      	beq.n	1a0019d4 <remove_chain+0x104>
	return FR_OK;
1a0019d0:	2300      	movs	r3, #0
1a0019d2:	e00d      	b.n	1a0019f0 <remove_chain+0x120>
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
1a0019d4:	68bb      	ldr	r3, [r7, #8]
1a0019d6:	454b      	cmp	r3, r9
1a0019d8:	d815      	bhi.n	1a001a06 <remove_chain+0x136>
1a0019da:	69ba      	ldr	r2, [r7, #24]
1a0019dc:	4413      	add	r3, r2
1a0019de:	454b      	cmp	r3, r9
1a0019e0:	d313      	bcc.n	1a001a0a <remove_chain+0x13a>
					obj->stat = 2;	/* Change the chain status 'contiguous' */
1a0019e2:	2302      	movs	r3, #2
1a0019e4:	71fb      	strb	r3, [r7, #7]
	return FR_OK;
1a0019e6:	2300      	movs	r3, #0
1a0019e8:	e002      	b.n	1a0019f0 <remove_chain+0x120>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
1a0019ea:	2302      	movs	r3, #2
1a0019ec:	e000      	b.n	1a0019f0 <remove_chain+0x120>
1a0019ee:	2302      	movs	r3, #2
}
1a0019f0:	4618      	mov	r0, r3
1a0019f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
1a0019f6:	2302      	movs	r3, #2
1a0019f8:	e7fa      	b.n	1a0019f0 <remove_chain+0x120>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
1a0019fa:	2301      	movs	r3, #1
1a0019fc:	e7f8      	b.n	1a0019f0 <remove_chain+0x120>
					if (nxt < 2) return FR_INT_ERR;
1a0019fe:	2302      	movs	r3, #2
1a001a00:	e7f6      	b.n	1a0019f0 <remove_chain+0x120>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
1a001a02:	2301      	movs	r3, #1
1a001a04:	e7f4      	b.n	1a0019f0 <remove_chain+0x120>
	return FR_OK;
1a001a06:	2300      	movs	r3, #0
1a001a08:	e7f2      	b.n	1a0019f0 <remove_chain+0x120>
1a001a0a:	2300      	movs	r3, #0
1a001a0c:	e7f0      	b.n	1a0019f0 <remove_chain+0x120>

1a001a0e <dir_clear>:
{
1a001a0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001a10:	4605      	mov	r5, r0
1a001a12:	460c      	mov	r4, r1
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
1a001a14:	f7ff f94c 	bl	1a000cb0 <sync_window>
1a001a18:	b108      	cbz	r0, 1a001a1e <dir_clear+0x10>
1a001a1a:	2001      	movs	r0, #1
}
1a001a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sect = clst2sect(fs, clst);		/* Top of the cluster */
1a001a1e:	4621      	mov	r1, r4
1a001a20:	4628      	mov	r0, r5
1a001a22:	f7fe ff81 	bl	1a000928 <clst2sect>
1a001a26:	4607      	mov	r7, r0
	fs->winsect = sect;				/* Set window to top of the cluster */
1a001a28:	6368      	str	r0, [r5, #52]	; 0x34
	mem_set(fs->win, 0, SS(fs));	/* Clear window buffer */
1a001a2a:	f105 0638 	add.w	r6, r5, #56	; 0x38
1a001a2e:	f44f 7200 	mov.w	r2, #512	; 0x200
1a001a32:	2100      	movs	r1, #0
1a001a34:	4630      	mov	r0, r6
1a001a36:	f7fe fef9 	bl	1a00082c <mem_set>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
1a001a3a:	2400      	movs	r4, #0
1a001a3c:	e000      	b.n	1a001a40 <dir_clear+0x32>
1a001a3e:	3401      	adds	r4, #1
1a001a40:	896b      	ldrh	r3, [r5, #10]
1a001a42:	42a3      	cmp	r3, r4
1a001a44:	d907      	bls.n	1a001a56 <dir_clear+0x48>
1a001a46:	2301      	movs	r3, #1
1a001a48:	19e2      	adds	r2, r4, r7
1a001a4a:	4631      	mov	r1, r6
1a001a4c:	7868      	ldrb	r0, [r5, #1]
1a001a4e:	f001 fe7b 	bl	1a003748 <disk_write>
1a001a52:	2800      	cmp	r0, #0
1a001a54:	d0f3      	beq.n	1a001a3e <dir_clear+0x30>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
1a001a56:	8968      	ldrh	r0, [r5, #10]
1a001a58:	1b00      	subs	r0, r0, r4
1a001a5a:	bf18      	it	ne
1a001a5c:	2001      	movne	r0, #1
1a001a5e:	e7dd      	b.n	1a001a1c <dir_clear+0xe>

1a001a60 <dir_next>:
{
1a001a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
1a001a64:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
1a001a66:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
1a001a68:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a001a6a:	2b00      	cmp	r3, #0
1a001a6c:	d056      	beq.n	1a001b1c <dir_next+0xbc>
1a001a6e:	3520      	adds	r5, #32
1a001a70:	7832      	ldrb	r2, [r6, #0]
1a001a72:	2a04      	cmp	r2, #4
1a001a74:	d018      	beq.n	1a001aa8 <dir_next+0x48>
1a001a76:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
1a001a7a:	42aa      	cmp	r2, r5
1a001a7c:	d950      	bls.n	1a001b20 <dir_next+0xc0>
1a001a7e:	4688      	mov	r8, r1
1a001a80:	4604      	mov	r4, r0
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
1a001a82:	f3c5 0708 	ubfx	r7, r5, #0, #9
1a001a86:	b93f      	cbnz	r7, 1a001a98 <dir_next+0x38>
		dp->sect++;				/* Next sector */
1a001a88:	3301      	adds	r3, #1
1a001a8a:	6383      	str	r3, [r0, #56]	; 0x38
		if (dp->clust == 0) {	/* Static table */
1a001a8c:	6b41      	ldr	r1, [r0, #52]	; 0x34
1a001a8e:	b991      	cbnz	r1, 1a001ab6 <dir_next+0x56>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
1a001a90:	8933      	ldrh	r3, [r6, #8]
1a001a92:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
1a001a96:	d90a      	bls.n	1a001aae <dir_next+0x4e>
	dp->dptr = ofs;						/* Current entry */
1a001a98:	6325      	str	r5, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
1a001a9a:	f106 0338 	add.w	r3, r6, #56	; 0x38
1a001a9e:	443b      	add	r3, r7
1a001aa0:	63e3      	str	r3, [r4, #60]	; 0x3c
	return FR_OK;
1a001aa2:	2000      	movs	r0, #0
}
1a001aa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
1a001aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001aac:	e7e5      	b.n	1a001a7a <dir_next+0x1a>
				dp->sect = 0; return FR_NO_FILE;
1a001aae:	2300      	movs	r3, #0
1a001ab0:	6383      	str	r3, [r0, #56]	; 0x38
1a001ab2:	2004      	movs	r0, #4
1a001ab4:	e7f6      	b.n	1a001aa4 <dir_next+0x44>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
1a001ab6:	8973      	ldrh	r3, [r6, #10]
1a001ab8:	3b01      	subs	r3, #1
1a001aba:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
1a001abe:	d1eb      	bne.n	1a001a98 <dir_next+0x38>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
1a001ac0:	f7ff fd0f 	bl	1a0014e2 <get_fat>
1a001ac4:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
1a001ac6:	2801      	cmp	r0, #1
1a001ac8:	d92c      	bls.n	1a001b24 <dir_next+0xc4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a001aca:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001ace:	d02b      	beq.n	1a001b28 <dir_next+0xc8>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
1a001ad0:	69f3      	ldr	r3, [r6, #28]
1a001ad2:	4283      	cmp	r3, r0
1a001ad4:	d816      	bhi.n	1a001b04 <dir_next+0xa4>
					if (!stretch) {								/* If no stretch, report EOT */
1a001ad6:	f1b8 0f00 	cmp.w	r8, #0
1a001ada:	d01b      	beq.n	1a001b14 <dir_next+0xb4>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
1a001adc:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a001ade:	4620      	mov	r0, r4
1a001ae0:	f7ff fe10 	bl	1a001704 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
1a001ae4:	4681      	mov	r9, r0
1a001ae6:	b308      	cbz	r0, 1a001b2c <dir_next+0xcc>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
1a001ae8:	2801      	cmp	r0, #1
1a001aea:	d021      	beq.n	1a001b30 <dir_next+0xd0>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a001aec:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001af0:	d020      	beq.n	1a001b34 <dir_next+0xd4>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
1a001af2:	4601      	mov	r1, r0
1a001af4:	4630      	mov	r0, r6
1a001af6:	f7ff ff8a 	bl	1a001a0e <dir_clear>
1a001afa:	b9e8      	cbnz	r0, 1a001b38 <dir_next+0xd8>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
1a001afc:	79e3      	ldrb	r3, [r4, #7]
1a001afe:	f043 0304 	orr.w	r3, r3, #4
1a001b02:	71e3      	strb	r3, [r4, #7]
				dp->clust = clst;		/* Initialize data for new cluster */
1a001b04:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
				dp->sect = clst2sect(fs, clst);
1a001b08:	4649      	mov	r1, r9
1a001b0a:	4630      	mov	r0, r6
1a001b0c:	f7fe ff0c 	bl	1a000928 <clst2sect>
1a001b10:	63a0      	str	r0, [r4, #56]	; 0x38
1a001b12:	e7c1      	b.n	1a001a98 <dir_next+0x38>
						dp->sect = 0; return FR_NO_FILE;
1a001b14:	2300      	movs	r3, #0
1a001b16:	63a3      	str	r3, [r4, #56]	; 0x38
1a001b18:	2004      	movs	r0, #4
1a001b1a:	e7c3      	b.n	1a001aa4 <dir_next+0x44>
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
1a001b1c:	2004      	movs	r0, #4
1a001b1e:	e7c1      	b.n	1a001aa4 <dir_next+0x44>
1a001b20:	2004      	movs	r0, #4
1a001b22:	e7bf      	b.n	1a001aa4 <dir_next+0x44>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
1a001b24:	2002      	movs	r0, #2
1a001b26:	e7bd      	b.n	1a001aa4 <dir_next+0x44>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a001b28:	2001      	movs	r0, #1
1a001b2a:	e7bb      	b.n	1a001aa4 <dir_next+0x44>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
1a001b2c:	2007      	movs	r0, #7
1a001b2e:	e7b9      	b.n	1a001aa4 <dir_next+0x44>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
1a001b30:	2002      	movs	r0, #2
1a001b32:	e7b7      	b.n	1a001aa4 <dir_next+0x44>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a001b34:	2001      	movs	r0, #1
1a001b36:	e7b5      	b.n	1a001aa4 <dir_next+0x44>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
1a001b38:	2001      	movs	r0, #1
1a001b3a:	e7b3      	b.n	1a001aa4 <dir_next+0x44>

1a001b3c <load_xdir>:
{
1a001b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001b40:	4604      	mov	r4, r0
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
1a001b42:	6800      	ldr	r0, [r0, #0]
1a001b44:	6907      	ldr	r7, [r0, #16]
	res = move_window(dp->obj.fs, dp->sect);
1a001b46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a001b48:	f7ff f8da 	bl	1a000d00 <move_window>
	if (res != FR_OK) return res;
1a001b4c:	4605      	mov	r5, r0
1a001b4e:	b920      	cbnz	r0, 1a001b5a <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;	/* Invalid order */
1a001b50:	6be1      	ldr	r1, [r4, #60]	; 0x3c
1a001b52:	780b      	ldrb	r3, [r1, #0]
1a001b54:	2b85      	cmp	r3, #133	; 0x85
1a001b56:	d003      	beq.n	1a001b60 <load_xdir+0x24>
1a001b58:	2502      	movs	r5, #2
}
1a001b5a:	4628      	mov	r0, r5
1a001b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mem_cpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
1a001b60:	2220      	movs	r2, #32
1a001b62:	4638      	mov	r0, r7
1a001b64:	f7fe fe59 	bl	1a00081a <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
1a001b68:	787e      	ldrb	r6, [r7, #1]
1a001b6a:	3601      	adds	r6, #1
1a001b6c:	0176      	lsls	r6, r6, #5
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
1a001b6e:	f1a6 0360 	sub.w	r3, r6, #96	; 0x60
1a001b72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a001b76:	d859      	bhi.n	1a001c2c <load_xdir+0xf0>
	res = dir_next(dp, 0);
1a001b78:	2100      	movs	r1, #0
1a001b7a:	4620      	mov	r0, r4
1a001b7c:	f7ff ff70 	bl	1a001a60 <dir_next>
1a001b80:	4605      	mov	r5, r0
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
1a001b82:	2804      	cmp	r0, #4
1a001b84:	d00e      	beq.n	1a001ba4 <load_xdir+0x68>
	if (res != FR_OK) return res;
1a001b86:	2800      	cmp	r0, #0
1a001b88:	d1e7      	bne.n	1a001b5a <load_xdir+0x1e>
	res = move_window(dp->obj.fs, dp->sect);
1a001b8a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a001b8c:	6820      	ldr	r0, [r4, #0]
1a001b8e:	f7ff f8b7 	bl	1a000d00 <move_window>
	if (res != FR_OK) return res;
1a001b92:	4605      	mov	r5, r0
1a001b94:	2800      	cmp	r0, #0
1a001b96:	d1e0      	bne.n	1a001b5a <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;	/* Invalid order */
1a001b98:	6be1      	ldr	r1, [r4, #60]	; 0x3c
1a001b9a:	780b      	ldrb	r3, [r1, #0]
1a001b9c:	2bc0      	cmp	r3, #192	; 0xc0
1a001b9e:	d003      	beq.n	1a001ba8 <load_xdir+0x6c>
1a001ba0:	2502      	movs	r5, #2
1a001ba2:	e7da      	b.n	1a001b5a <load_xdir+0x1e>
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
1a001ba4:	2502      	movs	r5, #2
	if (res != FR_OK) return res;
1a001ba6:	e7d8      	b.n	1a001b5a <load_xdir+0x1e>
	mem_cpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
1a001ba8:	2220      	movs	r2, #32
1a001baa:	18b8      	adds	r0, r7, r2
1a001bac:	f7fe fe35 	bl	1a00081a <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
1a001bb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
1a001bb4:	332c      	adds	r3, #44	; 0x2c
1a001bb6:	4a20      	ldr	r2, [pc, #128]	; (1a001c38 <load_xdir+0xfc>)
1a001bb8:	fba2 2303 	umull	r2, r3, r2, r3
1a001bbc:	08db      	lsrs	r3, r3, #3
1a001bbe:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
1a001bc2:	d335      	bcc.n	1a001c30 <load_xdir+0xf4>
	i = 2 * SZDIRE;	/* C1 offset to load */
1a001bc4:	f04f 0840 	mov.w	r8, #64	; 0x40
1a001bc8:	e005      	b.n	1a001bd6 <load_xdir+0x9a>
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
1a001bca:	2502      	movs	r5, #2
		if (res != FR_OK) return res;
1a001bcc:	e7c5      	b.n	1a001b5a <load_xdir+0x1e>
	} while ((i += SZDIRE) < sz_ent);
1a001bce:	f108 0820 	add.w	r8, r8, #32
1a001bd2:	4546      	cmp	r6, r8
1a001bd4:	d91c      	bls.n	1a001c10 <load_xdir+0xd4>
		res = dir_next(dp, 0);
1a001bd6:	2100      	movs	r1, #0
1a001bd8:	4620      	mov	r0, r4
1a001bda:	f7ff ff41 	bl	1a001a60 <dir_next>
1a001bde:	4605      	mov	r5, r0
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
1a001be0:	2804      	cmp	r0, #4
1a001be2:	d0f2      	beq.n	1a001bca <load_xdir+0x8e>
		if (res != FR_OK) return res;
1a001be4:	2800      	cmp	r0, #0
1a001be6:	d1b8      	bne.n	1a001b5a <load_xdir+0x1e>
		res = move_window(dp->obj.fs, dp->sect);
1a001be8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a001bea:	6820      	ldr	r0, [r4, #0]
1a001bec:	f7ff f888 	bl	1a000d00 <move_window>
		if (res != FR_OK) return res;
1a001bf0:	4605      	mov	r5, r0
1a001bf2:	2800      	cmp	r0, #0
1a001bf4:	d1b1      	bne.n	1a001b5a <load_xdir+0x1e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;	/* Invalid order */
1a001bf6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
1a001bf8:	780b      	ldrb	r3, [r1, #0]
1a001bfa:	2bc1      	cmp	r3, #193	; 0xc1
1a001bfc:	d11a      	bne.n	1a001c34 <load_xdir+0xf8>
		if (i < MAXDIRB(FF_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
1a001bfe:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
1a001c02:	d2e4      	bcs.n	1a001bce <load_xdir+0x92>
1a001c04:	2220      	movs	r2, #32
1a001c06:	eb07 0008 	add.w	r0, r7, r8
1a001c0a:	f7fe fe06 	bl	1a00081a <mem_cpy>
1a001c0e:	e7de      	b.n	1a001bce <load_xdir+0x92>
	if (i <= MAXDIRB(FF_MAX_LFN)) {
1a001c10:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
1a001c14:	d8a1      	bhi.n	1a001b5a <load_xdir+0x1e>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
1a001c16:	4638      	mov	r0, r7
1a001c18:	f7fe ff9f 	bl	1a000b5a <xdir_sum>
1a001c1c:	4604      	mov	r4, r0
1a001c1e:	1cb8      	adds	r0, r7, #2
1a001c20:	f7fe fda4 	bl	1a00076c <ld_word>
1a001c24:	4284      	cmp	r4, r0
1a001c26:	d098      	beq.n	1a001b5a <load_xdir+0x1e>
1a001c28:	2502      	movs	r5, #2
1a001c2a:	e796      	b.n	1a001b5a <load_xdir+0x1e>
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
1a001c2c:	2502      	movs	r5, #2
1a001c2e:	e794      	b.n	1a001b5a <load_xdir+0x1e>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
1a001c30:	2502      	movs	r5, #2
1a001c32:	e792      	b.n	1a001b5a <load_xdir+0x1e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;	/* Invalid order */
1a001c34:	2502      	movs	r5, #2
1a001c36:	e790      	b.n	1a001b5a <load_xdir+0x1e>
1a001c38:	88888889 	.word	0x88888889

1a001c3c <load_obj_xdir>:
{
1a001c3c:	b510      	push	{r4, lr}
1a001c3e:	4604      	mov	r4, r0
	dp->obj.fs = obj->fs;
1a001c40:	680b      	ldr	r3, [r1, #0]
1a001c42:	6003      	str	r3, [r0, #0]
	dp->obj.sclust = obj->c_scl;
1a001c44:	6a0b      	ldr	r3, [r1, #32]
1a001c46:	6083      	str	r3, [r0, #8]
	dp->obj.stat = (BYTE)obj->c_size;
1a001c48:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
1a001c4c:	71c3      	strb	r3, [r0, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
1a001c4e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
1a001c50:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001c54:	2200      	movs	r2, #0
1a001c56:	6103      	str	r3, [r0, #16]
1a001c58:	6142      	str	r2, [r0, #20]
	dp->obj.n_frag = 0;
1a001c5a:	61c2      	str	r2, [r0, #28]
	dp->blk_ofs = obj->c_ofs;
1a001c5c:	6a89      	ldr	r1, [r1, #40]	; 0x28
1a001c5e:	64c1      	str	r1, [r0, #76]	; 0x4c
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
1a001c60:	f7ff fcf6 	bl	1a001650 <dir_sdi>
	if (res == FR_OK) {
1a001c64:	4603      	mov	r3, r0
1a001c66:	b108      	cbz	r0, 1a001c6c <load_obj_xdir+0x30>
}
1a001c68:	4618      	mov	r0, r3
1a001c6a:	bd10      	pop	{r4, pc}
		res = load_xdir(dp);		/* Load the object's entry block */
1a001c6c:	4620      	mov	r0, r4
1a001c6e:	f7ff ff65 	bl	1a001b3c <load_xdir>
1a001c72:	4603      	mov	r3, r0
1a001c74:	e7f8      	b.n	1a001c68 <load_obj_xdir+0x2c>

1a001c76 <dir_read>:
{
1a001c76:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001c7a:	4604      	mov	r4, r0
1a001c7c:	4688      	mov	r8, r1
	FATFS *fs = dp->obj.fs;
1a001c7e:	6806      	ldr	r6, [r0, #0]
	BYTE ord = 0xFF, sum = 0xFF;
1a001c80:	f04f 09ff 	mov.w	r9, #255	; 0xff
1a001c84:	464f      	mov	r7, r9
	FRESULT res = FR_NO_FILE;
1a001c86:	2504      	movs	r5, #4
	while (dp->sect) {
1a001c88:	e008      	b.n	1a001c9c <dir_read+0x26>
				if (c == 0x85) {		/* Start of the file entry block? */
1a001c8a:	2b85      	cmp	r3, #133	; 0x85
1a001c8c:	d028      	beq.n	1a001ce0 <dir_read+0x6a>
		res = dir_next(dp, 0);		/* Next entry */
1a001c8e:	2100      	movs	r1, #0
1a001c90:	4620      	mov	r0, r4
1a001c92:	f7ff fee5 	bl	1a001a60 <dir_next>
		if (res != FR_OK) break;
1a001c96:	4605      	mov	r5, r0
1a001c98:	2800      	cmp	r0, #0
1a001c9a:	d15b      	bne.n	1a001d54 <dir_read+0xde>
	while (dp->sect) {
1a001c9c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a001c9e:	2900      	cmp	r1, #0
1a001ca0:	d058      	beq.n	1a001d54 <dir_read+0xde>
		res = move_window(fs, dp->sect);
1a001ca2:	4630      	mov	r0, r6
1a001ca4:	f7ff f82c 	bl	1a000d00 <move_window>
		if (res != FR_OK) break;
1a001ca8:	4605      	mov	r5, r0
1a001caa:	2800      	cmp	r0, #0
1a001cac:	d152      	bne.n	1a001d54 <dir_read+0xde>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
1a001cae:	6be1      	ldr	r1, [r4, #60]	; 0x3c
1a001cb0:	780b      	ldrb	r3, [r1, #0]
		if (c == 0) {
1a001cb2:	2b00      	cmp	r3, #0
1a001cb4:	d04d      	beq.n	1a001d52 <dir_read+0xdc>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1a001cb6:	7832      	ldrb	r2, [r6, #0]
1a001cb8:	2a04      	cmp	r2, #4
1a001cba:	d0e6      	beq.n	1a001c8a <dir_read+0x14>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
1a001cbc:	7aca      	ldrb	r2, [r1, #11]
1a001cbe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
1a001cc2:	71a2      	strb	r2, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
1a001cc4:	2be5      	cmp	r3, #229	; 0xe5
1a001cc6:	d03e      	beq.n	1a001d46 <dir_read+0xd0>
1a001cc8:	2b2e      	cmp	r3, #46	; 0x2e
1a001cca:	d03e      	beq.n	1a001d4a <dir_read+0xd4>
1a001ccc:	f022 0020 	bic.w	r0, r2, #32
1a001cd0:	2808      	cmp	r0, #8
1a001cd2:	bf14      	ite	ne
1a001cd4:	2000      	movne	r0, #0
1a001cd6:	2001      	moveq	r0, #1
1a001cd8:	4540      	cmp	r0, r8
1a001cda:	d00e      	beq.n	1a001cfa <dir_read+0x84>
				ord = 0xFF;
1a001cdc:	27ff      	movs	r7, #255	; 0xff
1a001cde:	e7d6      	b.n	1a001c8e <dir_read+0x18>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
1a001ce0:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a001ce2:	64e3      	str	r3, [r4, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
1a001ce4:	4620      	mov	r0, r4
1a001ce6:	f7ff ff29 	bl	1a001b3c <load_xdir>
					if (res == FR_OK) {
1a001cea:	4605      	mov	r5, r0
1a001cec:	bb90      	cbnz	r0, 1a001d54 <dir_read+0xde>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
1a001cee:	6933      	ldr	r3, [r6, #16]
1a001cf0:	791b      	ldrb	r3, [r3, #4]
1a001cf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
1a001cf6:	71a3      	strb	r3, [r4, #6]
1a001cf8:	e02c      	b.n	1a001d54 <dir_read+0xde>
				if (a == AM_LFN) {			/* An LFN entry is found */
1a001cfa:	2a0f      	cmp	r2, #15
1a001cfc:	d119      	bne.n	1a001d32 <dir_read+0xbc>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
1a001cfe:	f013 0f40 	tst.w	r3, #64	; 0x40
1a001d02:	d006      	beq.n	1a001d12 <dir_read+0x9c>
						sum = dp->dir[LDIR_Chksum];
1a001d04:	f891 900d 	ldrb.w	r9, [r1, #13]
						c &= (BYTE)~LLEF; ord = c;
1a001d08:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
1a001d0c:	6b22      	ldr	r2, [r4, #48]	; 0x30
1a001d0e:	64e2      	str	r2, [r4, #76]	; 0x4c
						c &= (BYTE)~LLEF; ord = c;
1a001d10:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
1a001d12:	42bb      	cmp	r3, r7
1a001d14:	d001      	beq.n	1a001d1a <dir_read+0xa4>
1a001d16:	27ff      	movs	r7, #255	; 0xff
1a001d18:	e7b9      	b.n	1a001c8e <dir_read+0x18>
1a001d1a:	7b4b      	ldrb	r3, [r1, #13]
1a001d1c:	454b      	cmp	r3, r9
1a001d1e:	d001      	beq.n	1a001d24 <dir_read+0xae>
1a001d20:	27ff      	movs	r7, #255	; 0xff
1a001d22:	e7b4      	b.n	1a001c8e <dir_read+0x18>
1a001d24:	68f0      	ldr	r0, [r6, #12]
1a001d26:	f7fe fe31 	bl	1a00098c <pick_lfn>
1a001d2a:	b180      	cbz	r0, 1a001d4e <dir_read+0xd8>
1a001d2c:	3f01      	subs	r7, #1
1a001d2e:	b2ff      	uxtb	r7, r7
1a001d30:	e7ad      	b.n	1a001c8e <dir_read+0x18>
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
1a001d32:	b927      	cbnz	r7, 1a001d3e <dir_read+0xc8>
1a001d34:	4608      	mov	r0, r1
1a001d36:	f7fe ff02 	bl	1a000b3e <sum_sfn>
1a001d3a:	4548      	cmp	r0, r9
1a001d3c:	d00a      	beq.n	1a001d54 <dir_read+0xde>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
1a001d3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a001d42:	64e3      	str	r3, [r4, #76]	; 0x4c
1a001d44:	e006      	b.n	1a001d54 <dir_read+0xde>
				ord = 0xFF;
1a001d46:	27ff      	movs	r7, #255	; 0xff
1a001d48:	e7a1      	b.n	1a001c8e <dir_read+0x18>
1a001d4a:	27ff      	movs	r7, #255	; 0xff
1a001d4c:	e79f      	b.n	1a001c8e <dir_read+0x18>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
1a001d4e:	27ff      	movs	r7, #255	; 0xff
1a001d50:	e79d      	b.n	1a001c8e <dir_read+0x18>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
1a001d52:	2504      	movs	r5, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
1a001d54:	b10d      	cbz	r5, 1a001d5a <dir_read+0xe4>
1a001d56:	2300      	movs	r3, #0
1a001d58:	63a3      	str	r3, [r4, #56]	; 0x38
}
1a001d5a:	4628      	mov	r0, r5
1a001d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a001d60 <dir_alloc>:
{
1a001d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001d62:	4604      	mov	r4, r0
1a001d64:	460f      	mov	r7, r1
	FATFS *fs = dp->obj.fs;
1a001d66:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
1a001d68:	2100      	movs	r1, #0
1a001d6a:	f7ff fc71 	bl	1a001650 <dir_sdi>
	if (res == FR_OK) {
1a001d6e:	4602      	mov	r2, r0
1a001d70:	bb30      	cbnz	r0, 1a001dc0 <dir_alloc+0x60>
		n = 0;
1a001d72:	2500      	movs	r5, #0
1a001d74:	e00e      	b.n	1a001d94 <dir_alloc+0x34>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
1a001d76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001d78:	f993 3000 	ldrsb.w	r3, [r3]
1a001d7c:	43db      	mvns	r3, r3
1a001d7e:	0fdb      	lsrs	r3, r3, #31
1a001d80:	b1e3      	cbz	r3, 1a001dbc <dir_alloc+0x5c>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
1a001d82:	3501      	adds	r5, #1
1a001d84:	42bd      	cmp	r5, r7
1a001d86:	d01b      	beq.n	1a001dc0 <dir_alloc+0x60>
			res = dir_next(dp, 1);
1a001d88:	2101      	movs	r1, #1
1a001d8a:	4620      	mov	r0, r4
1a001d8c:	f7ff fe68 	bl	1a001a60 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
1a001d90:	4602      	mov	r2, r0
1a001d92:	b9a8      	cbnz	r0, 1a001dc0 <dir_alloc+0x60>
			res = move_window(fs, dp->sect);
1a001d94:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a001d96:	4630      	mov	r0, r6
1a001d98:	f7fe ffb2 	bl	1a000d00 <move_window>
			if (res != FR_OK) break;
1a001d9c:	4602      	mov	r2, r0
1a001d9e:	b978      	cbnz	r0, 1a001dc0 <dir_alloc+0x60>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
1a001da0:	7833      	ldrb	r3, [r6, #0]
1a001da2:	2b04      	cmp	r3, #4
1a001da4:	d0e7      	beq.n	1a001d76 <dir_alloc+0x16>
1a001da6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001da8:	781b      	ldrb	r3, [r3, #0]
1a001daa:	2be5      	cmp	r3, #229	; 0xe5
1a001dac:	d002      	beq.n	1a001db4 <dir_alloc+0x54>
1a001dae:	b91b      	cbnz	r3, 1a001db8 <dir_alloc+0x58>
1a001db0:	2301      	movs	r3, #1
1a001db2:	e7e5      	b.n	1a001d80 <dir_alloc+0x20>
1a001db4:	2301      	movs	r3, #1
1a001db6:	e7e3      	b.n	1a001d80 <dir_alloc+0x20>
1a001db8:	2300      	movs	r3, #0
1a001dba:	e7e1      	b.n	1a001d80 <dir_alloc+0x20>
				n = 0;					/* Not a blank entry. Restart to search */
1a001dbc:	2500      	movs	r5, #0
1a001dbe:	e7e3      	b.n	1a001d88 <dir_alloc+0x28>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
1a001dc0:	2a04      	cmp	r2, #4
1a001dc2:	d001      	beq.n	1a001dc8 <dir_alloc+0x68>
}
1a001dc4:	4610      	mov	r0, r2
1a001dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
1a001dc8:	2207      	movs	r2, #7
1a001dca:	e7fb      	b.n	1a001dc4 <dir_alloc+0x64>

1a001dcc <store_xdir>:
{
1a001dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001dce:	4604      	mov	r4, r0
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
1a001dd0:	6803      	ldr	r3, [r0, #0]
1a001dd2:	691e      	ldr	r6, [r3, #16]
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
1a001dd4:	4630      	mov	r0, r6
1a001dd6:	f7fe fec0 	bl	1a000b5a <xdir_sum>
1a001dda:	4601      	mov	r1, r0
1a001ddc:	1cb0      	adds	r0, r6, #2
1a001dde:	f7fe fcfb 	bl	1a0007d8 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
1a001de2:	7877      	ldrb	r7, [r6, #1]
1a001de4:	3701      	adds	r7, #1
	res = dir_sdi(dp, dp->blk_ofs);
1a001de6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
1a001de8:	4620      	mov	r0, r4
1a001dea:	f7ff fc31 	bl	1a001650 <dir_sdi>
1a001dee:	4605      	mov	r5, r0
	while (res == FR_OK) {
1a001df0:	b9b5      	cbnz	r5, 1a001e20 <store_xdir+0x54>
		res = move_window(dp->obj.fs, dp->sect);
1a001df2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a001df4:	6820      	ldr	r0, [r4, #0]
1a001df6:	f7fe ff83 	bl	1a000d00 <move_window>
		if (res != FR_OK) break;
1a001dfa:	4605      	mov	r5, r0
1a001dfc:	b980      	cbnz	r0, 1a001e20 <store_xdir+0x54>
		mem_cpy(dp->dir, dirb, SZDIRE);
1a001dfe:	2220      	movs	r2, #32
1a001e00:	4631      	mov	r1, r6
1a001e02:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a001e04:	f7fe fd09 	bl	1a00081a <mem_cpy>
		dp->obj.fs->wflag = 1;
1a001e08:	6823      	ldr	r3, [r4, #0]
1a001e0a:	2201      	movs	r2, #1
1a001e0c:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
1a001e0e:	3f01      	subs	r7, #1
1a001e10:	d006      	beq.n	1a001e20 <store_xdir+0x54>
		dirb += SZDIRE;
1a001e12:	3620      	adds	r6, #32
		res = dir_next(dp, 0);
1a001e14:	2100      	movs	r1, #0
1a001e16:	4620      	mov	r0, r4
1a001e18:	f7ff fe22 	bl	1a001a60 <dir_next>
1a001e1c:	4605      	mov	r5, r0
1a001e1e:	e7e7      	b.n	1a001df0 <store_xdir+0x24>
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
1a001e20:	2d02      	cmp	r5, #2
1a001e22:	bf28      	it	cs
1a001e24:	2502      	movcs	r5, #2
}
1a001e26:	b2e8      	uxtb	r0, r5
1a001e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001e2a:	Address 0x000000001a001e2a is out of bounds.


1a001e2c <create_name>:
{
1a001e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001e30:	b085      	sub	sp, #20
1a001e32:	4681      	mov	r9, r0
1a001e34:	460f      	mov	r7, r1
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
1a001e36:	680b      	ldr	r3, [r1, #0]
1a001e38:	9303      	str	r3, [sp, #12]
1a001e3a:	6803      	ldr	r3, [r0, #0]
1a001e3c:	68dd      	ldr	r5, [r3, #12]
1a001e3e:	2400      	movs	r4, #0
1a001e40:	e00e      	b.n	1a001e60 <create_name+0x34>
		wc = (WCHAR)uc;
1a001e42:	b286      	uxth	r6, r0
		if (wc < ' ' || wc == '/' || wc == '\\') break;	/* Break if end of the path or a separator is found */
1a001e44:	2e1f      	cmp	r6, #31
1a001e46:	d924      	bls.n	1a001e92 <create_name+0x66>
1a001e48:	2e2f      	cmp	r6, #47	; 0x2f
1a001e4a:	d022      	beq.n	1a001e92 <create_name+0x66>
1a001e4c:	2e5c      	cmp	r6, #92	; 0x5c
1a001e4e:	d020      	beq.n	1a001e92 <create_name+0x66>
		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
1a001e50:	2e7f      	cmp	r6, #127	; 0x7f
1a001e52:	d914      	bls.n	1a001e7e <create_name+0x52>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
1a001e54:	2cfe      	cmp	r4, #254	; 0xfe
1a001e56:	f200 8101 	bhi.w	1a00205c <create_name+0x230>
		lfn[di++] = wc;					/* Store the Unicode character */
1a001e5a:	f825 6014 	strh.w	r6, [r5, r4, lsl #1]
1a001e5e:	3401      	adds	r4, #1
		uc = tchar2uni(&p);			/* Get a character */
1a001e60:	a803      	add	r0, sp, #12
1a001e62:	f7fe fd01 	bl	1a000868 <tchar2uni>
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
1a001e66:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001e6a:	f000 80f5 	beq.w	1a002058 <create_name+0x22c>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
1a001e6e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
1a001e72:	d3e6      	bcc.n	1a001e42 <create_name+0x16>
1a001e74:	0c03      	lsrs	r3, r0, #16
1a001e76:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
1a001e7a:	3401      	adds	r4, #1
1a001e7c:	e7e1      	b.n	1a001e42 <create_name+0x16>
		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
1a001e7e:	4631      	mov	r1, r6
1a001e80:	4878      	ldr	r0, [pc, #480]	; (1a002064 <create_name+0x238>)
1a001e82:	f7fe fce6 	bl	1a000852 <chk_chr>
1a001e86:	2800      	cmp	r0, #0
1a001e88:	d0e4      	beq.n	1a001e54 <create_name+0x28>
1a001e8a:	2006      	movs	r0, #6
1a001e8c:	e08f      	b.n	1a001fae <create_name+0x182>
	while (*p == '/' || *p == '\\') p++;	/* Skip duplicated separators if exist */
1a001e8e:	3301      	adds	r3, #1
1a001e90:	9303      	str	r3, [sp, #12]
1a001e92:	9b03      	ldr	r3, [sp, #12]
1a001e94:	781a      	ldrb	r2, [r3, #0]
1a001e96:	2a2f      	cmp	r2, #47	; 0x2f
1a001e98:	d0f9      	beq.n	1a001e8e <create_name+0x62>
1a001e9a:	2a5c      	cmp	r2, #92	; 0x5c
1a001e9c:	d0f7      	beq.n	1a001e8e <create_name+0x62>
	*path = p;							/* Return pointer to the next segment */
1a001e9e:	603b      	str	r3, [r7, #0]
	cf = (wc < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
1a001ea0:	2e1f      	cmp	r6, #31
1a001ea2:	d801      	bhi.n	1a001ea8 <create_name+0x7c>
1a001ea4:	2704      	movs	r7, #4
1a001ea6:	e002      	b.n	1a001eae <create_name+0x82>
1a001ea8:	2700      	movs	r7, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
1a001eaa:	e000      	b.n	1a001eae <create_name+0x82>
		di--;
1a001eac:	3c01      	subs	r4, #1
	while (di) {						/* Snip off trailing spaces and dots if exist */
1a001eae:	b144      	cbz	r4, 1a001ec2 <create_name+0x96>
		wc = lfn[di - 1];
1a001eb0:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
1a001eb4:	3b01      	subs	r3, #1
1a001eb6:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (wc != ' ' && wc != '.') break;
1a001eba:	2b20      	cmp	r3, #32
1a001ebc:	d0f6      	beq.n	1a001eac <create_name+0x80>
1a001ebe:	2b2e      	cmp	r3, #46	; 0x2e
1a001ec0:	d0f4      	beq.n	1a001eac <create_name+0x80>
	lfn[di] = 0;							/* LFN is created into the working buffer */
1a001ec2:	2300      	movs	r3, #0
1a001ec4:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
1a001ec8:	2c00      	cmp	r4, #0
1a001eca:	f000 80c9 	beq.w	1a002060 <create_name+0x234>
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
1a001ece:	461e      	mov	r6, r3
1a001ed0:	f835 3016 	ldrh.w	r3, [r5, r6, lsl #1]
1a001ed4:	2b20      	cmp	r3, #32
1a001ed6:	d101      	bne.n	1a001edc <create_name+0xb0>
1a001ed8:	3601      	adds	r6, #1
1a001eda:	e7f9      	b.n	1a001ed0 <create_name+0xa4>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
1a001edc:	b90e      	cbnz	r6, 1a001ee2 <create_name+0xb6>
1a001ede:	2b2e      	cmp	r3, #46	; 0x2e
1a001ee0:	d103      	bne.n	1a001eea <create_name+0xbe>
1a001ee2:	f047 0703 	orr.w	r7, r7, #3
1a001ee6:	e000      	b.n	1a001eea <create_name+0xbe>
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
1a001ee8:	3c01      	subs	r4, #1
1a001eea:	b134      	cbz	r4, 1a001efa <create_name+0xce>
1a001eec:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
1a001ef0:	3b01      	subs	r3, #1
1a001ef2:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
1a001ef6:	2b2e      	cmp	r3, #46	; 0x2e
1a001ef8:	d1f6      	bne.n	1a001ee8 <create_name+0xbc>
	mem_set(dp->fn, ' ', 11);
1a001efa:	220b      	movs	r2, #11
1a001efc:	2120      	movs	r1, #32
1a001efe:	f109 0040 	add.w	r0, r9, #64	; 0x40
1a001f02:	f7fe fc93 	bl	1a00082c <mem_set>
	i = b = 0; ni = 8;
1a001f06:	f04f 0b08 	mov.w	fp, #8
1a001f0a:	2300      	movs	r3, #0
1a001f0c:	9301      	str	r3, [sp, #4]
1a001f0e:	469a      	mov	sl, r3
		wc = lfn[si++];					/* Get an LFN character */
1a001f10:	f106 0801 	add.w	r8, r6, #1
1a001f14:	f835 6016 	ldrh.w	r6, [r5, r6, lsl #1]
		if (wc == 0) break;				/* Break on end of the LFN */
1a001f18:	b346      	cbz	r6, 1a001f6c <create_name+0x140>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
1a001f1a:	2e20      	cmp	r6, #32
1a001f1c:	d019      	beq.n	1a001f52 <create_name+0x126>
1a001f1e:	2e2e      	cmp	r6, #46	; 0x2e
1a001f20:	d015      	beq.n	1a001f4e <create_name+0x122>
		if (i >= ni || si == di) {		/* End of field? */
1a001f22:	9b01      	ldr	r3, [sp, #4]
1a001f24:	455b      	cmp	r3, fp
1a001f26:	d218      	bcs.n	1a001f5a <create_name+0x12e>
1a001f28:	4544      	cmp	r4, r8
1a001f2a:	d016      	beq.n	1a001f5a <create_name+0x12e>
		if (wc >= 0x80) {	/* Is this a non-ASCII character? */
1a001f2c:	2e7f      	cmp	r6, #127	; 0x7f
1a001f2e:	d84e      	bhi.n	1a001fce <create_name+0x1a2>
		if (wc >= 0x100) {				/* Is this a DBC? */
1a001f30:	2eff      	cmp	r6, #255	; 0xff
1a001f32:	d962      	bls.n	1a001ffa <create_name+0x1ce>
			if (i >= ni - 1) {			/* Field overflow? */
1a001f34:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
1a001f38:	9a01      	ldr	r2, [sp, #4]
1a001f3a:	4293      	cmp	r3, r2
1a001f3c:	d957      	bls.n	1a001fee <create_name+0x1c2>
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
1a001f3e:	9901      	ldr	r1, [sp, #4]
1a001f40:	1c4b      	adds	r3, r1, #1
1a001f42:	f3c6 2207 	ubfx	r2, r6, #8, #8
1a001f46:	4449      	add	r1, r9
1a001f48:	f881 2040 	strb.w	r2, [r1, #64]	; 0x40
1a001f4c:	e05a      	b.n	1a002004 <create_name+0x1d8>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
1a001f4e:	4544      	cmp	r4, r8
1a001f50:	d0e7      	beq.n	1a001f22 <create_name+0xf6>
			cf |= NS_LOSS | NS_LFN;
1a001f52:	f047 0703 	orr.w	r7, r7, #3
		wc = lfn[si++];					/* Get an LFN character */
1a001f56:	4646      	mov	r6, r8
			continue;
1a001f58:	e7da      	b.n	1a001f10 <create_name+0xe4>
			if (ni == 11) {				/* Name extension overflow? */
1a001f5a:	f1bb 0f0b 	cmp.w	fp, #11
1a001f5e:	d029      	beq.n	1a001fb4 <create_name+0x188>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
1a001f60:	4544      	cmp	r4, r8
1a001f62:	d001      	beq.n	1a001f68 <create_name+0x13c>
1a001f64:	f047 0703 	orr.w	r7, r7, #3
			if (si > di) break;						/* No name extension? */
1a001f68:	4544      	cmp	r4, r8
1a001f6a:	d226      	bcs.n	1a001fba <create_name+0x18e>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
1a001f6c:	f899 3040 	ldrb.w	r3, [r9, #64]	; 0x40
1a001f70:	2be5      	cmp	r3, #229	; 0xe5
1a001f72:	d068      	beq.n	1a002046 <create_name+0x21a>
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
1a001f74:	f1bb 0f08 	cmp.w	fp, #8
1a001f78:	d069      	beq.n	1a00204e <create_name+0x222>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
1a001f7a:	f00a 030c 	and.w	r3, sl, #12
1a001f7e:	2b0c      	cmp	r3, #12
1a001f80:	d003      	beq.n	1a001f8a <create_name+0x15e>
1a001f82:	f00a 0303 	and.w	r3, sl, #3
1a001f86:	2b03      	cmp	r3, #3
1a001f88:	d101      	bne.n	1a001f8e <create_name+0x162>
1a001f8a:	f047 0702 	orr.w	r7, r7, #2
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
1a001f8e:	f017 0f02 	tst.w	r7, #2
1a001f92:	d109      	bne.n	1a001fa8 <create_name+0x17c>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
1a001f94:	f01a 0f01 	tst.w	sl, #1
1a001f98:	d001      	beq.n	1a001f9e <create_name+0x172>
1a001f9a:	f047 0710 	orr.w	r7, r7, #16
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
1a001f9e:	f01a 0f04 	tst.w	sl, #4
1a001fa2:	d001      	beq.n	1a001fa8 <create_name+0x17c>
1a001fa4:	f047 0708 	orr.w	r7, r7, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
1a001fa8:	f889 704b 	strb.w	r7, [r9, #75]	; 0x4b
	return FR_OK;
1a001fac:	2000      	movs	r0, #0
}
1a001fae:	b005      	add	sp, #20
1a001fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN;
1a001fb4:	f047 0703 	orr.w	r7, r7, #3
				break;
1a001fb8:	e7d8      	b.n	1a001f6c <create_name+0x140>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
1a001fba:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
1a001fbe:	fa5f fa8a 	uxtb.w	sl, sl
1a001fc2:	4626      	mov	r6, r4
1a001fc4:	f04f 0b0b 	mov.w	fp, #11
1a001fc8:	2308      	movs	r3, #8
1a001fca:	9301      	str	r3, [sp, #4]
			continue;
1a001fcc:	e7a0      	b.n	1a001f10 <create_name+0xe4>
			cf |= NS_LFN;	/* LFN entry needs to be created */
1a001fce:	f047 0702 	orr.w	r7, r7, #2
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
1a001fd2:	f240 3152 	movw	r1, #850	; 0x352
1a001fd6:	4630      	mov	r0, r6
1a001fd8:	f000 feb2 	bl	1a002d40 <ff_uni2oem>
1a001fdc:	4606      	mov	r6, r0
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
1a001fde:	f010 0f80 	tst.w	r0, #128	; 0x80
1a001fe2:	d0a5      	beq.n	1a001f30 <create_name+0x104>
1a001fe4:	f000 067f 	and.w	r6, r0, #127	; 0x7f
1a001fe8:	4b1f      	ldr	r3, [pc, #124]	; (1a002068 <create_name+0x23c>)
1a001fea:	5d9e      	ldrb	r6, [r3, r6]
1a001fec:	e7a0      	b.n	1a001f30 <create_name+0x104>
				cf |= NS_LOSS | NS_LFN;
1a001fee:	f047 0703 	orr.w	r7, r7, #3
		wc = lfn[si++];					/* Get an LFN character */
1a001ff2:	4646      	mov	r6, r8
				i = ni; continue;		/* Next field */
1a001ff4:	f8cd b004 	str.w	fp, [sp, #4]
1a001ff8:	e78a      	b.n	1a001f10 <create_name+0xe4>
			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
1a001ffa:	b956      	cbnz	r6, 1a002012 <create_name+0x1e6>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
1a001ffc:	f047 0703 	orr.w	r7, r7, #3
1a002000:	9b01      	ldr	r3, [sp, #4]
1a002002:	265f      	movs	r6, #95	; 0x5f
		dp->fn[i++] = (BYTE)wc;
1a002004:	1c5a      	adds	r2, r3, #1
1a002006:	9201      	str	r2, [sp, #4]
1a002008:	444b      	add	r3, r9
1a00200a:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
		wc = lfn[si++];					/* Get an LFN character */
1a00200e:	4646      	mov	r6, r8
1a002010:	e77e      	b.n	1a001f10 <create_name+0xe4>
			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
1a002012:	4631      	mov	r1, r6
1a002014:	4815      	ldr	r0, [pc, #84]	; (1a00206c <create_name+0x240>)
1a002016:	f7fe fc1c 	bl	1a000852 <chk_chr>
1a00201a:	2800      	cmp	r0, #0
1a00201c:	d1ee      	bne.n	1a001ffc <create_name+0x1d0>
				if (IsUpper(wc)) {		/* ASCII upper case? */
1a00201e:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
1a002022:	b29b      	uxth	r3, r3
1a002024:	2b19      	cmp	r3, #25
1a002026:	d801      	bhi.n	1a00202c <create_name+0x200>
					b |= 2;
1a002028:	f04a 0a02 	orr.w	sl, sl, #2
				if (IsLower(wc)) {		/* ASCII lower case? */
1a00202c:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
1a002030:	b29b      	uxth	r3, r3
1a002032:	2b19      	cmp	r3, #25
1a002034:	d805      	bhi.n	1a002042 <create_name+0x216>
					b |= 1; wc -= 0x20;
1a002036:	f04a 0a01 	orr.w	sl, sl, #1
1a00203a:	3e20      	subs	r6, #32
1a00203c:	b2b6      	uxth	r6, r6
1a00203e:	9b01      	ldr	r3, [sp, #4]
1a002040:	e7e0      	b.n	1a002004 <create_name+0x1d8>
1a002042:	9b01      	ldr	r3, [sp, #4]
1a002044:	e7de      	b.n	1a002004 <create_name+0x1d8>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
1a002046:	2305      	movs	r3, #5
1a002048:	f889 3040 	strb.w	r3, [r9, #64]	; 0x40
1a00204c:	e792      	b.n	1a001f74 <create_name+0x148>
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
1a00204e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
1a002052:	fa5f fa8a 	uxtb.w	sl, sl
1a002056:	e790      	b.n	1a001f7a <create_name+0x14e>
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
1a002058:	2006      	movs	r0, #6
1a00205a:	e7a8      	b.n	1a001fae <create_name+0x182>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
1a00205c:	2006      	movs	r0, #6
1a00205e:	e7a6      	b.n	1a001fae <create_name+0x182>
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
1a002060:	2006      	movs	r0, #6
1a002062:	e7a4      	b.n	1a001fae <create_name+0x182>
1a002064:	1a005a14 	.word	0x1a005a14
1a002068:	1a005964 	.word	0x1a005964
1a00206c:	1a005a20 	.word	0x1a005a20

1a002070 <xname_sum>:
{
1a002070:	b538      	push	{r3, r4, r5, lr}
1a002072:	4605      	mov	r5, r0
	WORD sum = 0;
1a002074:	2400      	movs	r4, #0
	while ((chr = *name++) != 0) {
1a002076:	f835 0b02 	ldrh.w	r0, [r5], #2
1a00207a:	b188      	cbz	r0, 1a0020a0 <xname_sum+0x30>
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
1a00207c:	f000 fe80 	bl	1a002d80 <ff_wtoupper>
1a002080:	b280      	uxth	r0, r0
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
1a002082:	0863      	lsrs	r3, r4, #1
1a002084:	eb03 34c4 	add.w	r4, r3, r4, lsl #15
1a002088:	b2c3      	uxtb	r3, r0
1a00208a:	fa13 f484 	uxtah	r4, r3, r4
1a00208e:	b2a3      	uxth	r3, r4
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
1a002090:	085c      	lsrs	r4, r3, #1
1a002092:	eb04 34c3 	add.w	r4, r4, r3, lsl #15
1a002096:	0a00      	lsrs	r0, r0, #8
1a002098:	fa10 f484 	uxtah	r4, r0, r4
1a00209c:	b2a4      	uxth	r4, r4
1a00209e:	e7ea      	b.n	1a002076 <xname_sum+0x6>
}
1a0020a0:	4620      	mov	r0, r4
1a0020a2:	bd38      	pop	{r3, r4, r5, pc}

1a0020a4 <create_xdir>:
{
1a0020a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0020a8:	4607      	mov	r7, r0
1a0020aa:	4688      	mov	r8, r1
	mem_set(dirb, 0, 2 * SZDIRE);
1a0020ac:	2240      	movs	r2, #64	; 0x40
1a0020ae:	2100      	movs	r1, #0
1a0020b0:	f7fe fbbc 	bl	1a00082c <mem_set>
	dirb[0 * SZDIRE + XDIR_Type] = 0x85;	/* 85 entry */
1a0020b4:	2385      	movs	r3, #133	; 0x85
1a0020b6:	703b      	strb	r3, [r7, #0]
	dirb[1 * SZDIRE + XDIR_Type] = 0xC0;	/* C0 entry */
1a0020b8:	23c0      	movs	r3, #192	; 0xc0
1a0020ba:	f887 3020 	strb.w	r3, [r7, #32]
	nlen = nc1 = 0; wc = 1;
1a0020be:	2501      	movs	r5, #1
1a0020c0:	2600      	movs	r6, #0
1a0020c2:	46b1      	mov	r9, r6
	i = SZDIRE * 2;	/* Top of C1 entries */
1a0020c4:	2440      	movs	r4, #64	; 0x40
1a0020c6:	e017      	b.n	1a0020f8 <create_xdir+0x54>
			st_word(dirb + i, wc); 		/* Store it */
1a0020c8:	4629      	mov	r1, r5
1a0020ca:	1938      	adds	r0, r7, r4
1a0020cc:	f7fe fb84 	bl	1a0007d8 <st_word>
			i += 2;
1a0020d0:	3402      	adds	r4, #2
		} while (i % SZDIRE != 0);
1a0020d2:	f014 0f1f 	tst.w	r4, #31
1a0020d6:	d008      	beq.n	1a0020ea <create_xdir+0x46>
			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
1a0020d8:	2d00      	cmp	r5, #0
1a0020da:	d0f5      	beq.n	1a0020c8 <create_xdir+0x24>
1a0020dc:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
1a0020e0:	2d00      	cmp	r5, #0
1a0020e2:	d0f1      	beq.n	1a0020c8 <create_xdir+0x24>
1a0020e4:	3601      	adds	r6, #1
1a0020e6:	b2f6      	uxtb	r6, r6
1a0020e8:	e7ee      	b.n	1a0020c8 <create_xdir+0x24>
		nc1++;
1a0020ea:	f109 0301 	add.w	r3, r9, #1
1a0020ee:	b2db      	uxtb	r3, r3
	} while (lfn[nlen]);	/* Fill next entry if any char follows */
1a0020f0:	f838 2016 	ldrh.w	r2, [r8, r6, lsl #1]
1a0020f4:	b13a      	cbz	r2, 1a002106 <create_xdir+0x62>
		nc1++;
1a0020f6:	4699      	mov	r9, r3
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
1a0020f8:	1c63      	adds	r3, r4, #1
1a0020fa:	22c1      	movs	r2, #193	; 0xc1
1a0020fc:	553a      	strb	r2, [r7, r4]
1a0020fe:	2200      	movs	r2, #0
1a002100:	54fa      	strb	r2, [r7, r3]
1a002102:	3402      	adds	r4, #2
1a002104:	e7e8      	b.n	1a0020d8 <create_xdir+0x34>
	dirb[XDIR_NumName] = nlen;		/* Set name length */
1a002106:	f887 6023 	strb.w	r6, [r7, #35]	; 0x23
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
1a00210a:	f109 0902 	add.w	r9, r9, #2
1a00210e:	f887 9001 	strb.w	r9, [r7, #1]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
1a002112:	4640      	mov	r0, r8
1a002114:	f7ff ffac 	bl	1a002070 <xname_sum>
1a002118:	4601      	mov	r1, r0
1a00211a:	f107 0024 	add.w	r0, r7, #36	; 0x24
1a00211e:	f7fe fb5b 	bl	1a0007d8 <st_word>
}
1a002122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a002126:	Address 0x000000001a002126 is out of bounds.


1a002128 <cmp_lfn>:
{
1a002128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00212c:	4681      	mov	r9, r0
1a00212e:	4688      	mov	r8, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
1a002130:	f101 001a 	add.w	r0, r1, #26
1a002134:	f7fe fb1a 	bl	1a00076c <ld_word>
1a002138:	bbb8      	cbnz	r0, 1a0021aa <cmp_lfn+0x82>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
1a00213a:	f898 5000 	ldrb.w	r5, [r8]
1a00213e:	f005 053f 	and.w	r5, r5, #63	; 0x3f
1a002142:	3d01      	subs	r5, #1
1a002144:	eb05 0345 	add.w	r3, r5, r5, lsl #1
1a002148:	eb05 0583 	add.w	r5, r5, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1a00214c:	2701      	movs	r7, #1
1a00214e:	2400      	movs	r4, #0
1a002150:	e006      	b.n	1a002160 <cmp_lfn+0x38>
				return 0;					/* Not matched */
1a002152:	2000      	movs	r0, #0
1a002154:	e02a      	b.n	1a0021ac <cmp_lfn+0x84>
			if (uc != 0xFFFF) return 0;		/* Check filler */
1a002156:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a00215a:	4298      	cmp	r0, r3
1a00215c:	d128      	bne.n	1a0021b0 <cmp_lfn+0x88>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1a00215e:	3401      	adds	r4, #1
1a002160:	2c0c      	cmp	r4, #12
1a002162:	d817      	bhi.n	1a002194 <cmp_lfn+0x6c>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
1a002164:	4b16      	ldr	r3, [pc, #88]	; (1a0021c0 <cmp_lfn+0x98>)
1a002166:	5d18      	ldrb	r0, [r3, r4]
1a002168:	4440      	add	r0, r8
1a00216a:	f7fe faff 	bl	1a00076c <ld_word>
1a00216e:	4606      	mov	r6, r0
		if (wc != 0) {
1a002170:	2f00      	cmp	r7, #0
1a002172:	d0f0      	beq.n	1a002156 <cmp_lfn+0x2e>
			if (i >= FF_MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
1a002174:	2dfe      	cmp	r5, #254	; 0xfe
1a002176:	d8ec      	bhi.n	1a002152 <cmp_lfn+0x2a>
1a002178:	f000 fe02 	bl	1a002d80 <ff_wtoupper>
1a00217c:	4607      	mov	r7, r0
1a00217e:	f105 0a01 	add.w	sl, r5, #1
1a002182:	f839 0015 	ldrh.w	r0, [r9, r5, lsl #1]
1a002186:	f000 fdfb 	bl	1a002d80 <ff_wtoupper>
1a00218a:	4287      	cmp	r7, r0
1a00218c:	d1e1      	bne.n	1a002152 <cmp_lfn+0x2a>
			wc = uc;
1a00218e:	4637      	mov	r7, r6
			if (i >= FF_MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
1a002190:	4655      	mov	r5, sl
1a002192:	e7e4      	b.n	1a00215e <cmp_lfn+0x36>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
1a002194:	f898 3000 	ldrb.w	r3, [r8]
1a002198:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00219c:	d00a      	beq.n	1a0021b4 <cmp_lfn+0x8c>
1a00219e:	b15f      	cbz	r7, 1a0021b8 <cmp_lfn+0x90>
1a0021a0:	f839 3015 	ldrh.w	r3, [r9, r5, lsl #1]
1a0021a4:	b953      	cbnz	r3, 1a0021bc <cmp_lfn+0x94>
	return 1;		/* The part of LFN matched */
1a0021a6:	2001      	movs	r0, #1
1a0021a8:	e000      	b.n	1a0021ac <cmp_lfn+0x84>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
1a0021aa:	2000      	movs	r0, #0
}
1a0021ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (uc != 0xFFFF) return 0;		/* Check filler */
1a0021b0:	2000      	movs	r0, #0
1a0021b2:	e7fb      	b.n	1a0021ac <cmp_lfn+0x84>
	return 1;		/* The part of LFN matched */
1a0021b4:	2001      	movs	r0, #1
1a0021b6:	e7f9      	b.n	1a0021ac <cmp_lfn+0x84>
1a0021b8:	2001      	movs	r0, #1
1a0021ba:	e7f7      	b.n	1a0021ac <cmp_lfn+0x84>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
1a0021bc:	2000      	movs	r0, #0
1a0021be:	e7f5      	b.n	1a0021ac <cmp_lfn+0x84>
1a0021c0:	1a0059e4 	.word	0x1a0059e4

1a0021c4 <dir_find>:
{
1a0021c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0021c8:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
1a0021ca:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
1a0021cc:	2100      	movs	r1, #0
1a0021ce:	f7ff fa3f 	bl	1a001650 <dir_sdi>
	if (res != FR_OK) return res;
1a0021d2:	4606      	mov	r6, r0
1a0021d4:	2800      	cmp	r0, #0
1a0021d6:	f040 80ab 	bne.w	1a002330 <dir_find+0x16c>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1a0021da:	783b      	ldrb	r3, [r7, #0]
1a0021dc:	2b04      	cmp	r3, #4
1a0021de:	d006      	beq.n	1a0021ee <dir_find+0x2a>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
1a0021e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0021e4:	64e3      	str	r3, [r4, #76]	; 0x4c
1a0021e6:	f04f 09ff 	mov.w	r9, #255	; 0xff
1a0021ea:	46c8      	mov	r8, r9
1a0021ec:	e046      	b.n	1a00227c <dir_find+0xb8>
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
1a0021ee:	68f8      	ldr	r0, [r7, #12]
1a0021f0:	f7ff ff3e 	bl	1a002070 <xname_sum>
1a0021f4:	4683      	mov	fp, r0
		while ((res = dir_read_file(dp)) == FR_OK) {	/* Read an item */
1a0021f6:	e020      	b.n	1a00223a <dir_find+0x76>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
1a0021f8:	6938      	ldr	r0, [r7, #16]
1a0021fa:	4440      	add	r0, r8
1a0021fc:	f7fe fab6 	bl	1a00076c <ld_word>
1a002200:	f000 fdbe 	bl	1a002d80 <ff_wtoupper>
1a002204:	4682      	mov	sl, r0
1a002206:	68fb      	ldr	r3, [r7, #12]
1a002208:	f833 0019 	ldrh.w	r0, [r3, r9, lsl #1]
1a00220c:	f000 fdb8 	bl	1a002d80 <ff_wtoupper>
1a002210:	4582      	cmp	sl, r0
1a002212:	d10c      	bne.n	1a00222e <dir_find+0x6a>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
1a002214:	3d01      	subs	r5, #1
1a002216:	b2ed      	uxtb	r5, r5
1a002218:	f108 0802 	add.w	r8, r8, #2
1a00221c:	f109 0901 	add.w	r9, r9, #1
1a002220:	b12d      	cbz	r5, 1a00222e <dir_find+0x6a>
				if ((di % SZDIRE) == 0) di += 2;
1a002222:	f018 0f1f 	tst.w	r8, #31
1a002226:	d1e7      	bne.n	1a0021f8 <dir_find+0x34>
1a002228:	f108 0802 	add.w	r8, r8, #2
1a00222c:	e7e4      	b.n	1a0021f8 <dir_find+0x34>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
1a00222e:	b925      	cbnz	r5, 1a00223a <dir_find+0x76>
1a002230:	68fb      	ldr	r3, [r7, #12]
1a002232:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
1a002236:	2b00      	cmp	r3, #0
1a002238:	d07a      	beq.n	1a002330 <dir_find+0x16c>
		while ((res = dir_read_file(dp)) == FR_OK) {	/* Read an item */
1a00223a:	2100      	movs	r1, #0
1a00223c:	4620      	mov	r0, r4
1a00223e:	f7ff fd1a 	bl	1a001c76 <dir_read>
1a002242:	4606      	mov	r6, r0
1a002244:	2800      	cmp	r0, #0
1a002246:	d173      	bne.n	1a002330 <dir_find+0x16c>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
1a002248:	693d      	ldr	r5, [r7, #16]
1a00224a:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a00224e:	f7fe fa8d 	bl	1a00076c <ld_word>
1a002252:	4558      	cmp	r0, fp
1a002254:	d1f1      	bne.n	1a00223a <dir_find+0x76>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
1a002256:	f895 5023 	ldrb.w	r5, [r5, #35]	; 0x23
1a00225a:	f04f 0900 	mov.w	r9, #0
1a00225e:	f04f 0840 	mov.w	r8, #64	; 0x40
1a002262:	e7dd      	b.n	1a002220 <dir_find+0x5c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
1a002264:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a002268:	64e3      	str	r3, [r4, #76]	; 0x4c
1a00226a:	f04f 08ff 	mov.w	r8, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
1a00226e:	2100      	movs	r1, #0
1a002270:	4620      	mov	r0, r4
1a002272:	f7ff fbf5 	bl	1a001a60 <dir_next>
	} while (res == FR_OK);
1a002276:	4606      	mov	r6, r0
1a002278:	2800      	cmp	r0, #0
1a00227a:	d159      	bne.n	1a002330 <dir_find+0x16c>
		res = move_window(fs, dp->sect);
1a00227c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a00227e:	4638      	mov	r0, r7
1a002280:	f7fe fd3e 	bl	1a000d00 <move_window>
		if (res != FR_OK) break;
1a002284:	4606      	mov	r6, r0
1a002286:	2800      	cmp	r0, #0
1a002288:	d152      	bne.n	1a002330 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
1a00228a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
1a00228c:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1a00228e:	2b00      	cmp	r3, #0
1a002290:	d04d      	beq.n	1a00232e <dir_find+0x16a>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
1a002292:	7ae9      	ldrb	r1, [r5, #11]
1a002294:	f001 023f 	and.w	r2, r1, #63	; 0x3f
1a002298:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
1a00229a:	2be5      	cmp	r3, #229	; 0xe5
1a00229c:	d0e2      	beq.n	1a002264 <dir_find+0xa0>
1a00229e:	f011 0f08 	tst.w	r1, #8
1a0022a2:	d001      	beq.n	1a0022a8 <dir_find+0xe4>
1a0022a4:	2a0f      	cmp	r2, #15
1a0022a6:	d1dd      	bne.n	1a002264 <dir_find+0xa0>
			if (a == AM_LFN) {			/* An LFN entry is found */
1a0022a8:	2a0f      	cmp	r2, #15
1a0022aa:	d019      	beq.n	1a0022e0 <dir_find+0x11c>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
1a0022ac:	f1b8 0f00 	cmp.w	r8, #0
1a0022b0:	d104      	bne.n	1a0022bc <dir_find+0xf8>
1a0022b2:	4628      	mov	r0, r5
1a0022b4:	f7fe fc43 	bl	1a000b3e <sum_sfn>
1a0022b8:	4548      	cmp	r0, r9
1a0022ba:	d039      	beq.n	1a002330 <dir_find+0x16c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
1a0022bc:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
1a0022c0:	f013 0f01 	tst.w	r3, #1
1a0022c4:	d106      	bne.n	1a0022d4 <dir_find+0x110>
1a0022c6:	220b      	movs	r2, #11
1a0022c8:	f104 0140 	add.w	r1, r4, #64	; 0x40
1a0022cc:	4628      	mov	r0, r5
1a0022ce:	f7fe fab2 	bl	1a000836 <mem_cmp>
1a0022d2:	b368      	cbz	r0, 1a002330 <dir_find+0x16c>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
1a0022d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0022d8:	64e3      	str	r3, [r4, #76]	; 0x4c
1a0022da:	f04f 08ff 	mov.w	r8, #255	; 0xff
1a0022de:	e7c6      	b.n	1a00226e <dir_find+0xaa>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
1a0022e0:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
1a0022e4:	f012 0f40 	tst.w	r2, #64	; 0x40
1a0022e8:	d1c1      	bne.n	1a00226e <dir_find+0xaa>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
1a0022ea:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0022ee:	d006      	beq.n	1a0022fe <dir_find+0x13a>
						sum = dp->dir[LDIR_Chksum];
1a0022f0:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
1a0022f4:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
1a0022f8:	6b22      	ldr	r2, [r4, #48]	; 0x30
1a0022fa:	64e2      	str	r2, [r4, #76]	; 0x4c
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
1a0022fc:	4698      	mov	r8, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
1a0022fe:	4543      	cmp	r3, r8
1a002300:	d002      	beq.n	1a002308 <dir_find+0x144>
1a002302:	f04f 08ff 	mov.w	r8, #255	; 0xff
1a002306:	e7b2      	b.n	1a00226e <dir_find+0xaa>
1a002308:	7b6b      	ldrb	r3, [r5, #13]
1a00230a:	454b      	cmp	r3, r9
1a00230c:	d002      	beq.n	1a002314 <dir_find+0x150>
1a00230e:	f04f 08ff 	mov.w	r8, #255	; 0xff
1a002312:	e7ac      	b.n	1a00226e <dir_find+0xaa>
1a002314:	4629      	mov	r1, r5
1a002316:	68f8      	ldr	r0, [r7, #12]
1a002318:	f7ff ff06 	bl	1a002128 <cmp_lfn>
1a00231c:	b120      	cbz	r0, 1a002328 <dir_find+0x164>
1a00231e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
1a002322:	fa5f f888 	uxtb.w	r8, r8
1a002326:	e7a2      	b.n	1a00226e <dir_find+0xaa>
1a002328:	f04f 08ff 	mov.w	r8, #255	; 0xff
1a00232c:	e79f      	b.n	1a00226e <dir_find+0xaa>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1a00232e:	2604      	movs	r6, #4
}
1a002330:	4630      	mov	r0, r6
1a002332:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a002336 <follow_path>:
{
1a002336:	b530      	push	{r4, r5, lr}
1a002338:	b083      	sub	sp, #12
1a00233a:	4604      	mov	r4, r0
1a00233c:	9101      	str	r1, [sp, #4]
	FATFS *fs = dp->obj.fs;
1a00233e:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
1a002340:	e001      	b.n	1a002346 <follow_path+0x10>
1a002342:	3301      	adds	r3, #1
1a002344:	9301      	str	r3, [sp, #4]
1a002346:	9b01      	ldr	r3, [sp, #4]
1a002348:	781a      	ldrb	r2, [r3, #0]
1a00234a:	2a2f      	cmp	r2, #47	; 0x2f
1a00234c:	d0f9      	beq.n	1a002342 <follow_path+0xc>
1a00234e:	2a5c      	cmp	r2, #92	; 0x5c
1a002350:	d0f7      	beq.n	1a002342 <follow_path+0xc>
		dp->obj.sclust = 0;					/* Start from root directory */
1a002352:	2200      	movs	r2, #0
1a002354:	60a2      	str	r2, [r4, #8]
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
1a002356:	61e2      	str	r2, [r4, #28]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
1a002358:	781b      	ldrb	r3, [r3, #0]
1a00235a:	2b1f      	cmp	r3, #31
1a00235c:	d81f      	bhi.n	1a00239e <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
1a00235e:	2380      	movs	r3, #128	; 0x80
1a002360:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
		res = dir_sdi(dp, 0);
1a002364:	4611      	mov	r1, r2
1a002366:	4620      	mov	r0, r4
1a002368:	f7ff f972 	bl	1a001650 <dir_sdi>
1a00236c:	4603      	mov	r3, r0
}
1a00236e:	4618      	mov	r0, r3
1a002370:	b003      	add	sp, #12
1a002372:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
1a002374:	2804      	cmp	r0, #4
1a002376:	d1fa      	bne.n	1a00236e <follow_path+0x38>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
1a002378:	f012 0f04 	tst.w	r2, #4
1a00237c:	d1f7      	bne.n	1a00236e <follow_path+0x38>
1a00237e:	2305      	movs	r3, #5
1a002380:	e7f5      	b.n	1a00236e <follow_path+0x38>
				dp->obj.c_scl = dp->obj.sclust;
1a002382:	68a3      	ldr	r3, [r4, #8]
1a002384:	6223      	str	r3, [r4, #32]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
1a002386:	6923      	ldr	r3, [r4, #16]
1a002388:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a00238c:	79e2      	ldrb	r2, [r4, #7]
1a00238e:	4313      	orrs	r3, r2
1a002390:	6263      	str	r3, [r4, #36]	; 0x24
				dp->obj.c_ofs = dp->blk_ofs;
1a002392:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
1a002394:	62a3      	str	r3, [r4, #40]	; 0x28
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
1a002396:	4621      	mov	r1, r4
1a002398:	4628      	mov	r0, r5
1a00239a:	f7fe fbf6 	bl	1a000b8a <init_alloc_info>
			res = create_name(dp, &path);	/* Get a segment name of the path */
1a00239e:	a901      	add	r1, sp, #4
1a0023a0:	4620      	mov	r0, r4
1a0023a2:	f7ff fd43 	bl	1a001e2c <create_name>
			if (res != FR_OK) break;
1a0023a6:	4603      	mov	r3, r0
1a0023a8:	2800      	cmp	r0, #0
1a0023aa:	d1e0      	bne.n	1a00236e <follow_path+0x38>
			res = dir_find(dp);				/* Find an object with the segment name */
1a0023ac:	4620      	mov	r0, r4
1a0023ae:	f7ff ff09 	bl	1a0021c4 <dir_find>
			ns = dp->fn[NSFLAG];
1a0023b2:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
			if (res != FR_OK) {				/* Failed to find the object */
1a0023b6:	4603      	mov	r3, r0
1a0023b8:	2800      	cmp	r0, #0
1a0023ba:	d1db      	bne.n	1a002374 <follow_path+0x3e>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
1a0023bc:	f012 0f04 	tst.w	r2, #4
1a0023c0:	d1d5      	bne.n	1a00236e <follow_path+0x38>
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
1a0023c2:	79a3      	ldrb	r3, [r4, #6]
1a0023c4:	f013 0f10 	tst.w	r3, #16
1a0023c8:	d00d      	beq.n	1a0023e6 <follow_path+0xb0>
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
1a0023ca:	782b      	ldrb	r3, [r5, #0]
1a0023cc:	2b04      	cmp	r3, #4
1a0023ce:	d0d8      	beq.n	1a002382 <follow_path+0x4c>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
1a0023d0:	f105 0138 	add.w	r1, r5, #56	; 0x38
1a0023d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a0023d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
1a0023da:	4419      	add	r1, r3
1a0023dc:	4628      	mov	r0, r5
1a0023de:	f7fe faaf 	bl	1a000940 <ld_clust>
1a0023e2:	60a0      	str	r0, [r4, #8]
1a0023e4:	e7db      	b.n	1a00239e <follow_path+0x68>
				res = FR_NO_PATH; break;
1a0023e6:	2305      	movs	r3, #5
1a0023e8:	e7c1      	b.n	1a00236e <follow_path+0x38>
1a0023ea:	Address 0x000000001a0023ea is out of bounds.


1a0023ec <dir_register>:
{
1a0023ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0023f0:	b099      	sub	sp, #100	; 0x64
	FATFS *fs = dp->obj.fs;
1a0023f2:	6805      	ldr	r5, [r0, #0]
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
1a0023f4:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
1a0023f8:	f013 0fa0 	tst.w	r3, #160	; 0xa0
1a0023fc:	f040 80ed 	bne.w	1a0025da <dir_register+0x1ee>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
1a002400:	2400      	movs	r4, #0
1a002402:	68eb      	ldr	r3, [r5, #12]
1a002404:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
1a002408:	b10b      	cbz	r3, 1a00240e <dir_register+0x22>
1a00240a:	3401      	adds	r4, #1
1a00240c:	e7f9      	b.n	1a002402 <dir_register+0x16>
1a00240e:	4606      	mov	r6, r0
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1a002410:	782b      	ldrb	r3, [r5, #0]
1a002412:	2b04      	cmp	r3, #4
1a002414:	d011      	beq.n	1a00243a <dir_register+0x4e>
	mem_cpy(sn, dp->fn, 12);
1a002416:	f100 0740 	add.w	r7, r0, #64	; 0x40
1a00241a:	220c      	movs	r2, #12
1a00241c:	4639      	mov	r1, r7
1a00241e:	a815      	add	r0, sp, #84	; 0x54
1a002420:	f7fe f9fb 	bl	1a00081a <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
1a002424:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
1a002428:	f013 0f01 	tst.w	r3, #1
1a00242c:	d079      	beq.n	1a002522 <dir_register+0x136>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
1a00242e:	2340      	movs	r3, #64	; 0x40
1a002430:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
1a002434:	f04f 0801 	mov.w	r8, #1
1a002438:	e05a      	b.n	1a0024f0 <dir_register+0x104>
		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
1a00243a:	340e      	adds	r4, #14
1a00243c:	4b6b      	ldr	r3, [pc, #428]	; (1a0025ec <dir_register+0x200>)
1a00243e:	fba3 3404 	umull	r3, r4, r3, r4
1a002442:	08e4      	lsrs	r4, r4, #3
		res = dir_alloc(dp, nent);		/* Allocate entries */
1a002444:	1ca1      	adds	r1, r4, #2
1a002446:	f7ff fc8b 	bl	1a001d60 <dir_alloc>
		if (res != FR_OK) return res;
1a00244a:	4681      	mov	r9, r0
1a00244c:	2800      	cmp	r0, #0
1a00244e:	d17e      	bne.n	1a00254e <dir_register+0x162>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
1a002450:	6b33      	ldr	r3, [r6, #48]	; 0x30
1a002452:	f104 6400 	add.w	r4, r4, #134217728	; 0x8000000
1a002456:	3401      	adds	r4, #1
1a002458:	eba3 1444 	sub.w	r4, r3, r4, lsl #5
1a00245c:	64f4      	str	r4, [r6, #76]	; 0x4c
		if (dp->obj.stat & 4) {			/* Has the directory been stretched? */
1a00245e:	79f3      	ldrb	r3, [r6, #7]
1a002460:	f013 0f04 	tst.w	r3, #4
1a002464:	d013      	beq.n	1a00248e <dir_register+0xa2>
			dp->obj.stat &= ~4;
1a002466:	f023 0304 	bic.w	r3, r3, #4
1a00246a:	71f3      	strb	r3, [r6, #7]
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
1a00246c:	4630      	mov	r0, r6
1a00246e:	f7ff f81f 	bl	1a0014b0 <fill_first_frag>
			if (res != FR_OK) return res;
1a002472:	b108      	cbz	r0, 1a002478 <dir_register+0x8c>
1a002474:	4681      	mov	r9, r0
1a002476:	e06a      	b.n	1a00254e <dir_register+0x162>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
1a002478:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00247c:	6b71      	ldr	r1, [r6, #52]	; 0x34
1a00247e:	4630      	mov	r0, r6
1a002480:	f7fe fffe 	bl	1a001480 <fill_last_frag>
			if (res != FR_OK) return res;
1a002484:	2800      	cmp	r0, #0
1a002486:	f040 80ab 	bne.w	1a0025e0 <dir_register+0x1f4>
			if (dp->obj.sclust != 0) {		/* Is it a sub directory? */
1a00248a:	68b3      	ldr	r3, [r6, #8]
1a00248c:	b923      	cbnz	r3, 1a002498 <dir_register+0xac>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
1a00248e:	68e9      	ldr	r1, [r5, #12]
1a002490:	6928      	ldr	r0, [r5, #16]
1a002492:	f7ff fe07 	bl	1a0020a4 <create_xdir>
		return FR_OK;
1a002496:	e05a      	b.n	1a00254e <dir_register+0x162>
				res = load_obj_xdir(&dj, &dp->obj);	/* Load the object status */
1a002498:	4631      	mov	r1, r6
1a00249a:	4668      	mov	r0, sp
1a00249c:	f7ff fbce 	bl	1a001c3c <load_obj_xdir>
				if (res != FR_OK) return res;
1a0024a0:	4603      	mov	r3, r0
1a0024a2:	b108      	cbz	r0, 1a0024a8 <dir_register+0xbc>
1a0024a4:	4699      	mov	r9, r3
1a0024a6:	e052      	b.n	1a00254e <dir_register+0x162>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);			/* Increase the directory size by cluster size */
1a0024a8:	8969      	ldrh	r1, [r5, #10]
1a0024aa:	0249      	lsls	r1, r1, #9
1a0024ac:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
1a0024b0:	1857      	adds	r7, r2, r1
1a0024b2:	f143 0800 	adc.w	r8, r3, #0
1a0024b6:	e9c6 7804 	strd	r7, r8, [r6, #16]
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);	/* Update the allocation status */
1a0024ba:	6928      	ldr	r0, [r5, #16]
1a0024bc:	463a      	mov	r2, r7
1a0024be:	4643      	mov	r3, r8
1a0024c0:	3038      	adds	r0, #56	; 0x38
1a0024c2:	f7fe f997 	bl	1a0007f4 <st_qword>
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
1a0024c6:	6928      	ldr	r0, [r5, #16]
1a0024c8:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
1a0024cc:	3028      	adds	r0, #40	; 0x28
1a0024ce:	f7fe f991 	bl	1a0007f4 <st_qword>
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
1a0024d2:	79f3      	ldrb	r3, [r6, #7]
1a0024d4:	692a      	ldr	r2, [r5, #16]
1a0024d6:	f043 0301 	orr.w	r3, r3, #1
1a0024da:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
				res = store_xdir(&dj);				/* Store the object status */
1a0024de:	4668      	mov	r0, sp
1a0024e0:	f7ff fc74 	bl	1a001dcc <store_xdir>
				if (res != FR_OK) return res;
1a0024e4:	4603      	mov	r3, r0
1a0024e6:	2800      	cmp	r0, #0
1a0024e8:	d0d1      	beq.n	1a00248e <dir_register+0xa2>
1a0024ea:	e7db      	b.n	1a0024a4 <dir_register+0xb8>
		for (n = 1; n < 100; n++) {
1a0024ec:	f108 0801 	add.w	r8, r8, #1
1a0024f0:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
1a0024f4:	d80b      	bhi.n	1a00250e <dir_register+0x122>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
1a0024f6:	4643      	mov	r3, r8
1a0024f8:	68ea      	ldr	r2, [r5, #12]
1a0024fa:	a915      	add	r1, sp, #84	; 0x54
1a0024fc:	4638      	mov	r0, r7
1a0024fe:	f7fe fac3 	bl	1a000a88 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
1a002502:	4630      	mov	r0, r6
1a002504:	f7ff fe5e 	bl	1a0021c4 <dir_find>
			if (res != FR_OK) break;
1a002508:	4681      	mov	r9, r0
1a00250a:	2800      	cmp	r0, #0
1a00250c:	d0ee      	beq.n	1a0024ec <dir_register+0x100>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
1a00250e:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
1a002512:	d067      	beq.n	1a0025e4 <dir_register+0x1f8>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
1a002514:	f1b9 0f04 	cmp.w	r9, #4
1a002518:	d119      	bne.n	1a00254e <dir_register+0x162>
		dp->fn[NSFLAG] = sn[NSFLAG];
1a00251a:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
1a00251e:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
1a002522:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
1a002526:	f013 0f02 	tst.w	r3, #2
1a00252a:	d014      	beq.n	1a002556 <dir_register+0x16a>
1a00252c:	340c      	adds	r4, #12
1a00252e:	4b30      	ldr	r3, [pc, #192]	; (1a0025f0 <dir_register+0x204>)
1a002530:	fba3 3404 	umull	r3, r4, r3, r4
1a002534:	08a4      	lsrs	r4, r4, #2
1a002536:	3401      	adds	r4, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
1a002538:	4621      	mov	r1, r4
1a00253a:	4630      	mov	r0, r6
1a00253c:	f7ff fc10 	bl	1a001d60 <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
1a002540:	4681      	mov	r9, r0
1a002542:	b908      	cbnz	r0, 1a002548 <dir_register+0x15c>
1a002544:	3c01      	subs	r4, #1
1a002546:	d108      	bne.n	1a00255a <dir_register+0x16e>
	if (res == FR_OK) {
1a002548:	f1b9 0f00 	cmp.w	r9, #0
1a00254c:	d02b      	beq.n	1a0025a6 <dir_register+0x1ba>
}
1a00254e:	4648      	mov	r0, r9
1a002550:	b019      	add	sp, #100	; 0x64
1a002552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
1a002556:	2401      	movs	r4, #1
1a002558:	e7ee      	b.n	1a002538 <dir_register+0x14c>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
1a00255a:	6b31      	ldr	r1, [r6, #48]	; 0x30
1a00255c:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
1a002560:	4630      	mov	r0, r6
1a002562:	f7ff f875 	bl	1a001650 <dir_sdi>
		if (res == FR_OK) {
1a002566:	4681      	mov	r9, r0
1a002568:	2800      	cmp	r0, #0
1a00256a:	d1ed      	bne.n	1a002548 <dir_register+0x15c>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
1a00256c:	4638      	mov	r0, r7
1a00256e:	f7fe fae6 	bl	1a000b3e <sum_sfn>
1a002572:	4680      	mov	r8, r0
				res = move_window(fs, dp->sect);
1a002574:	6bb1      	ldr	r1, [r6, #56]	; 0x38
1a002576:	4628      	mov	r0, r5
1a002578:	f7fe fbc2 	bl	1a000d00 <move_window>
				if (res != FR_OK) break;
1a00257c:	4681      	mov	r9, r0
1a00257e:	2800      	cmp	r0, #0
1a002580:	d1e2      	bne.n	1a002548 <dir_register+0x15c>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
1a002582:	4643      	mov	r3, r8
1a002584:	b2e2      	uxtb	r2, r4
1a002586:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
1a002588:	68e8      	ldr	r0, [r5, #12]
1a00258a:	f7fe fa41 	bl	1a000a10 <put_lfn>
				fs->wflag = 1;
1a00258e:	2301      	movs	r3, #1
1a002590:	70eb      	strb	r3, [r5, #3]
				res = dir_next(dp, 0);	/* Next entry */
1a002592:	2100      	movs	r1, #0
1a002594:	4630      	mov	r0, r6
1a002596:	f7ff fa63 	bl	1a001a60 <dir_next>
			} while (res == FR_OK && --nent);
1a00259a:	4681      	mov	r9, r0
1a00259c:	2800      	cmp	r0, #0
1a00259e:	d1d3      	bne.n	1a002548 <dir_register+0x15c>
1a0025a0:	3c01      	subs	r4, #1
1a0025a2:	d1e7      	bne.n	1a002574 <dir_register+0x188>
1a0025a4:	e7d0      	b.n	1a002548 <dir_register+0x15c>
		res = move_window(fs, dp->sect);
1a0025a6:	6bb1      	ldr	r1, [r6, #56]	; 0x38
1a0025a8:	4628      	mov	r0, r5
1a0025aa:	f7fe fba9 	bl	1a000d00 <move_window>
		if (res == FR_OK) {
1a0025ae:	4681      	mov	r9, r0
1a0025b0:	2800      	cmp	r0, #0
1a0025b2:	d1cc      	bne.n	1a00254e <dir_register+0x162>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
1a0025b4:	2220      	movs	r2, #32
1a0025b6:	2100      	movs	r1, #0
1a0025b8:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
1a0025ba:	f7fe f937 	bl	1a00082c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
1a0025be:	220b      	movs	r2, #11
1a0025c0:	4639      	mov	r1, r7
1a0025c2:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
1a0025c4:	f7fe f929 	bl	1a00081a <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
1a0025c8:	f896 304b 	ldrb.w	r3, [r6, #75]	; 0x4b
1a0025cc:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
1a0025ce:	f003 0318 	and.w	r3, r3, #24
1a0025d2:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
1a0025d4:	2301      	movs	r3, #1
1a0025d6:	70eb      	strb	r3, [r5, #3]
1a0025d8:	e7b9      	b.n	1a00254e <dir_register+0x162>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
1a0025da:	f04f 0906 	mov.w	r9, #6
1a0025de:	e7b6      	b.n	1a00254e <dir_register+0x162>
			if (res != FR_OK) return res;
1a0025e0:	4681      	mov	r9, r0
1a0025e2:	e7b4      	b.n	1a00254e <dir_register+0x162>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
1a0025e4:	f04f 0907 	mov.w	r9, #7
1a0025e8:	e7b1      	b.n	1a00254e <dir_register+0x162>
1a0025ea:	bf00      	nop
1a0025ec:	88888889 	.word	0x88888889
1a0025f0:	4ec4ec4f 	.word	0x4ec4ec4f

1a0025f4 <sync_fs>:
{
1a0025f4:	b570      	push	{r4, r5, r6, lr}
1a0025f6:	4604      	mov	r4, r0
	res = sync_window(fs);
1a0025f8:	f7fe fb5a 	bl	1a000cb0 <sync_window>
	if (res == FR_OK) {
1a0025fc:	4605      	mov	r5, r0
1a0025fe:	b948      	cbnz	r0, 1a002614 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
1a002600:	7823      	ldrb	r3, [r4, #0]
1a002602:	2b03      	cmp	r3, #3
1a002604:	d008      	beq.n	1a002618 <sync_fs+0x24>
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
1a002606:	2200      	movs	r2, #0
1a002608:	4611      	mov	r1, r2
1a00260a:	7860      	ldrb	r0, [r4, #1]
1a00260c:	f001 f8ac 	bl	1a003768 <disk_ioctl>
1a002610:	b100      	cbz	r0, 1a002614 <sync_fs+0x20>
1a002612:	2501      	movs	r5, #1
}
1a002614:	4628      	mov	r0, r5
1a002616:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
1a002618:	7923      	ldrb	r3, [r4, #4]
1a00261a:	2b01      	cmp	r3, #1
1a00261c:	d1f3      	bne.n	1a002606 <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
1a00261e:	f104 0638 	add.w	r6, r4, #56	; 0x38
1a002622:	f44f 7200 	mov.w	r2, #512	; 0x200
1a002626:	2100      	movs	r1, #0
1a002628:	4630      	mov	r0, r6
1a00262a:	f7fe f8ff 	bl	1a00082c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
1a00262e:	f64a 2155 	movw	r1, #43605	; 0xaa55
1a002632:	f204 2036 	addw	r0, r4, #566	; 0x236
1a002636:	f7fe f8cf 	bl	1a0007d8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
1a00263a:	490f      	ldr	r1, [pc, #60]	; (1a002678 <sync_fs+0x84>)
1a00263c:	4630      	mov	r0, r6
1a00263e:	f7fe f8cf 	bl	1a0007e0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
1a002642:	490e      	ldr	r1, [pc, #56]	; (1a00267c <sync_fs+0x88>)
1a002644:	f504 7007 	add.w	r0, r4, #540	; 0x21c
1a002648:	f7fe f8ca 	bl	1a0007e0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
1a00264c:	69a1      	ldr	r1, [r4, #24]
1a00264e:	f504 7008 	add.w	r0, r4, #544	; 0x220
1a002652:	f7fe f8c5 	bl	1a0007e0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
1a002656:	6961      	ldr	r1, [r4, #20]
1a002658:	f504 7009 	add.w	r0, r4, #548	; 0x224
1a00265c:	f7fe f8c0 	bl	1a0007e0 <st_dword>
			fs->winsect = fs->volbase + 1;
1a002660:	6a62      	ldr	r2, [r4, #36]	; 0x24
1a002662:	3201      	adds	r2, #1
1a002664:	6362      	str	r2, [r4, #52]	; 0x34
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
1a002666:	2301      	movs	r3, #1
1a002668:	4631      	mov	r1, r6
1a00266a:	7860      	ldrb	r0, [r4, #1]
1a00266c:	f001 f86c 	bl	1a003748 <disk_write>
			fs->fsi_flag = 0;
1a002670:	2300      	movs	r3, #0
1a002672:	7123      	strb	r3, [r4, #4]
1a002674:	e7c7      	b.n	1a002606 <sync_fs+0x12>
1a002676:	bf00      	nop
1a002678:	41615252 	.word	0x41615252
1a00267c:	61417272 	.word	0x61417272

1a002680 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
1a002680:	b510      	push	{r4, lr}
1a002682:	b084      	sub	sp, #16
1a002684:	9001      	str	r0, [sp, #4]
1a002686:	9100      	str	r1, [sp, #0]
1a002688:	4614      	mov	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
1a00268a:	9103      	str	r1, [sp, #12]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
1a00268c:	a803      	add	r0, sp, #12
1a00268e:	f7fe fa93 	bl	1a000bb8 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
1a002692:	2800      	cmp	r0, #0
1a002694:	db17      	blt.n	1a0026c6 <f_mount+0x46>
	cfs = FatFs[vol];					/* Pointer to fs object */
1a002696:	4b0d      	ldr	r3, [pc, #52]	; (1a0026cc <f_mount+0x4c>)
1a002698:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]

	if (cfs) {
1a00269c:	b10b      	cbz	r3, 1a0026a2 <f_mount+0x22>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
1a00269e:	2200      	movs	r2, #0
1a0026a0:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
1a0026a2:	9b01      	ldr	r3, [sp, #4]
1a0026a4:	b10b      	cbz	r3, 1a0026aa <f_mount+0x2a>
		fs->fs_type = 0;				/* Clear new fs object */
1a0026a6:	2200      	movs	r2, #0
1a0026a8:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
1a0026aa:	4b08      	ldr	r3, [pc, #32]	; (1a0026cc <f_mount+0x4c>)
1a0026ac:	9a01      	ldr	r2, [sp, #4]
1a0026ae:	f843 2020 	str.w	r2, [r3, r0, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
1a0026b2:	b914      	cbnz	r4, 1a0026ba <f_mount+0x3a>
1a0026b4:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
1a0026b6:	b004      	add	sp, #16
1a0026b8:	bd10      	pop	{r4, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
1a0026ba:	2200      	movs	r2, #0
1a0026bc:	a901      	add	r1, sp, #4
1a0026be:	4668      	mov	r0, sp
1a0026c0:	f7fe fb7e 	bl	1a000dc0 <find_volume>
	LEAVE_FF(fs, res);
1a0026c4:	e7f7      	b.n	1a0026b6 <f_mount+0x36>
	if (vol < 0) return FR_INVALID_DRIVE;
1a0026c6:	200b      	movs	r0, #11
1a0026c8:	e7f5      	b.n	1a0026b6 <f_mount+0x36>
1a0026ca:	bf00      	nop
1a0026cc:	10000328 	.word	0x10000328

1a0026d0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
1a0026d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0026d4:	b099      	sub	sp, #100	; 0x64
1a0026d6:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
1a0026d8:	2800      	cmp	r0, #0
1a0026da:	f000 814e 	beq.w	1a00297a <f_open+0x2aa>
1a0026de:	4604      	mov	r4, r0
1a0026e0:	4616      	mov	r6, r2

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
1a0026e2:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
1a0026e6:	463a      	mov	r2, r7
1a0026e8:	a903      	add	r1, sp, #12
1a0026ea:	a801      	add	r0, sp, #4
1a0026ec:	f7fe fb68 	bl	1a000dc0 <find_volume>
	if (res == FR_OK) {
1a0026f0:	4605      	mov	r5, r0
1a0026f2:	b130      	cbz	r0, 1a002702 <f_open+0x32>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
1a0026f4:	b10d      	cbz	r5, 1a0026fa <f_open+0x2a>
1a0026f6:	2300      	movs	r3, #0
1a0026f8:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
1a0026fa:	4628      	mov	r0, r5
1a0026fc:	b019      	add	sp, #100	; 0x64
1a0026fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dj.obj.fs = fs;
1a002702:	9b03      	ldr	r3, [sp, #12]
1a002704:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
1a002706:	9901      	ldr	r1, [sp, #4]
1a002708:	a804      	add	r0, sp, #16
1a00270a:	f7ff fe14 	bl	1a002336 <follow_path>
		if (res == FR_OK) {
1a00270e:	4605      	mov	r5, r0
1a002710:	b918      	cbnz	r0, 1a00271a <f_open+0x4a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
1a002712:	f99d 305b 	ldrsb.w	r3, [sp, #91]	; 0x5b
1a002716:	2b00      	cmp	r3, #0
1a002718:	db47      	blt.n	1a0027aa <f_open+0xda>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
1a00271a:	f016 0f1c 	tst.w	r6, #28
1a00271e:	f000 808a 	beq.w	1a002836 <f_open+0x166>
			if (res != FR_OK) {					/* No file, create new */
1a002722:	2d00      	cmp	r5, #0
1a002724:	d048      	beq.n	1a0027b8 <f_open+0xe8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
1a002726:	2d04      	cmp	r5, #4
1a002728:	d041      	beq.n	1a0027ae <f_open+0xde>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
1a00272a:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
1a00272e:	2d00      	cmp	r5, #0
1a002730:	f040 8090 	bne.w	1a002854 <f_open+0x184>
1a002734:	f017 0f08 	tst.w	r7, #8
1a002738:	f000 808c 	beq.w	1a002854 <f_open+0x184>
				if (fs->fs_type == FS_EXFAT) {
1a00273c:	9803      	ldr	r0, [sp, #12]
1a00273e:	7803      	ldrb	r3, [r0, #0]
1a002740:	2b04      	cmp	r3, #4
1a002742:	d043      	beq.n	1a0027cc <f_open+0xfc>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
1a002744:	9e13      	ldr	r6, [sp, #76]	; 0x4c
1a002746:	4631      	mov	r1, r6
1a002748:	f7fe f8fa 	bl	1a000940 <ld_clust>
1a00274c:	4680      	mov	r8, r0
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
1a00274e:	f000 ffbb 	bl	1a0036c8 <get_fattime>
1a002752:	4601      	mov	r1, r0
1a002754:	f106 000e 	add.w	r0, r6, #14
1a002758:	f7fe f842 	bl	1a0007e0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
1a00275c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a00275e:	2220      	movs	r2, #32
1a002760:	72da      	strb	r2, [r3, #11]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
1a002762:	2200      	movs	r2, #0
1a002764:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a002766:	9803      	ldr	r0, [sp, #12]
1a002768:	f7fe f8fd 	bl	1a000966 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
1a00276c:	2100      	movs	r1, #0
1a00276e:	9813      	ldr	r0, [sp, #76]	; 0x4c
1a002770:	301c      	adds	r0, #28
1a002772:	f7fe f835 	bl	1a0007e0 <st_dword>
					fs->wflag = 1;
1a002776:	9b03      	ldr	r3, [sp, #12]
1a002778:	2201      	movs	r2, #1
1a00277a:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
1a00277c:	f1b8 0f00 	cmp.w	r8, #0
1a002780:	d068      	beq.n	1a002854 <f_open+0x184>
						dw = fs->winsect;
1a002782:	9b03      	ldr	r3, [sp, #12]
1a002784:	6b5e      	ldr	r6, [r3, #52]	; 0x34
						res = remove_chain(&dj.obj, cl, 0);
1a002786:	2200      	movs	r2, #0
1a002788:	4641      	mov	r1, r8
1a00278a:	a804      	add	r0, sp, #16
1a00278c:	f7ff f8a0 	bl	1a0018d0 <remove_chain>
						if (res == FR_OK) {
1a002790:	4605      	mov	r5, r0
1a002792:	2800      	cmp	r0, #0
1a002794:	d15e      	bne.n	1a002854 <f_open+0x184>
							res = move_window(fs, dw);
1a002796:	4631      	mov	r1, r6
1a002798:	9803      	ldr	r0, [sp, #12]
1a00279a:	f7fe fab1 	bl	1a000d00 <move_window>
1a00279e:	4605      	mov	r5, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
1a0027a0:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
1a0027a4:	9a03      	ldr	r2, [sp, #12]
1a0027a6:	6153      	str	r3, [r2, #20]
1a0027a8:	e054      	b.n	1a002854 <f_open+0x184>
				res = FR_INVALID_NAME;
1a0027aa:	2506      	movs	r5, #6
1a0027ac:	e7b5      	b.n	1a00271a <f_open+0x4a>
					res = dir_register(&dj);
1a0027ae:	a804      	add	r0, sp, #16
1a0027b0:	f7ff fe1c 	bl	1a0023ec <dir_register>
1a0027b4:	4605      	mov	r5, r0
1a0027b6:	e7b8      	b.n	1a00272a <f_open+0x5a>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
1a0027b8:	f89d 3016 	ldrb.w	r3, [sp, #22]
1a0027bc:	f013 0f11 	tst.w	r3, #17
1a0027c0:	d147      	bne.n	1a002852 <f_open+0x182>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
1a0027c2:	f016 0f04 	tst.w	r6, #4
1a0027c6:	d0b2      	beq.n	1a00272e <f_open+0x5e>
1a0027c8:	2508      	movs	r5, #8
1a0027ca:	e043      	b.n	1a002854 <f_open+0x184>
					fp->obj.fs = fs;
1a0027cc:	6020      	str	r0, [r4, #0]
					init_alloc_info(fs, &fp->obj);
1a0027ce:	4621      	mov	r1, r4
1a0027d0:	9803      	ldr	r0, [sp, #12]
1a0027d2:	f7fe f9da 	bl	1a000b8a <init_alloc_info>
					mem_set(fs->dirbuf + 2, 0, 30);		/* Clear 85 entry except for NumSec */
1a0027d6:	9b03      	ldr	r3, [sp, #12]
1a0027d8:	6918      	ldr	r0, [r3, #16]
1a0027da:	221e      	movs	r2, #30
1a0027dc:	2100      	movs	r1, #0
1a0027de:	3002      	adds	r0, #2
1a0027e0:	f7fe f824 	bl	1a00082c <mem_set>
					mem_set(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
1a0027e4:	9b03      	ldr	r3, [sp, #12]
1a0027e6:	6918      	ldr	r0, [r3, #16]
1a0027e8:	221a      	movs	r2, #26
1a0027ea:	2100      	movs	r1, #0
1a0027ec:	3026      	adds	r0, #38	; 0x26
1a0027ee:	f7fe f81d 	bl	1a00082c <mem_set>
					fs->dirbuf[XDIR_Attr] = AM_ARC;
1a0027f2:	9b03      	ldr	r3, [sp, #12]
1a0027f4:	691a      	ldr	r2, [r3, #16]
1a0027f6:	2120      	movs	r1, #32
1a0027f8:	7111      	strb	r1, [r2, #4]
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
1a0027fa:	691d      	ldr	r5, [r3, #16]
1a0027fc:	f000 ff64 	bl	1a0036c8 <get_fattime>
1a002800:	4601      	mov	r1, r0
1a002802:	f105 0008 	add.w	r0, r5, #8
1a002806:	f7fd ffeb 	bl	1a0007e0 <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 1;
1a00280a:	9b03      	ldr	r3, [sp, #12]
1a00280c:	691b      	ldr	r3, [r3, #16]
1a00280e:	2201      	movs	r2, #1
1a002810:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					res = store_xdir(&dj);
1a002814:	a804      	add	r0, sp, #16
1a002816:	f7ff fad9 	bl	1a001dcc <store_xdir>
					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
1a00281a:	4605      	mov	r5, r0
1a00281c:	b9d0      	cbnz	r0, 1a002854 <f_open+0x184>
1a00281e:	68a1      	ldr	r1, [r4, #8]
1a002820:	b1c1      	cbz	r1, 1a002854 <f_open+0x184>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
1a002822:	2200      	movs	r2, #0
1a002824:	4620      	mov	r0, r4
1a002826:	f7ff f853 	bl	1a0018d0 <remove_chain>
1a00282a:	4605      	mov	r5, r0
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
1a00282c:	68a3      	ldr	r3, [r4, #8]
1a00282e:	3b01      	subs	r3, #1
1a002830:	9a03      	ldr	r2, [sp, #12]
1a002832:	6153      	str	r3, [r2, #20]
1a002834:	e00e      	b.n	1a002854 <f_open+0x184>
			if (res == FR_OK) {					/* Is the object exsiting? */
1a002836:	b96d      	cbnz	r5, 1a002854 <f_open+0x184>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
1a002838:	f89d 3016 	ldrb.w	r3, [sp, #22]
1a00283c:	f013 0f10 	tst.w	r3, #16
1a002840:	d14e      	bne.n	1a0028e0 <f_open+0x210>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
1a002842:	f016 0f02 	tst.w	r6, #2
1a002846:	d005      	beq.n	1a002854 <f_open+0x184>
1a002848:	f013 0f01 	tst.w	r3, #1
1a00284c:	d002      	beq.n	1a002854 <f_open+0x184>
						res = FR_DENIED;
1a00284e:	2507      	movs	r5, #7
1a002850:	e00b      	b.n	1a00286a <f_open+0x19a>
					res = FR_DENIED;
1a002852:	2507      	movs	r5, #7
		if (res == FR_OK) {
1a002854:	b94d      	cbnz	r5, 1a00286a <f_open+0x19a>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
1a002856:	f017 0f08 	tst.w	r7, #8
1a00285a:	d001      	beq.n	1a002860 <f_open+0x190>
1a00285c:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
1a002860:	9b03      	ldr	r3, [sp, #12]
1a002862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1a002864:	64a3      	str	r3, [r4, #72]	; 0x48
			fp->dir_ptr = dj.dir;
1a002866:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a002868:	64e3      	str	r3, [r4, #76]	; 0x4c
		if (res == FR_OK) {
1a00286a:	2d00      	cmp	r5, #0
1a00286c:	f47f af42 	bne.w	1a0026f4 <f_open+0x24>
			if (fs->fs_type == FS_EXFAT) {
1a002870:	9803      	ldr	r0, [sp, #12]
1a002872:	7803      	ldrb	r3, [r0, #0]
1a002874:	2b04      	cmp	r3, #4
1a002876:	d035      	beq.n	1a0028e4 <f_open+0x214>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
1a002878:	9e13      	ldr	r6, [sp, #76]	; 0x4c
1a00287a:	4631      	mov	r1, r6
1a00287c:	f7fe f860 	bl	1a000940 <ld_clust>
1a002880:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
1a002882:	f106 001c 	add.w	r0, r6, #28
1a002886:	f7fd ff76 	bl	1a000776 <ld_dword>
1a00288a:	6120      	str	r0, [r4, #16]
1a00288c:	2300      	movs	r3, #0
1a00288e:	6163      	str	r3, [r4, #20]
			fp->obj.fs = fs;	 	/* Validate the file object */
1a002890:	9b03      	ldr	r3, [sp, #12]
1a002892:	6023      	str	r3, [r4, #0]
			fp->obj.id = fs->id;
1a002894:	88db      	ldrh	r3, [r3, #6]
1a002896:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
1a002898:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
1a00289c:	2100      	movs	r1, #0
1a00289e:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
1a0028a2:	6461      	str	r1, [r4, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
1a0028a4:	2200      	movs	r2, #0
1a0028a6:	2300      	movs	r3, #0
1a0028a8:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
			mem_set(fp->buf, 0, FF_MAX_SS);	/* Clear sector buffer */
1a0028ac:	f104 0a50 	add.w	sl, r4, #80	; 0x50
1a0028b0:	f44f 7200 	mov.w	r2, #512	; 0x200
1a0028b4:	4650      	mov	r0, sl
1a0028b6:	f7fd ffb9 	bl	1a00082c <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
1a0028ba:	f017 0f20 	tst.w	r7, #32
1a0028be:	f43f af19 	beq.w	1a0026f4 <f_open+0x24>
1a0028c2:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
1a0028c6:	ea56 0307 	orrs.w	r3, r6, r7
1a0028ca:	f43f af13 	beq.w	1a0026f4 <f_open+0x24>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
1a0028ce:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
1a0028d2:	9b03      	ldr	r3, [sp, #12]
1a0028d4:	f8b3 b00a 	ldrh.w	fp, [r3, #10]
1a0028d8:	ea4f 2b4b 	mov.w	fp, fp, lsl #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
1a0028dc:	68a1      	ldr	r1, [r4, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
1a0028de:	e017      	b.n	1a002910 <f_open+0x240>
					res = FR_NO_FILE;
1a0028e0:	2504      	movs	r5, #4
1a0028e2:	e7c2      	b.n	1a00286a <f_open+0x19a>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
1a0028e4:	9b06      	ldr	r3, [sp, #24]
1a0028e6:	6223      	str	r3, [r4, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
1a0028e8:	9b08      	ldr	r3, [sp, #32]
1a0028ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0028ee:	f89d 2017 	ldrb.w	r2, [sp, #23]
1a0028f2:	4313      	orrs	r3, r2
1a0028f4:	6263      	str	r3, [r4, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
1a0028f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1a0028f8:	62a3      	str	r3, [r4, #40]	; 0x28
				init_alloc_info(fs, &fp->obj);
1a0028fa:	4621      	mov	r1, r4
1a0028fc:	f7fe f945 	bl	1a000b8a <init_alloc_info>
1a002900:	e7c6      	b.n	1a002890 <f_open+0x1c0>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
1a002902:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
1a002906:	d013      	beq.n	1a002930 <f_open+0x260>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
1a002908:	ebb6 0608 	subs.w	r6, r6, r8
1a00290c:	eb67 0709 	sbc.w	r7, r7, r9
1a002910:	b985      	cbnz	r5, 1a002934 <f_open+0x264>
1a002912:	46d8      	mov	r8, fp
1a002914:	f04f 0900 	mov.w	r9, #0
1a002918:	45b9      	cmp	r9, r7
1a00291a:	bf08      	it	eq
1a00291c:	45b3      	cmpeq	fp, r6
1a00291e:	d209      	bcs.n	1a002934 <f_open+0x264>
					clst = get_fat(&fp->obj, clst);
1a002920:	4620      	mov	r0, r4
1a002922:	f7fe fdde 	bl	1a0014e2 <get_fat>
1a002926:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
1a002928:	2801      	cmp	r0, #1
1a00292a:	d8ea      	bhi.n	1a002902 <f_open+0x232>
1a00292c:	2502      	movs	r5, #2
1a00292e:	e7e8      	b.n	1a002902 <f_open+0x232>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
1a002930:	2501      	movs	r5, #1
1a002932:	e7e9      	b.n	1a002908 <f_open+0x238>
				fp->clust = clst;
1a002934:	6421      	str	r1, [r4, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
1a002936:	2d00      	cmp	r5, #0
1a002938:	f47f aedc 	bne.w	1a0026f4 <f_open+0x24>
1a00293c:	f3c6 0208 	ubfx	r2, r6, #0, #9
1a002940:	2300      	movs	r3, #0
1a002942:	4313      	orrs	r3, r2
1a002944:	f43f aed6 	beq.w	1a0026f4 <f_open+0x24>
					if ((sc = clst2sect(fs, clst)) == 0) {
1a002948:	f8dd 800c 	ldr.w	r8, [sp, #12]
1a00294c:	4640      	mov	r0, r8
1a00294e:	f7fd ffeb 	bl	1a000928 <clst2sect>
1a002952:	4602      	mov	r2, r0
1a002954:	b908      	cbnz	r0, 1a00295a <f_open+0x28a>
						res = FR_INT_ERR;
1a002956:	2502      	movs	r5, #2
1a002958:	e6cd      	b.n	1a0026f6 <f_open+0x26>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
1a00295a:	0a73      	lsrs	r3, r6, #9
1a00295c:	ea43 53c7 	orr.w	r3, r3, r7, lsl #23
1a002960:	441a      	add	r2, r3
1a002962:	6462      	str	r2, [r4, #68]	; 0x44
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
1a002964:	2301      	movs	r3, #1
1a002966:	4651      	mov	r1, sl
1a002968:	f898 0001 	ldrb.w	r0, [r8, #1]
1a00296c:	f000 fedc 	bl	1a003728 <disk_read>
1a002970:	2800      	cmp	r0, #0
1a002972:	f43f aebf 	beq.w	1a0026f4 <f_open+0x24>
1a002976:	2501      	movs	r5, #1
1a002978:	e6bd      	b.n	1a0026f6 <f_open+0x26>
	if (!fp) return FR_INVALID_OBJECT;
1a00297a:	2509      	movs	r5, #9
1a00297c:	e6bd      	b.n	1a0026fa <f_open+0x2a>

1a00297e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
1a00297e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002982:	b087      	sub	sp, #28
1a002984:	4604      	mov	r4, r0
1a002986:	468b      	mov	fp, r1
1a002988:	4615      	mov	r5, r2
1a00298a:	469a      	mov	sl, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
1a00298c:	2300      	movs	r3, #0
1a00298e:	f8ca 3000 	str.w	r3, [sl]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
1a002992:	9003      	str	r0, [sp, #12]
1a002994:	a905      	add	r1, sp, #20
1a002996:	f7fe f967 	bl	1a000c68 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
1a00299a:	9002      	str	r0, [sp, #8]
1a00299c:	2800      	cmp	r0, #0
1a00299e:	f040 80ee 	bne.w	1a002b7e <f_write+0x200>
1a0029a2:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
1a0029a6:	9302      	str	r3, [sp, #8]
1a0029a8:	2b00      	cmp	r3, #0
1a0029aa:	f040 80e8 	bne.w	1a002b7e <f_write+0x200>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
1a0029ae:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a0029b2:	f013 0f02 	tst.w	r3, #2
1a0029b6:	f000 80fc 	beq.w	1a002bb2 <f_write+0x234>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
1a0029ba:	9b05      	ldr	r3, [sp, #20]
1a0029bc:	781b      	ldrb	r3, [r3, #0]
1a0029be:	2b04      	cmp	r3, #4
1a0029c0:	f000 808a 	beq.w	1a002ad8 <f_write+0x15a>
1a0029c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a0029c6:	42eb      	cmn	r3, r5
1a0029c8:	f0c0 8086 	bcc.w	1a002ad8 <f_write+0x15a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
1a0029cc:	43dd      	mvns	r5, r3
1a0029ce:	e083      	b.n	1a002ad8 <f_write+0x15a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
			if (csect == 0) {				/* On the cluster boundary? */
				if (fp->fptr == 0) {		/* On the top of the file? */
					clst = fp->obj.sclust;	/* Follow from the origin */
					if (clst == 0) {		/* If no cluster is allocated, */
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
1a0029d0:	2100      	movs	r1, #0
1a0029d2:	9803      	ldr	r0, [sp, #12]
1a0029d4:	f7fe fe96 	bl	1a001704 <create_chain>
1a0029d8:	e09c      	b.n	1a002b14 <f_write+0x196>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
1a0029da:	6c21      	ldr	r1, [r4, #64]	; 0x40
1a0029dc:	9803      	ldr	r0, [sp, #12]
1a0029de:	f7fe fe91 	bl	1a001704 <create_chain>
1a0029e2:	e097      	b.n	1a002b14 <f_write+0x196>
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
				if (clst == 1) ABORT(fs, FR_INT_ERR);
1a0029e4:	2302      	movs	r3, #2
1a0029e6:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
1a0029ea:	9302      	str	r3, [sp, #8]
1a0029ec:	e0c7      	b.n	1a002b7e <f_write+0x200>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
1a0029ee:	2301      	movs	r3, #1
1a0029f0:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
1a0029f4:	9302      	str	r3, [sp, #8]
1a0029f6:	e0c2      	b.n	1a002b7e <f_write+0x200>
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
1a0029f8:	2301      	movs	r3, #1
1a0029fa:	6c62      	ldr	r2, [r4, #68]	; 0x44
1a0029fc:	f104 0150 	add.w	r1, r4, #80	; 0x50
1a002a00:	9805      	ldr	r0, [sp, #20]
1a002a02:	7840      	ldrb	r0, [r0, #1]
1a002a04:	f000 fea0 	bl	1a003748 <disk_write>
1a002a08:	b930      	cbnz	r0, 1a002a18 <f_write+0x9a>
				fp->flag &= (BYTE)~FA_DIRTY;
1a002a0a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a002a0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1a002a12:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
1a002a16:	e08f      	b.n	1a002b38 <f_write+0x1ba>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
1a002a18:	2301      	movs	r3, #1
1a002a1a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
1a002a1e:	9302      	str	r3, [sp, #8]
1a002a20:	e0ad      	b.n	1a002b7e <f_write+0x200>
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
			if (sect == 0) ABORT(fs, FR_INT_ERR);
1a002a22:	2302      	movs	r3, #2
1a002a24:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
1a002a28:	9302      	str	r3, [sp, #8]
1a002a2a:	e0a8      	b.n	1a002b7e <f_write+0x200>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
1a002a2c:	6c61      	ldr	r1, [r4, #68]	; 0x44
1a002a2e:	1bc9      	subs	r1, r1, r7
1a002a30:	4541      	cmp	r1, r8
1a002a32:	d302      	bcc.n	1a002a3a <f_write+0xbc>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
1a002a34:	ea4f 2848 	mov.w	r8, r8, lsl #9
				continue;
1a002a38:	e030      	b.n	1a002a9c <f_write+0x11e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
1a002a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
1a002a3e:	eb0b 2141 	add.w	r1, fp, r1, lsl #9
1a002a42:	f104 0050 	add.w	r0, r4, #80	; 0x50
1a002a46:	f7fd fee8 	bl	1a00081a <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
1a002a4a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a002a4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1a002a52:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
1a002a56:	e7ed      	b.n	1a002a34 <f_write+0xb6>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
1a002a58:	6c63      	ldr	r3, [r4, #68]	; 0x44
1a002a5a:	42bb      	cmp	r3, r7
1a002a5c:	d008      	beq.n	1a002a70 <f_write+0xf2>
				fp->fptr < fp->obj.objsize &&
1a002a5e:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
1a002a62:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
1a002a66:	4299      	cmp	r1, r3
1a002a68:	bf08      	it	eq
1a002a6a:	4290      	cmpeq	r0, r2
1a002a6c:	f0c0 808b 	bcc.w	1a002b86 <f_write+0x208>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
			}
#endif
			fp->sect = sect;
1a002a70:	6467      	str	r7, [r4, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
1a002a72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a002a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
1a002a78:	f5c3 7800 	rsb	r8, r3, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
1a002a7c:	4545      	cmp	r5, r8
1a002a7e:	d200      	bcs.n	1a002a82 <f_write+0x104>
1a002a80:	46a8      	mov	r8, r5
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
1a002a82:	f104 0050 	add.w	r0, r4, #80	; 0x50
1a002a86:	4642      	mov	r2, r8
1a002a88:	4659      	mov	r1, fp
1a002a8a:	4418      	add	r0, r3
1a002a8c:	f7fd fec5 	bl	1a00081a <mem_cpy>
		fp->flag |= FA_DIRTY;
1a002a90:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a002a94:	f063 037f 	orn	r3, r3, #127	; 0x7f
1a002a98:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
1a002a9c:	eba5 0508 	sub.w	r5, r5, r8
1a002aa0:	f8da 3000 	ldr.w	r3, [sl]
1a002aa4:	4443      	add	r3, r8
1a002aa6:	f8ca 3000 	str.w	r3, [sl]
1a002aaa:	44c3      	add	fp, r8
1a002aac:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
1a002ab0:	eb12 0008 	adds.w	r0, r2, r8
1a002ab4:	f143 0100 	adc.w	r1, r3, #0
1a002ab8:	4602      	mov	r2, r0
1a002aba:	460b      	mov	r3, r1
1a002abc:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
1a002ac0:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
1a002ac4:	4617      	mov	r7, r2
1a002ac6:	461e      	mov	r6, r3
1a002ac8:	428b      	cmp	r3, r1
1a002aca:	bf08      	it	eq
1a002acc:	4282      	cmpeq	r2, r0
1a002ace:	d201      	bcs.n	1a002ad4 <f_write+0x156>
1a002ad0:	4607      	mov	r7, r0
1a002ad2:	460e      	mov	r6, r1
1a002ad4:	6127      	str	r7, [r4, #16]
1a002ad6:	6166      	str	r6, [r4, #20]
	for ( ;  btw;							/* Repeat until all data written */
1a002ad8:	2d00      	cmp	r5, #0
1a002ada:	d063      	beq.n	1a002ba4 <f_write+0x226>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
1a002adc:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
1a002ae0:	f3c2 0108 	ubfx	r1, r2, #0, #9
1a002ae4:	9100      	str	r1, [sp, #0]
1a002ae6:	2100      	movs	r1, #0
1a002ae8:	9101      	str	r1, [sp, #4]
1a002aea:	e9dd 0100 	ldrd	r0, r1, [sp]
1a002aee:	4301      	orrs	r1, r0
1a002af0:	d1bf      	bne.n	1a002a72 <f_write+0xf4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
1a002af2:	ea4f 2952 	mov.w	r9, r2, lsr #9
1a002af6:	ea49 59c3 	orr.w	r9, r9, r3, lsl #23
1a002afa:	9905      	ldr	r1, [sp, #20]
1a002afc:	8949      	ldrh	r1, [r1, #10]
1a002afe:	3901      	subs	r1, #1
			if (csect == 0) {				/* On the cluster boundary? */
1a002b00:	ea19 0901 	ands.w	r9, r9, r1
1a002b04:	d113      	bne.n	1a002b2e <f_write+0x1b0>
				if (fp->fptr == 0) {		/* On the top of the file? */
1a002b06:	4313      	orrs	r3, r2
1a002b08:	f47f af67 	bne.w	1a0029da <f_write+0x5c>
					clst = fp->obj.sclust;	/* Follow from the origin */
1a002b0c:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
1a002b0e:	2800      	cmp	r0, #0
1a002b10:	f43f af5e 	beq.w	1a0029d0 <f_write+0x52>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
1a002b14:	2800      	cmp	r0, #0
1a002b16:	d045      	beq.n	1a002ba4 <f_write+0x226>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
1a002b18:	2801      	cmp	r0, #1
1a002b1a:	f43f af63 	beq.w	1a0029e4 <f_write+0x66>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
1a002b1e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a002b22:	f43f af64 	beq.w	1a0029ee <f_write+0x70>
				fp->clust = clst;			/* Update current cluster */
1a002b26:	6420      	str	r0, [r4, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
1a002b28:	68a3      	ldr	r3, [r4, #8]
1a002b2a:	b903      	cbnz	r3, 1a002b2e <f_write+0x1b0>
1a002b2c:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
1a002b2e:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
1a002b32:	2b00      	cmp	r3, #0
1a002b34:	f6ff af60 	blt.w	1a0029f8 <f_write+0x7a>
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
1a002b38:	9e05      	ldr	r6, [sp, #20]
1a002b3a:	6c21      	ldr	r1, [r4, #64]	; 0x40
1a002b3c:	4630      	mov	r0, r6
1a002b3e:	f7fd fef3 	bl	1a000928 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
1a002b42:	4607      	mov	r7, r0
1a002b44:	2800      	cmp	r0, #0
1a002b46:	f43f af6c 	beq.w	1a002a22 <f_write+0xa4>
			sect += csect;
1a002b4a:	444f      	add	r7, r9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
1a002b4c:	ea4f 2855 	mov.w	r8, r5, lsr #9
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
1a002b50:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
1a002b54:	d380      	bcc.n	1a002a58 <f_write+0xda>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
1a002b56:	eb09 0308 	add.w	r3, r9, r8
1a002b5a:	8972      	ldrh	r2, [r6, #10]
1a002b5c:	4293      	cmp	r3, r2
1a002b5e:	d901      	bls.n	1a002b64 <f_write+0x1e6>
					cc = fs->csize - csect;
1a002b60:	eba2 0809 	sub.w	r8, r2, r9
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
1a002b64:	4643      	mov	r3, r8
1a002b66:	463a      	mov	r2, r7
1a002b68:	4659      	mov	r1, fp
1a002b6a:	7870      	ldrb	r0, [r6, #1]
1a002b6c:	f000 fdec 	bl	1a003748 <disk_write>
1a002b70:	2800      	cmp	r0, #0
1a002b72:	f43f af5b 	beq.w	1a002a2c <f_write+0xae>
1a002b76:	2301      	movs	r3, #1
1a002b78:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
1a002b7c:	9302      	str	r3, [sp, #8]
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
1a002b7e:	9802      	ldr	r0, [sp, #8]
1a002b80:	b007      	add	sp, #28
1a002b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
1a002b86:	2301      	movs	r3, #1
1a002b88:	463a      	mov	r2, r7
1a002b8a:	f104 0150 	add.w	r1, r4, #80	; 0x50
1a002b8e:	7870      	ldrb	r0, [r6, #1]
1a002b90:	f000 fdca 	bl	1a003728 <disk_read>
				fp->fptr < fp->obj.objsize &&
1a002b94:	2800      	cmp	r0, #0
1a002b96:	f43f af6b 	beq.w	1a002a70 <f_write+0xf2>
					ABORT(fs, FR_DISK_ERR);
1a002b9a:	2301      	movs	r3, #1
1a002b9c:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
1a002ba0:	9302      	str	r3, [sp, #8]
1a002ba2:	e7ec      	b.n	1a002b7e <f_write+0x200>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
1a002ba4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a002ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a002bac:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	LEAVE_FF(fs, FR_OK);
1a002bb0:	e7e5      	b.n	1a002b7e <f_write+0x200>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
1a002bb2:	2307      	movs	r3, #7
1a002bb4:	9302      	str	r3, [sp, #8]
1a002bb6:	e7e2      	b.n	1a002b7e <f_write+0x200>

1a002bb8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
1a002bb8:	b570      	push	{r4, r5, r6, lr}
1a002bba:	b096      	sub	sp, #88	; 0x58
1a002bbc:	4604      	mov	r4, r0
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
1a002bbe:	a915      	add	r1, sp, #84	; 0x54
1a002bc0:	f7fe f852 	bl	1a000c68 <validate>
	if (res == FR_OK) {
1a002bc4:	4603      	mov	r3, r0
1a002bc6:	b9a0      	cbnz	r0, 1a002bf2 <f_sync+0x3a>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
1a002bc8:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
1a002bcc:	f012 0f40 	tst.w	r2, #64	; 0x40
1a002bd0:	d00f      	beq.n	1a002bf2 <f_sync+0x3a>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
1a002bd2:	f012 0f80 	tst.w	r2, #128	; 0x80
1a002bd6:	d10f      	bne.n	1a002bf8 <f_sync+0x40>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
1a002bd8:	f000 fd76 	bl	1a0036c8 <get_fattime>
1a002bdc:	4606      	mov	r6, r0
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
1a002bde:	9815      	ldr	r0, [sp, #84]	; 0x54
1a002be0:	7803      	ldrb	r3, [r0, #0]
1a002be2:	2b04      	cmp	r3, #4
1a002be4:	d01a      	beq.n	1a002c1c <f_sync+0x64>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
1a002be6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
1a002be8:	f7fe f88a 	bl	1a000d00 <move_window>
				if (res == FR_OK) {
1a002bec:	4603      	mov	r3, r0
1a002bee:	2800      	cmp	r0, #0
1a002bf0:	d069      	beq.n	1a002cc6 <f_sync+0x10e>
			}
		}
	}

	LEAVE_FF(fs, res);
}
1a002bf2:	4618      	mov	r0, r3
1a002bf4:	b016      	add	sp, #88	; 0x58
1a002bf6:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
1a002bf8:	2301      	movs	r3, #1
1a002bfa:	6c62      	ldr	r2, [r4, #68]	; 0x44
1a002bfc:	f104 0150 	add.w	r1, r4, #80	; 0x50
1a002c00:	9815      	ldr	r0, [sp, #84]	; 0x54
1a002c02:	7840      	ldrb	r0, [r0, #1]
1a002c04:	f000 fda0 	bl	1a003748 <disk_write>
1a002c08:	2800      	cmp	r0, #0
1a002c0a:	f040 8083 	bne.w	1a002d14 <f_sync+0x15c>
				fp->flag &= (BYTE)~FA_DIRTY;
1a002c0e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a002c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1a002c16:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
1a002c1a:	e7dd      	b.n	1a002bd8 <f_sync+0x20>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
1a002c1c:	4620      	mov	r0, r4
1a002c1e:	f7fe fc47 	bl	1a0014b0 <fill_first_frag>
				if (res == FR_OK) {
1a002c22:	4603      	mov	r3, r0
1a002c24:	2800      	cmp	r0, #0
1a002c26:	d046      	beq.n	1a002cb6 <f_sync+0xfe>
				if (res == FR_OK) {
1a002c28:	2b00      	cmp	r3, #0
1a002c2a:	d1e2      	bne.n	1a002bf2 <f_sync+0x3a>
					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
1a002c2c:	4621      	mov	r1, r4
1a002c2e:	4668      	mov	r0, sp
1a002c30:	f7ff f804 	bl	1a001c3c <load_obj_xdir>
					if (res == FR_OK) {
1a002c34:	4603      	mov	r3, r0
1a002c36:	2800      	cmp	r0, #0
1a002c38:	d1db      	bne.n	1a002bf2 <f_sync+0x3a>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
1a002c3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a002c3c:	6919      	ldr	r1, [r3, #16]
1a002c3e:	790a      	ldrb	r2, [r1, #4]
1a002c40:	f042 0220 	orr.w	r2, r2, #32
1a002c44:	710a      	strb	r2, [r1, #4]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
1a002c46:	79e2      	ldrb	r2, [r4, #7]
1a002c48:	6919      	ldr	r1, [r3, #16]
1a002c4a:	f042 0201 	orr.w	r2, r2, #1
1a002c4e:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
1a002c52:	6918      	ldr	r0, [r3, #16]
1a002c54:	68a1      	ldr	r1, [r4, #8]
1a002c56:	3034      	adds	r0, #52	; 0x34
1a002c58:	f7fd fdc2 	bl	1a0007e0 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
1a002c5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a002c5e:	6918      	ldr	r0, [r3, #16]
1a002c60:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
1a002c64:	3038      	adds	r0, #56	; 0x38
1a002c66:	f7fd fdc5 	bl	1a0007f4 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
1a002c6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a002c6c:	6918      	ldr	r0, [r3, #16]
1a002c6e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
1a002c72:	3028      	adds	r0, #40	; 0x28
1a002c74:	f7fd fdbe 	bl	1a0007f4 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
1a002c78:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a002c7a:	6918      	ldr	r0, [r3, #16]
1a002c7c:	4631      	mov	r1, r6
1a002c7e:	300c      	adds	r0, #12
1a002c80:	f7fd fdae 	bl	1a0007e0 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
1a002c84:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a002c86:	691a      	ldr	r2, [r3, #16]
1a002c88:	2100      	movs	r1, #0
1a002c8a:	7551      	strb	r1, [r2, #21]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
1a002c8c:	6918      	ldr	r0, [r3, #16]
1a002c8e:	3010      	adds	r0, #16
1a002c90:	f7fd fda6 	bl	1a0007e0 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
1a002c94:	4668      	mov	r0, sp
1a002c96:	f7ff f899 	bl	1a001dcc <store_xdir>
						if (res == FR_OK) {
1a002c9a:	4603      	mov	r3, r0
1a002c9c:	2800      	cmp	r0, #0
1a002c9e:	d1a8      	bne.n	1a002bf2 <f_sync+0x3a>
							res = sync_fs(fs);
1a002ca0:	9815      	ldr	r0, [sp, #84]	; 0x54
1a002ca2:	f7ff fca7 	bl	1a0025f4 <sync_fs>
1a002ca6:	4603      	mov	r3, r0
							fp->flag &= (BYTE)~FA_MODIFIED;
1a002ca8:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
1a002cac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
1a002cb0:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
					FREE_NAMBUF();
1a002cb4:	e79d      	b.n	1a002bf2 <f_sync+0x3a>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
1a002cb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a002cba:	6c21      	ldr	r1, [r4, #64]	; 0x40
1a002cbc:	4620      	mov	r0, r4
1a002cbe:	f7fe fbdf 	bl	1a001480 <fill_last_frag>
1a002cc2:	4603      	mov	r3, r0
1a002cc4:	e7b0      	b.n	1a002c28 <f_sync+0x70>
					dir = fp->dir_ptr;
1a002cc6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
1a002cc8:	7aeb      	ldrb	r3, [r5, #11]
1a002cca:	f043 0320 	orr.w	r3, r3, #32
1a002cce:	72eb      	strb	r3, [r5, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
1a002cd0:	68a2      	ldr	r2, [r4, #8]
1a002cd2:	4629      	mov	r1, r5
1a002cd4:	6820      	ldr	r0, [r4, #0]
1a002cd6:	f7fd fe46 	bl	1a000966 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
1a002cda:	6921      	ldr	r1, [r4, #16]
1a002cdc:	f105 001c 	add.w	r0, r5, #28
1a002ce0:	f7fd fd7e 	bl	1a0007e0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
1a002ce4:	4631      	mov	r1, r6
1a002ce6:	f105 0016 	add.w	r0, r5, #22
1a002cea:	f7fd fd79 	bl	1a0007e0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
1a002cee:	2100      	movs	r1, #0
1a002cf0:	f105 0012 	add.w	r0, r5, #18
1a002cf4:	f7fd fd70 	bl	1a0007d8 <st_word>
					fs->wflag = 1;
1a002cf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a002cfa:	2201      	movs	r2, #1
1a002cfc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
1a002cfe:	9815      	ldr	r0, [sp, #84]	; 0x54
1a002d00:	f7ff fc78 	bl	1a0025f4 <sync_fs>
1a002d04:	4603      	mov	r3, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
1a002d06:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
1a002d0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
1a002d0e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
1a002d12:	e76e      	b.n	1a002bf2 <f_sync+0x3a>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
1a002d14:	2301      	movs	r3, #1
1a002d16:	e76c      	b.n	1a002bf2 <f_sync+0x3a>

1a002d18 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
1a002d18:	b510      	push	{r4, lr}
1a002d1a:	b082      	sub	sp, #8
1a002d1c:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
1a002d1e:	f7ff ff4b 	bl	1a002bb8 <f_sync>
	if (res == FR_OK)
1a002d22:	4603      	mov	r3, r0
1a002d24:	b110      	cbz	r0, 1a002d2c <f_close+0x14>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
1a002d26:	4618      	mov	r0, r3
1a002d28:	b002      	add	sp, #8
1a002d2a:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
1a002d2c:	a901      	add	r1, sp, #4
1a002d2e:	4620      	mov	r0, r4
1a002d30:	f7fd ff9a 	bl	1a000c68 <validate>
		if (res == FR_OK) {
1a002d34:	4603      	mov	r3, r0
1a002d36:	2800      	cmp	r0, #0
1a002d38:	d1f5      	bne.n	1a002d26 <f_close+0xe>
			fp->obj.fs = 0;	/* Invalidate file object */
1a002d3a:	2200      	movs	r2, #0
1a002d3c:	6022      	str	r2, [r4, #0]
1a002d3e:	e7f2      	b.n	1a002d26 <f_close+0xe>

1a002d40 <ff_uni2oem>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
1a002d40:	287f      	cmp	r0, #127	; 0x7f
1a002d42:	d801      	bhi.n	1a002d48 <ff_uni2oem+0x8>
		c = (WCHAR)uni;
1a002d44:	b280      	uxth	r0, r0
1a002d46:	4770      	bx	lr

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
1a002d48:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
1a002d4c:	d213      	bcs.n	1a002d76 <ff_uni2oem+0x36>
1a002d4e:	f240 3352 	movw	r3, #850	; 0x352
1a002d52:	4299      	cmp	r1, r3
1a002d54:	d001      	beq.n	1a002d5a <ff_uni2oem+0x1a>
	WCHAR c = 0;
1a002d56:	2000      	movs	r0, #0
1a002d58:	4770      	bx	lr
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
1a002d5a:	2300      	movs	r3, #0
1a002d5c:	2b7f      	cmp	r3, #127	; 0x7f
1a002d5e:	d807      	bhi.n	1a002d70 <ff_uni2oem+0x30>
1a002d60:	4a06      	ldr	r2, [pc, #24]	; (1a002d7c <ff_uni2oem+0x3c>)
1a002d62:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
1a002d66:	4282      	cmp	r2, r0
1a002d68:	d002      	beq.n	1a002d70 <ff_uni2oem+0x30>
1a002d6a:	3301      	adds	r3, #1
1a002d6c:	b29b      	uxth	r3, r3
1a002d6e:	e7f5      	b.n	1a002d5c <ff_uni2oem+0x1c>
			c = (c + 0x80) & 0xFF;
1a002d70:	3380      	adds	r3, #128	; 0x80
1a002d72:	b2d8      	uxtb	r0, r3
1a002d74:	4770      	bx	lr
	WCHAR c = 0;
1a002d76:	2000      	movs	r0, #0
		}
	}

	return c;
}
1a002d78:	4770      	bx	lr
1a002d7a:	bf00      	nop
1a002d7c:	1a005ce0 	.word	0x1a005ce0

1a002d80 <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
1a002d80:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
1a002d84:	d245      	bcs.n	1a002e12 <ff_wtoupper+0x92>
{
1a002d86:	b4f0      	push	{r4, r5, r6, r7}
		uc = (WORD)uni;
1a002d88:	b287      	uxth	r7, r0
		p = uc < 0x1000 ? cvt1 : cvt2;
1a002d8a:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
1a002d8e:	d201      	bcs.n	1a002d94 <ff_wtoupper+0x14>
1a002d90:	4b20      	ldr	r3, [pc, #128]	; (1a002e14 <ff_wtoupper+0x94>)
1a002d92:	e002      	b.n	1a002d9a <ff_wtoupper+0x1a>
1a002d94:	4b20      	ldr	r3, [pc, #128]	; (1a002e18 <ff_wtoupper+0x98>)
1a002d96:	e000      	b.n	1a002d9a <ff_wtoupper+0x1a>
		for (;;) {
			bc = *p++;								/* Get the block base */
			if (bc == 0 || uc < bc) break;			/* Not matched? */
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
1a002d98:	4633      	mov	r3, r6
			bc = *p++;								/* Get the block base */
1a002d9a:	881a      	ldrh	r2, [r3, #0]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
1a002d9c:	b1d2      	cbz	r2, 1a002dd4 <ff_wtoupper+0x54>
1a002d9e:	4297      	cmp	r7, r2
1a002da0:	d318      	bcc.n	1a002dd4 <ff_wtoupper+0x54>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
1a002da2:	1d1e      	adds	r6, r3, #4
1a002da4:	885b      	ldrh	r3, [r3, #2]
1a002da6:	0a19      	lsrs	r1, r3, #8
1a002da8:	b2db      	uxtb	r3, r3
			if (uc < bc + nc) {	/* In the block? */
1a002daa:	b284      	uxth	r4, r0
1a002dac:	189d      	adds	r5, r3, r2
1a002dae:	42ac      	cmp	r4, r5
1a002db0:	db04      	blt.n	1a002dbc <ff_wtoupper+0x3c>
				case 7: uc -= 80; break;			/* Shift -80 */
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
1a002db2:	2900      	cmp	r1, #0
1a002db4:	d1f0      	bne.n	1a002d98 <ff_wtoupper+0x18>
1a002db6:	eb06 0343 	add.w	r3, r6, r3, lsl #1
1a002dba:	e7ee      	b.n	1a002d9a <ff_wtoupper+0x1a>
				switch (cmd) {
1a002dbc:	2908      	cmp	r1, #8
1a002dbe:	d809      	bhi.n	1a002dd4 <ff_wtoupper+0x54>
1a002dc0:	e8df f001 	tbb	[pc, r1]
1a002dc4:	14110b05 	.word	0x14110b05
1a002dc8:	201d1a17 	.word	0x201d1a17
1a002dcc:	23          	.byte	0x23
1a002dcd:	00          	.byte	0x00
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
1a002dce:	1aa4      	subs	r4, r4, r2
1a002dd0:	f836 7014 	ldrh.w	r7, [r6, r4, lsl #1]
		}
		uni = uc;
1a002dd4:	4638      	mov	r0, r7
	}

	return uni;
}
1a002dd6:	bcf0      	pop	{r4, r5, r6, r7}
1a002dd8:	4770      	bx	lr
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
1a002dda:	1aba      	subs	r2, r7, r2
1a002ddc:	f002 0301 	and.w	r3, r2, #1
1a002de0:	1aff      	subs	r7, r7, r3
1a002de2:	b2bf      	uxth	r7, r7
1a002de4:	e7f6      	b.n	1a002dd4 <ff_wtoupper+0x54>
				case 2: uc -= 16; break;			/* Shift -16 */
1a002de6:	3f10      	subs	r7, #16
1a002de8:	b2bf      	uxth	r7, r7
1a002dea:	e7f3      	b.n	1a002dd4 <ff_wtoupper+0x54>
				case 3:	uc -= 32; break;			/* Shift -32 */
1a002dec:	3f20      	subs	r7, #32
1a002dee:	b2bf      	uxth	r7, r7
1a002df0:	e7f0      	b.n	1a002dd4 <ff_wtoupper+0x54>
				case 4:	uc -= 48; break;			/* Shift -48 */
1a002df2:	3f30      	subs	r7, #48	; 0x30
1a002df4:	b2bf      	uxth	r7, r7
1a002df6:	e7ed      	b.n	1a002dd4 <ff_wtoupper+0x54>
				case 5:	uc -= 26; break;			/* Shift -26 */
1a002df8:	3f1a      	subs	r7, #26
1a002dfa:	b2bf      	uxth	r7, r7
1a002dfc:	e7ea      	b.n	1a002dd4 <ff_wtoupper+0x54>
				case 6:	uc += 8; break;				/* Shift +8 */
1a002dfe:	3708      	adds	r7, #8
1a002e00:	b2bf      	uxth	r7, r7
1a002e02:	e7e7      	b.n	1a002dd4 <ff_wtoupper+0x54>
				case 7: uc -= 80; break;			/* Shift -80 */
1a002e04:	3f50      	subs	r7, #80	; 0x50
1a002e06:	b2bf      	uxth	r7, r7
1a002e08:	e7e4      	b.n	1a002dd4 <ff_wtoupper+0x54>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
1a002e0a:	f5a7 57e3 	sub.w	r7, r7, #7264	; 0x1c60
1a002e0e:	b2bf      	uxth	r7, r7
1a002e10:	e7e0      	b.n	1a002dd4 <ff_wtoupper+0x54>
}
1a002e12:	4770      	bx	lr
1a002e14:	1a005a30 	.word	0x1a005a30
1a002e18:	1a005c24 	.word	0x1a005c24

1a002e1c <newCardStatus>:
static FSSDC_StatusUpdateCallback_Func  g_statusUpdateCallback = NULL;
static enum FSSDC_CardStatus            g_cardStatus = FSSDC_CardStatus_Removed;


static void newCardStatus (enum FSSDC_CardStatus cardStatus)
{
1a002e1c:	b508      	push	{r3, lr}
    g_cardStatus = cardStatus;
1a002e1e:	4b03      	ldr	r3, [pc, #12]	; (1a002e2c <newCardStatus+0x10>)
1a002e20:	7018      	strb	r0, [r3, #0]
    if (g_statusUpdateCallback)
1a002e22:	4b03      	ldr	r3, [pc, #12]	; (1a002e30 <newCardStatus+0x14>)
1a002e24:	681b      	ldr	r3, [r3, #0]
1a002e26:	b103      	cbz	r3, 1a002e2a <newCardStatus+0xe>
    {
        g_statusUpdateCallback (g_cardStatus);
1a002e28:	4798      	blx	r3
    }
}
1a002e2a:	bd08      	pop	{r3, pc}
1a002e2c:	10000000 	.word	0x10000000
1a002e30:	10000538 	.word	0x10000538

1a002e34 <chk_power>:

static
int chk_power(void)		/* Socket power state: 0=off, 1=on */
{
	return 1;
}
1a002e34:	2001      	movs	r0, #1
1a002e36:	4770      	bx	lr

1a002e38 <SSPSend>:
{
1a002e38:	b500      	push	{lr}
1a002e3a:	b087      	sub	sp, #28
	xferConfig.tx_data = buf;
1a002e3c:	9001      	str	r0, [sp, #4]
	xferConfig.tx_cnt  = 0;
1a002e3e:	2300      	movs	r3, #0
1a002e40:	9302      	str	r3, [sp, #8]
	xferConfig.rx_data = NULL;
1a002e42:	9303      	str	r3, [sp, #12]
	xferConfig.rx_cnt  = 0;
1a002e44:	9304      	str	r3, [sp, #16]
	xferConfig.length  = Length;
1a002e46:	9105      	str	r1, [sp, #20]
	Chip_SSP_RWFrames_Blocking(LPC_SSP1, &xferConfig);
1a002e48:	a901      	add	r1, sp, #4
1a002e4a:	4803      	ldr	r0, [pc, #12]	; (1a002e58 <SSPSend+0x20>)
1a002e4c:	f001 fb75 	bl	1a00453a <Chip_SSP_RWFrames_Blocking>
}
1a002e50:	b007      	add	sp, #28
1a002e52:	f85d fb04 	ldr.w	pc, [sp], #4
1a002e56:	bf00      	nop
1a002e58:	400c5000 	.word	0x400c5000

1a002e5c <xmit_spi>:
{
1a002e5c:	b500      	push	{lr}
1a002e5e:	b083      	sub	sp, #12
1a002e60:	f88d 0007 	strb.w	r0, [sp, #7]
    SSPSend((uint8_t*) &dat, 1);
1a002e64:	2101      	movs	r1, #1
1a002e66:	f10d 0007 	add.w	r0, sp, #7
1a002e6a:	f7ff ffe5 	bl	1a002e38 <SSPSend>
}
1a002e6e:	b003      	add	sp, #12
1a002e70:	f85d fb04 	ldr.w	pc, [sp], #4

1a002e74 <SSPReceive>:
{
1a002e74:	b500      	push	{lr}
1a002e76:	b087      	sub	sp, #28
	xferConfig.tx_data = NULL;
1a002e78:	2300      	movs	r3, #0
1a002e7a:	9301      	str	r3, [sp, #4]
	xferConfig.tx_cnt  = 0;
1a002e7c:	9302      	str	r3, [sp, #8]
	xferConfig.rx_data = buf;
1a002e7e:	9003      	str	r0, [sp, #12]
	xferConfig.rx_cnt  = 0;
1a002e80:	9304      	str	r3, [sp, #16]
	xferConfig.length  = Length;
1a002e82:	9105      	str	r1, [sp, #20]
	Chip_SSP_RWFrames_Blocking(LPC_SSP1, &xferConfig);
1a002e84:	a901      	add	r1, sp, #4
1a002e86:	4803      	ldr	r0, [pc, #12]	; (1a002e94 <SSPReceive+0x20>)
1a002e88:	f001 fb57 	bl	1a00453a <Chip_SSP_RWFrames_Blocking>
}
1a002e8c:	b007      	add	sp, #28
1a002e8e:	f85d fb04 	ldr.w	pc, [sp], #4
1a002e92:	bf00      	nop
1a002e94:	400c5000 	.word	0x400c5000

1a002e98 <rcvr_spi>:
{
1a002e98:	b500      	push	{lr}
1a002e9a:	b083      	sub	sp, #12
    BYTE data = 0;
1a002e9c:	2300      	movs	r3, #0
1a002e9e:	f88d 3007 	strb.w	r3, [sp, #7]
    SSPReceive(&data, 1);
1a002ea2:	2101      	movs	r1, #1
1a002ea4:	f10d 0007 	add.w	r0, sp, #7
1a002ea8:	f7ff ffe4 	bl	1a002e74 <SSPReceive>
}
1a002eac:	f89d 0007 	ldrb.w	r0, [sp, #7]
1a002eb0:	b003      	add	sp, #12
1a002eb2:	f85d fb04 	ldr.w	pc, [sp], #4
1a002eb6:	Address 0x000000001a002eb6 is out of bounds.


1a002eb8 <wait_ready>:
{
1a002eb8:	b508      	push	{r3, lr}
	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
1a002eba:	4b07      	ldr	r3, [pc, #28]	; (1a002ed8 <wait_ready+0x20>)
1a002ebc:	2232      	movs	r2, #50	; 0x32
1a002ebe:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
1a002ec0:	f7ff ffea 	bl	1a002e98 <rcvr_spi>
		res = rcvr_spi();
1a002ec4:	f7ff ffe8 	bl	1a002e98 <rcvr_spi>
	while ((res != 0xFF) && Timer2);
1a002ec8:	28ff      	cmp	r0, #255	; 0xff
1a002eca:	d003      	beq.n	1a002ed4 <wait_ready+0x1c>
1a002ecc:	4b02      	ldr	r3, [pc, #8]	; (1a002ed8 <wait_ready+0x20>)
1a002ece:	781b      	ldrb	r3, [r3, #0]
1a002ed0:	2b00      	cmp	r3, #0
1a002ed2:	d1f7      	bne.n	1a002ec4 <wait_ready+0xc>
}
1a002ed4:	bd08      	pop	{r3, pc}
1a002ed6:	bf00      	nop
1a002ed8:	10000536 	.word	0x10000536

1a002edc <deselect>:
{
1a002edc:	b508      	push	{r3, lr}
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutHigh(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->SET[port] = (1 << pin);
1a002ede:	4a04      	ldr	r2, [pc, #16]	; (1a002ef0 <deselect+0x14>)
1a002ee0:	f242 230c 	movw	r3, #8716	; 0x220c
1a002ee4:	2101      	movs	r1, #1
1a002ee6:	50d1      	str	r1, [r2, r3]
	rcvr_spi();
1a002ee8:	f7ff ffd6 	bl	1a002e98 <rcvr_spi>
}
1a002eec:	bd08      	pop	{r3, pc}
1a002eee:	bf00      	nop
1a002ef0:	400f4000 	.word	0x400f4000

1a002ef4 <select_>:
{
1a002ef4:	b508      	push	{r3, lr}
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutLow(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->CLR[port] = (1 << pin);
1a002ef6:	4a07      	ldr	r2, [pc, #28]	; (1a002f14 <select_+0x20>)
1a002ef8:	f242 238c 	movw	r3, #8844	; 0x228c
1a002efc:	2101      	movs	r1, #1
1a002efe:	50d1      	str	r1, [r2, r3]
	if (wait_ready() != 0xFF) {
1a002f00:	f7ff ffda 	bl	1a002eb8 <wait_ready>
1a002f04:	28ff      	cmp	r0, #255	; 0xff
1a002f06:	d101      	bne.n	1a002f0c <select_+0x18>
	return TRUE;
1a002f08:	2001      	movs	r0, #1
}
1a002f0a:	bd08      	pop	{r3, pc}
		deselect();
1a002f0c:	f7ff ffe6 	bl	1a002edc <deselect>
		return FALSE;
1a002f10:	2000      	movs	r0, #0
1a002f12:	e7fa      	b.n	1a002f0a <select_+0x16>
1a002f14:	400f4000 	.word	0x400f4000

1a002f18 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
1a002f18:	b538      	push	{r3, r4, r5, lr}
1a002f1a:	4604      	mov	r4, r0
1a002f1c:	460d      	mov	r5, r1
	BYTE n, res;


    if (cmd & 0x80)                     /* ACMD<n> is the command sequense of CMD55-CMD<n> */
1a002f1e:	f010 0f80 	tst.w	r0, #128	; 0x80
1a002f22:	d129      	bne.n	1a002f78 <send_cmd+0x60>
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
1a002f24:	f7ff ffda 	bl	1a002edc <deselect>
	if (!select_()) 
1a002f28:	f7ff ffe4 	bl	1a002ef4 <select_>
1a002f2c:	b3a0      	cbz	r0, 1a002f98 <send_cmd+0x80>
    {
        return 0xFF;
    }

	/* Send command packet */
	xmit_spi(cmd);						/* Start + Command index */
1a002f2e:	4620      	mov	r0, r4
1a002f30:	f7ff ff94 	bl	1a002e5c <xmit_spi>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
1a002f34:	0e28      	lsrs	r0, r5, #24
1a002f36:	f7ff ff91 	bl	1a002e5c <xmit_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
1a002f3a:	f3c5 4007 	ubfx	r0, r5, #16, #8
1a002f3e:	f7ff ff8d 	bl	1a002e5c <xmit_spi>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
1a002f42:	f3c5 2007 	ubfx	r0, r5, #8, #8
1a002f46:	f7ff ff89 	bl	1a002e5c <xmit_spi>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
1a002f4a:	b2e8      	uxtb	r0, r5
1a002f4c:	f7ff ff86 	bl	1a002e5c <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
    
	if (cmd == CMD0_) 
1a002f50:	2c40      	cmp	r4, #64	; 0x40
1a002f52:	d01a      	beq.n	1a002f8a <send_cmd+0x72>
	n = 0x01;							/* Dummy CRC + Stop */
1a002f54:	2001      	movs	r0, #1
    {
        n = 0x95;                       /* Valid CRC for CMD0_(0) */
    }
    
	if (cmd == CMD8)
1a002f56:	2c48      	cmp	r4, #72	; 0x48
1a002f58:	d019      	beq.n	1a002f8e <send_cmd+0x76>
    {
        n = 0x87;                       /* Valid CRC for CMD8(0x1AA) */
    }
    
	xmit_spi(n);
1a002f5a:	f7ff ff7f 	bl	1a002e5c <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12) 
1a002f5e:	2c4c      	cmp	r4, #76	; 0x4c
1a002f60:	d017      	beq.n	1a002f92 <send_cmd+0x7a>
        n = 0x87;                       /* Valid CRC for CMD8(0x1AA) */
1a002f62:	240a      	movs	r4, #10
    }
    
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
    {
		res = rcvr_spi();
1a002f64:	f7ff ff98 	bl	1a002e98 <rcvr_spi>
    }
	while ((res & 0x80) && --n);
1a002f68:	f010 0f80 	tst.w	r0, #128	; 0x80
1a002f6c:	d003      	beq.n	1a002f76 <send_cmd+0x5e>
1a002f6e:	1e63      	subs	r3, r4, #1
1a002f70:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
1a002f74:	d1f6      	bne.n	1a002f64 <send_cmd+0x4c>

	return res;			/* Return with the response value */
}
1a002f76:	bd38      	pop	{r3, r4, r5, pc}
		cmd &= 0x7F;
1a002f78:	f000 047f 	and.w	r4, r0, #127	; 0x7f
		res = send_cmd(CMD55, 0);
1a002f7c:	2100      	movs	r1, #0
1a002f7e:	2077      	movs	r0, #119	; 0x77
1a002f80:	f7ff ffca 	bl	1a002f18 <send_cmd>
		if (res > 1) return res;
1a002f84:	2801      	cmp	r0, #1
1a002f86:	d9cd      	bls.n	1a002f24 <send_cmd+0xc>
1a002f88:	e7f5      	b.n	1a002f76 <send_cmd+0x5e>
        n = 0x95;                       /* Valid CRC for CMD0_(0) */
1a002f8a:	2095      	movs	r0, #149	; 0x95
1a002f8c:	e7e3      	b.n	1a002f56 <send_cmd+0x3e>
        n = 0x87;                       /* Valid CRC for CMD8(0x1AA) */
1a002f8e:	2087      	movs	r0, #135	; 0x87
1a002f90:	e7e3      	b.n	1a002f5a <send_cmd+0x42>
        rcvr_spi();                     /* Skip a stuff byte when stop reading */
1a002f92:	f7ff ff81 	bl	1a002e98 <rcvr_spi>
1a002f96:	e7e4      	b.n	1a002f62 <send_cmd+0x4a>
        return 0xFF;
1a002f98:	20ff      	movs	r0, #255	; 0xff
1a002f9a:	e7ec      	b.n	1a002f76 <send_cmd+0x5e>

1a002f9c <xmit_datablock>:
{
1a002f9c:	b570      	push	{r4, r5, r6, lr}
1a002f9e:	4606      	mov	r6, r0
1a002fa0:	460c      	mov	r4, r1
	if (wait_ready() != 0xFF) 
1a002fa2:	f7ff ff89 	bl	1a002eb8 <wait_ready>
1a002fa6:	28ff      	cmp	r0, #255	; 0xff
1a002fa8:	d001      	beq.n	1a002fae <xmit_datablock+0x12>
        return FALSE;
1a002faa:	2000      	movs	r0, #0
}
1a002fac:	bd70      	pop	{r4, r5, r6, pc}
	xmit_spi(token);					/* Xmit data token */
1a002fae:	4620      	mov	r0, r4
1a002fb0:	f7ff ff54 	bl	1a002e5c <xmit_spi>
	if (token != 0xFD)                  /* Is data token */
1a002fb4:	2cfd      	cmp	r4, #253	; 0xfd
1a002fb6:	d01b      	beq.n	1a002ff0 <xmit_datablock+0x54>
		wc = 0;
1a002fb8:	2400      	movs	r4, #0
			xmit_spi(*buff++);
1a002fba:	4635      	mov	r5, r6
1a002fbc:	f815 0b02 	ldrb.w	r0, [r5], #2
1a002fc0:	f7ff ff4c 	bl	1a002e5c <xmit_spi>
			xmit_spi(*buff++);
1a002fc4:	7870      	ldrb	r0, [r6, #1]
1a002fc6:	f7ff ff49 	bl	1a002e5c <xmit_spi>
        while (--wc);
1a002fca:	1e63      	subs	r3, r4, #1
			xmit_spi(*buff++);
1a002fcc:	462e      	mov	r6, r5
        while (--wc);
1a002fce:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
1a002fd2:	d1f2      	bne.n	1a002fba <xmit_datablock+0x1e>
		xmit_spi(0xFF);					/* CRC (Dummy) */
1a002fd4:	20ff      	movs	r0, #255	; 0xff
1a002fd6:	f7ff ff41 	bl	1a002e5c <xmit_spi>
		xmit_spi(0xFF);
1a002fda:	20ff      	movs	r0, #255	; 0xff
1a002fdc:	f7ff ff3e 	bl	1a002e5c <xmit_spi>
		resp = rcvr_spi();				/* Reveive data response */
1a002fe0:	f7ff ff5a 	bl	1a002e98 <rcvr_spi>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
1a002fe4:	f000 001f 	and.w	r0, r0, #31
1a002fe8:	2805      	cmp	r0, #5
1a002fea:	d103      	bne.n	1a002ff4 <xmit_datablock+0x58>
	return TRUE;
1a002fec:	2001      	movs	r0, #1
1a002fee:	e7dd      	b.n	1a002fac <xmit_datablock+0x10>
1a002ff0:	2001      	movs	r0, #1
1a002ff2:	e7db      	b.n	1a002fac <xmit_datablock+0x10>
			return FALSE;
1a002ff4:	2000      	movs	r0, #0
1a002ff6:	e7d9      	b.n	1a002fac <xmit_datablock+0x10>

1a002ff8 <rcvr_datablock>:
{
1a002ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a002ffa:	4604      	mov	r4, r0
1a002ffc:	460e      	mov	r6, r1
	Timer1 = 20;
1a002ffe:	4b15      	ldr	r3, [pc, #84]	; (1a003054 <rcvr_datablock+0x5c>)
1a003000:	2214      	movs	r2, #20
1a003002:	701a      	strb	r2, [r3, #0]
		token = rcvr_spi();
1a003004:	f7ff ff48 	bl	1a002e98 <rcvr_spi>
    while ((token == 0xFF) && Timer1);
1a003008:	28ff      	cmp	r0, #255	; 0xff
1a00300a:	d103      	bne.n	1a003014 <rcvr_datablock+0x1c>
1a00300c:	4b11      	ldr	r3, [pc, #68]	; (1a003054 <rcvr_datablock+0x5c>)
1a00300e:	781b      	ldrb	r3, [r3, #0]
1a003010:	2b00      	cmp	r3, #0
1a003012:	d1f7      	bne.n	1a003004 <rcvr_datablock+0xc>
	if (token != 0xFE) 
1a003014:	28fe      	cmp	r0, #254	; 0xfe
1a003016:	d11b      	bne.n	1a003050 <rcvr_datablock+0x58>
		rcvr_spi_m(buff++);
1a003018:	1c65      	adds	r5, r4, #1
1a00301a:	2101      	movs	r1, #1
1a00301c:	4620      	mov	r0, r4
1a00301e:	f7ff ff29 	bl	1a002e74 <SSPReceive>
		rcvr_spi_m(buff++);
1a003022:	1ca7      	adds	r7, r4, #2
1a003024:	2101      	movs	r1, #1
1a003026:	4628      	mov	r0, r5
1a003028:	f7ff ff24 	bl	1a002e74 <SSPReceive>
		rcvr_spi_m(buff++);
1a00302c:	1ce5      	adds	r5, r4, #3
1a00302e:	2101      	movs	r1, #1
1a003030:	4638      	mov	r0, r7
1a003032:	f7ff ff1f 	bl	1a002e74 <SSPReceive>
		rcvr_spi_m(buff++);
1a003036:	2101      	movs	r1, #1
1a003038:	4628      	mov	r0, r5
1a00303a:	3404      	adds	r4, #4
1a00303c:	f7ff ff1a 	bl	1a002e74 <SSPReceive>
    while (btr -= 4);
1a003040:	3e04      	subs	r6, #4
1a003042:	d1e9      	bne.n	1a003018 <rcvr_datablock+0x20>
	rcvr_spi();						/* Discard CRC */
1a003044:	f7ff ff28 	bl	1a002e98 <rcvr_spi>
	rcvr_spi();
1a003048:	f7ff ff26 	bl	1a002e98 <rcvr_spi>
	return TRUE;					/* Return with success */
1a00304c:	2001      	movs	r0, #1
}
1a00304e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return FALSE;               /* If not valid data token, retutn with error */
1a003050:	2000      	movs	r0, #0
1a003052:	e7fc      	b.n	1a00304e <rcvr_datablock+0x56>
1a003054:	10000535 	.word	0x10000535

1a003058 <FSSDC_FatFs_DiskStatus>:
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS FSSDC_FatFs_DiskStatus ()
{
	return g_diskStats;
1a003058:	4b01      	ldr	r3, [pc, #4]	; (1a003060 <FSSDC_FatFs_DiskStatus+0x8>)
1a00305a:	7818      	ldrb	r0, [r3, #0]
}
1a00305c:	4770      	bx	lr
1a00305e:	bf00      	nop
1a003060:	10000001 	.word	0x10000001

1a003064 <FSSDC_FatFs_DiskInitialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS FSSDC_FatFs_DiskInitialize ()
{
1a003064:	b570      	push	{r4, r5, r6, lr}
1a003066:	b082      	sub	sp, #8
	BYTE n, cmd, ty, ocr[4];

    if (g_diskStats & STA_NODISK)
1a003068:	4b5f      	ldr	r3, [pc, #380]	; (1a0031e8 <FSSDC_FatFs_DiskInitialize+0x184>)
1a00306a:	781b      	ldrb	r3, [r3, #0]
1a00306c:	f013 0f02 	tst.w	r3, #2
1a003070:	d109      	bne.n	1a003086 <FSSDC_FatFs_DiskInitialize+0x22>
    {
        Board_UARTPutSTR ("FSSDC: [Init] No card in socket.\r\n");
        return g_diskStats;                 /* No card in the socket */
    }
    
    if (!(g_diskStats & STA_NOINIT))        /* Already initialized */
1a003072:	4b5d      	ldr	r3, [pc, #372]	; (1a0031e8 <FSSDC_FatFs_DiskInitialize+0x184>)
1a003074:	781b      	ldrb	r3, [r3, #0]
1a003076:	f013 0f01 	tst.w	r3, #1
1a00307a:	d10b      	bne.n	1a003094 <FSSDC_FatFs_DiskInitialize+0x30>
    {
        return g_diskStats;
1a00307c:	4b5a      	ldr	r3, [pc, #360]	; (1a0031e8 <FSSDC_FatFs_DiskInitialize+0x184>)
1a00307e:	7818      	ldrb	r0, [r3, #0]
1a003080:	b2c0      	uxtb	r0, r0
        Board_UARTPutSTR ("FSSDC: [Init] New card status: Error (Not Initialized).\r\n");        
        newCardStatus (FSSDC_CardStatus_Error); 
	}

	return g_diskStats;
}
1a003082:	b002      	add	sp, #8
1a003084:	bd70      	pop	{r4, r5, r6, pc}
        Board_UARTPutSTR ("FSSDC: [Init] No card in socket.\r\n");
1a003086:	4859      	ldr	r0, [pc, #356]	; (1a0031ec <FSSDC_FatFs_DiskInitialize+0x188>)
1a003088:	f000 fc3c 	bl	1a003904 <Board_UARTPutSTR>
        return g_diskStats;                 /* No card in the socket */
1a00308c:	4b56      	ldr	r3, [pc, #344]	; (1a0031e8 <FSSDC_FatFs_DiskInitialize+0x184>)
1a00308e:	7818      	ldrb	r0, [r3, #0]
1a003090:	b2c0      	uxtb	r0, r0
1a003092:	e7f6      	b.n	1a003082 <FSSDC_FatFs_DiskInitialize+0x1e>
    Board_UARTPutSTR ("FSSDC: [Init] Initialization begins.\r\n");
1a003094:	4856      	ldr	r0, [pc, #344]	; (1a0031f0 <FSSDC_FatFs_DiskInitialize+0x18c>)
1a003096:	f000 fc35 	bl	1a003904 <Board_UARTPutSTR>
	FCLK_SLOW();
1a00309a:	4b56      	ldr	r3, [pc, #344]	; (1a0031f4 <FSSDC_FatFs_DiskInitialize+0x190>)
1a00309c:	6819      	ldr	r1, [r3, #0]
1a00309e:	4856      	ldr	r0, [pc, #344]	; (1a0031f8 <FSSDC_FatFs_DiskInitialize+0x194>)
1a0030a0:	f001 fa9f 	bl	1a0045e2 <Chip_SSP_SetBitRate>
	for (n = 10; n; n--) 
1a0030a4:	240a      	movs	r4, #10
1a0030a6:	b124      	cbz	r4, 1a0030b2 <FSSDC_FatFs_DiskInitialize+0x4e>
        rcvr_spi();	/* 80 dummy clocks */
1a0030a8:	f7ff fef6 	bl	1a002e98 <rcvr_spi>
	for (n = 10; n; n--) 
1a0030ac:	3c01      	subs	r4, #1
1a0030ae:	b2e4      	uxtb	r4, r4
1a0030b0:	e7f9      	b.n	1a0030a6 <FSSDC_FatFs_DiskInitialize+0x42>
    Board_UARTPutSTR ("FSSDC: [Init] New card status: Native Mode.\r\n");
1a0030b2:	4852      	ldr	r0, [pc, #328]	; (1a0031fc <FSSDC_FatFs_DiskInitialize+0x198>)
1a0030b4:	f000 fc26 	bl	1a003904 <Board_UARTPutSTR>
    newCardStatus (FSSDC_CardStatus_NativeMode);    
1a0030b8:	2003      	movs	r0, #3
1a0030ba:	f7ff feaf 	bl	1a002e1c <newCardStatus>
	if (send_cmd(CMD0_, 0) == 1)                                /* Enter Idle state */
1a0030be:	2100      	movs	r1, #0
1a0030c0:	2040      	movs	r0, #64	; 0x40
1a0030c2:	f7ff ff29 	bl	1a002f18 <send_cmd>
1a0030c6:	4605      	mov	r5, r0
1a0030c8:	2801      	cmp	r0, #1
1a0030ca:	d019      	beq.n	1a003100 <FSSDC_FatFs_DiskInitialize+0x9c>
	CardType = ty;
1a0030cc:	4b4c      	ldr	r3, [pc, #304]	; (1a003200 <FSSDC_FatFs_DiskInitialize+0x19c>)
1a0030ce:	701c      	strb	r4, [r3, #0]
	deselect();
1a0030d0:	f7ff ff04 	bl	1a002edc <deselect>
    if (ty)                                             /* Initialization succeded */
1a0030d4:	2c00      	cmp	r4, #0
1a0030d6:	d07f      	beq.n	1a0031d8 <FSSDC_FatFs_DiskInitialize+0x174>
		g_diskStats &= ~STA_NOINIT;                     /* Clear STA_NOINIT */
1a0030d8:	4a43      	ldr	r2, [pc, #268]	; (1a0031e8 <FSSDC_FatFs_DiskInitialize+0x184>)
1a0030da:	7813      	ldrb	r3, [r2, #0]
1a0030dc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
1a0030e0:	7013      	strb	r3, [r2, #0]
		FCLK_FAST();
1a0030e2:	4b48      	ldr	r3, [pc, #288]	; (1a003204 <FSSDC_FatFs_DiskInitialize+0x1a0>)
1a0030e4:	6819      	ldr	r1, [r3, #0]
1a0030e6:	4844      	ldr	r0, [pc, #272]	; (1a0031f8 <FSSDC_FatFs_DiskInitialize+0x194>)
1a0030e8:	f001 fa7b 	bl	1a0045e2 <Chip_SSP_SetBitRate>
        Board_UARTPutSTR ("FSSDC: [Init] New card status: Ready (Fast Clock).\r\n");        
1a0030ec:	4846      	ldr	r0, [pc, #280]	; (1a003208 <FSSDC_FatFs_DiskInitialize+0x1a4>)
1a0030ee:	f000 fc09 	bl	1a003904 <Board_UARTPutSTR>
        newCardStatus (FSSDC_CardStatus_Ready);        
1a0030f2:	2005      	movs	r0, #5
1a0030f4:	f7ff fe92 	bl	1a002e1c <newCardStatus>
	return g_diskStats;
1a0030f8:	4b3b      	ldr	r3, [pc, #236]	; (1a0031e8 <FSSDC_FatFs_DiskInitialize+0x184>)
1a0030fa:	7818      	ldrb	r0, [r3, #0]
1a0030fc:	b2c0      	uxtb	r0, r0
1a0030fe:	e7c0      	b.n	1a003082 <FSSDC_FatFs_DiskInitialize+0x1e>
        Board_UARTPutSTR ("FSSDC: [Init] New card status: Initializing.\r\n");        
1a003100:	4842      	ldr	r0, [pc, #264]	; (1a00320c <FSSDC_FatFs_DiskInitialize+0x1a8>)
1a003102:	f000 fbff 	bl	1a003904 <Board_UARTPutSTR>
        newCardStatus (FSSDC_CardStatus_Initializing);
1a003106:	2004      	movs	r0, #4
1a003108:	f7ff fe88 	bl	1a002e1c <newCardStatus>
		Timer1 = 100;                                           /* Initialization timeout of 1000 msec */
1a00310c:	4b40      	ldr	r3, [pc, #256]	; (1a003210 <FSSDC_FatFs_DiskInitialize+0x1ac>)
1a00310e:	2264      	movs	r2, #100	; 0x64
1a003110:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1)                         /* SDHC */
1a003112:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
1a003116:	2048      	movs	r0, #72	; 0x48
1a003118:	f7ff fefe 	bl	1a002f18 <send_cmd>
1a00311c:	2801      	cmp	r0, #1
1a00311e:	d139      	bne.n	1a003194 <FSSDC_FatFs_DiskInitialize+0x130>
			for (n = 0; n < 4; n++) 
1a003120:	4625      	mov	r5, r4
1a003122:	e007      	b.n	1a003134 <FSSDC_FatFs_DiskInitialize+0xd0>
                ocr[n] = rcvr_spi();                            /* Get trailing return value of R7 resp */
1a003124:	f7ff feb8 	bl	1a002e98 <rcvr_spi>
1a003128:	ab02      	add	r3, sp, #8
1a00312a:	442b      	add	r3, r5
1a00312c:	f803 0c04 	strb.w	r0, [r3, #-4]
			for (n = 0; n < 4; n++) 
1a003130:	3501      	adds	r5, #1
1a003132:	b2ed      	uxtb	r5, r5
1a003134:	2d03      	cmp	r5, #3
1a003136:	d9f5      	bls.n	1a003124 <FSSDC_FatFs_DiskInitialize+0xc0>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)               /* The card can work at vdd range of 2.7-3.6V */ 
1a003138:	f89d 3006 	ldrb.w	r3, [sp, #6]
1a00313c:	2b01      	cmp	r3, #1
1a00313e:	d1c5      	bne.n	1a0030cc <FSSDC_FatFs_DiskInitialize+0x68>
1a003140:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a003144:	2baa      	cmp	r3, #170	; 0xaa
1a003146:	d1c1      	bne.n	1a0030cc <FSSDC_FatFs_DiskInitialize+0x68>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
1a003148:	4b31      	ldr	r3, [pc, #196]	; (1a003210 <FSSDC_FatFs_DiskInitialize+0x1ac>)
1a00314a:	781b      	ldrb	r3, [r3, #0]
1a00314c:	b133      	cbz	r3, 1a00315c <FSSDC_FatFs_DiskInitialize+0xf8>
1a00314e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
1a003152:	20e9      	movs	r0, #233	; 0xe9
1a003154:	f7ff fee0 	bl	1a002f18 <send_cmd>
1a003158:	2800      	cmp	r0, #0
1a00315a:	d1f5      	bne.n	1a003148 <FSSDC_FatFs_DiskInitialize+0xe4>
                if (Timer1 && send_cmd(CMD58, 0) == 0) 
1a00315c:	4b2c      	ldr	r3, [pc, #176]	; (1a003210 <FSSDC_FatFs_DiskInitialize+0x1ac>)
1a00315e:	781b      	ldrb	r3, [r3, #0]
1a003160:	2b00      	cmp	r3, #0
1a003162:	d0b3      	beq.n	1a0030cc <FSSDC_FatFs_DiskInitialize+0x68>
1a003164:	2100      	movs	r1, #0
1a003166:	207a      	movs	r0, #122	; 0x7a
1a003168:	f7ff fed6 	bl	1a002f18 <send_cmd>
1a00316c:	4605      	mov	r5, r0
1a00316e:	b140      	cbz	r0, 1a003182 <FSSDC_FatFs_DiskInitialize+0x11e>
1a003170:	e7ac      	b.n	1a0030cc <FSSDC_FatFs_DiskInitialize+0x68>
                        ocr[n] = rcvr_spi();
1a003172:	f7ff fe91 	bl	1a002e98 <rcvr_spi>
1a003176:	ab02      	add	r3, sp, #8
1a003178:	442b      	add	r3, r5
1a00317a:	f803 0c04 	strb.w	r0, [r3, #-4]
					for (n = 0; n < 4; n++)                     /* Check CCS bit in the OCR */
1a00317e:	3501      	adds	r5, #1
1a003180:	b2ed      	uxtb	r5, r5
1a003182:	2d03      	cmp	r5, #3
1a003184:	d9f5      	bls.n	1a003172 <FSSDC_FatFs_DiskInitialize+0x10e>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
1a003186:	f89d 3004 	ldrb.w	r3, [sp, #4]
1a00318a:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00318e:	d021      	beq.n	1a0031d4 <FSSDC_FatFs_DiskInitialize+0x170>
1a003190:	240c      	movs	r4, #12
1a003192:	e79b      	b.n	1a0030cc <FSSDC_FatFs_DiskInitialize+0x68>
			if (send_cmd(ACMD41, 0) <= 1)
1a003194:	2100      	movs	r1, #0
1a003196:	20e9      	movs	r0, #233	; 0xe9
1a003198:	f7ff febe 	bl	1a002f18 <send_cmd>
1a00319c:	2801      	cmp	r0, #1
1a00319e:	d916      	bls.n	1a0031ce <FSSDC_FatFs_DiskInitialize+0x16a>
				ty = CT_MMC; cmd = CMD1;                        /* MMCv3 */
1a0031a0:	2641      	movs	r6, #65	; 0x41
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
1a0031a2:	4b1b      	ldr	r3, [pc, #108]	; (1a003210 <FSSDC_FatFs_DiskInitialize+0x1ac>)
1a0031a4:	781b      	ldrb	r3, [r3, #0]
1a0031a6:	b12b      	cbz	r3, 1a0031b4 <FSSDC_FatFs_DiskInitialize+0x150>
1a0031a8:	2100      	movs	r1, #0
1a0031aa:	4630      	mov	r0, r6
1a0031ac:	f7ff feb4 	bl	1a002f18 <send_cmd>
1a0031b0:	2800      	cmp	r0, #0
1a0031b2:	d1f6      	bne.n	1a0031a2 <FSSDC_FatFs_DiskInitialize+0x13e>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
1a0031b4:	4b16      	ldr	r3, [pc, #88]	; (1a003210 <FSSDC_FatFs_DiskInitialize+0x1ac>)
1a0031b6:	781b      	ldrb	r3, [r3, #0]
1a0031b8:	2b00      	cmp	r3, #0
1a0031ba:	d087      	beq.n	1a0030cc <FSSDC_FatFs_DiskInitialize+0x68>
1a0031bc:	f44f 7100 	mov.w	r1, #512	; 0x200
1a0031c0:	2050      	movs	r0, #80	; 0x50
1a0031c2:	f7ff fea9 	bl	1a002f18 <send_cmd>
1a0031c6:	2800      	cmp	r0, #0
1a0031c8:	d180      	bne.n	1a0030cc <FSSDC_FatFs_DiskInitialize+0x68>
1a0031ca:	462c      	mov	r4, r5
1a0031cc:	e77e      	b.n	1a0030cc <FSSDC_FatFs_DiskInitialize+0x68>
				ty = CT_SD1; cmd = ACMD41;                      /* SDv1 */
1a0031ce:	2502      	movs	r5, #2
1a0031d0:	26e9      	movs	r6, #233	; 0xe9
1a0031d2:	e7e6      	b.n	1a0031a2 <FSSDC_FatFs_DiskInitialize+0x13e>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
1a0031d4:	2404      	movs	r4, #4
1a0031d6:	e779      	b.n	1a0030cc <FSSDC_FatFs_DiskInitialize+0x68>
        Board_UARTPutSTR ("FSSDC: [Init] New card status: Error (Not Initialized).\r\n");        
1a0031d8:	480e      	ldr	r0, [pc, #56]	; (1a003214 <FSSDC_FatFs_DiskInitialize+0x1b0>)
1a0031da:	f000 fb93 	bl	1a003904 <Board_UARTPutSTR>
        newCardStatus (FSSDC_CardStatus_Error); 
1a0031de:	2000      	movs	r0, #0
1a0031e0:	f7ff fe1c 	bl	1a002e1c <newCardStatus>
1a0031e4:	e788      	b.n	1a0030f8 <FSSDC_FatFs_DiskInitialize+0x94>
1a0031e6:	bf00      	nop
1a0031e8:	10000001 	.word	0x10000001
1a0031ec:	1a005de0 	.word	0x1a005de0
1a0031f0:	1a005e04 	.word	0x1a005e04
1a0031f4:	10000008 	.word	0x10000008
1a0031f8:	400c5000 	.word	0x400c5000
1a0031fc:	1a005e2c 	.word	0x1a005e2c
1a003200:	10000534 	.word	0x10000534
1a003204:	10000004 	.word	0x10000004
1a003208:	1a005e8c 	.word	0x1a005e8c
1a00320c:	1a005e5c 	.word	0x1a005e5c
1a003210:	10000535 	.word	0x10000535
1a003214:	1a005ec4 	.word	0x1a005ec4

1a003218 <FSSDC_FatFs_DiskRead>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/
DRESULT FSSDC_FatFs_DiskRead (BYTE *buff, DWORD sector, UINT count)
{   
1a003218:	b538      	push	{r3, r4, r5, lr}
	if (g_diskStats & STA_NOINIT)
1a00321a:	4b1d      	ldr	r3, [pc, #116]	; (1a003290 <FSSDC_FatFs_DiskRead+0x78>)
1a00321c:	781b      	ldrb	r3, [r3, #0]
1a00321e:	f013 0f01 	tst.w	r3, #1
1a003222:	d121      	bne.n	1a003268 <FSSDC_FatFs_DiskRead+0x50>
1a003224:	4605      	mov	r5, r0
1a003226:	4614      	mov	r4, r2
    {
        Board_UARTPutSTR ("FSSDC: [Read] Card not initialized.\r\n");
        return RES_NOTRDY;
    }

	if (!(CardType & CT_BLOCK)) 
1a003228:	4b1a      	ldr	r3, [pc, #104]	; (1a003294 <FSSDC_FatFs_DiskRead+0x7c>)
1a00322a:	781b      	ldrb	r3, [r3, #0]
1a00322c:	f013 0f08 	tst.w	r3, #8
1a003230:	d100      	bne.n	1a003234 <FSSDC_FatFs_DiskRead+0x1c>
    {
        sector *= 512;                      /* Convert to byte address if needed */
1a003232:	0249      	lsls	r1, r1, #9
    }

	if (count == 1) 
1a003234:	2c01      	cmp	r4, #1
1a003236:	d01c      	beq.n	1a003272 <FSSDC_FatFs_DiskRead+0x5a>
			&& rcvr_datablock(buff, 512))
			count = 0;
	}
	else 
    {                                       /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) 
1a003238:	2052      	movs	r0, #82	; 0x52
1a00323a:	f7ff fe6d 	bl	1a002f18 <send_cmd>
1a00323e:	b968      	cbnz	r0, 1a00325c <FSSDC_FatFs_DiskRead+0x44>
        {                                   /* READ_MULTIPLE_BLOCK */
			do 
            {
				if (!rcvr_datablock(buff, 512)) 
1a003240:	f44f 7100 	mov.w	r1, #512	; 0x200
1a003244:	4628      	mov	r0, r5
1a003246:	f7ff fed7 	bl	1a002ff8 <rcvr_datablock>
1a00324a:	b118      	cbz	r0, 1a003254 <FSSDC_FatFs_DiskRead+0x3c>
                {
                    break;
                }
				buff += 512;
1a00324c:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} 
            while (--count);
1a003250:	3c01      	subs	r4, #1
1a003252:	d1f5      	bne.n	1a003240 <FSSDC_FatFs_DiskRead+0x28>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
1a003254:	2100      	movs	r1, #0
1a003256:	204c      	movs	r0, #76	; 0x4c
1a003258:	f7ff fe5e 	bl	1a002f18 <send_cmd>
		}
	}
	deselect();
1a00325c:	f7ff fe3e 	bl	1a002edc <deselect>

	return count ? RES_ERROR : RES_OK;
1a003260:	1c20      	adds	r0, r4, #0
1a003262:	bf18      	it	ne
1a003264:	2001      	movne	r0, #1
}
1a003266:	bd38      	pop	{r3, r4, r5, pc}
        Board_UARTPutSTR ("FSSDC: [Read] Card not initialized.\r\n");
1a003268:	480b      	ldr	r0, [pc, #44]	; (1a003298 <FSSDC_FatFs_DiskRead+0x80>)
1a00326a:	f000 fb4b 	bl	1a003904 <Board_UARTPutSTR>
        return RES_NOTRDY;
1a00326e:	2003      	movs	r0, #3
1a003270:	e7f9      	b.n	1a003266 <FSSDC_FatFs_DiskRead+0x4e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
1a003272:	2051      	movs	r0, #81	; 0x51
1a003274:	f7ff fe50 	bl	1a002f18 <send_cmd>
1a003278:	2800      	cmp	r0, #0
1a00327a:	d1ef      	bne.n	1a00325c <FSSDC_FatFs_DiskRead+0x44>
			&& rcvr_datablock(buff, 512))
1a00327c:	f44f 7100 	mov.w	r1, #512	; 0x200
1a003280:	4628      	mov	r0, r5
1a003282:	f7ff feb9 	bl	1a002ff8 <rcvr_datablock>
1a003286:	2800      	cmp	r0, #0
1a003288:	d0e8      	beq.n	1a00325c <FSSDC_FatFs_DiskRead+0x44>
			count = 0;
1a00328a:	2400      	movs	r4, #0
1a00328c:	e7e6      	b.n	1a00325c <FSSDC_FatFs_DiskRead+0x44>
1a00328e:	bf00      	nop
1a003290:	10000001 	.word	0x10000001
1a003294:	10000534 	.word	0x10000534
1a003298:	1a005f4c 	.word	0x1a005f4c

1a00329c <FSSDC_FatFs_DiskWrite>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
DRESULT FSSDC_FatFs_DiskWrite (const BYTE *buff, DWORD sector, UINT count)
{
1a00329c:	b570      	push	{r4, r5, r6, lr}
	if (g_diskStats & STA_NOINIT)
1a00329e:	4b28      	ldr	r3, [pc, #160]	; (1a003340 <FSSDC_FatFs_DiskWrite+0xa4>)
1a0032a0:	781b      	ldrb	r3, [r3, #0]
1a0032a2:	f013 0f01 	tst.w	r3, #1
1a0032a6:	d12b      	bne.n	1a003300 <FSSDC_FatFs_DiskWrite+0x64>
1a0032a8:	4605      	mov	r5, r0
1a0032aa:	460e      	mov	r6, r1
1a0032ac:	4614      	mov	r4, r2
    {
        Board_UARTPutSTR ("FSSDC: [Write] Card not initialized.\r\n");
        return RES_NOTRDY;
    }
    
	if (g_diskStats & STA_PROTECT)
1a0032ae:	4b24      	ldr	r3, [pc, #144]	; (1a003340 <FSSDC_FatFs_DiskWrite+0xa4>)
1a0032b0:	781b      	ldrb	r3, [r3, #0]
1a0032b2:	f013 0f04 	tst.w	r3, #4
1a0032b6:	d128      	bne.n	1a00330a <FSSDC_FatFs_DiskWrite+0x6e>
    {
        Board_UARTPutSTR ("FSSDC: [Write] Card is write protected.\r\n");
        return RES_WRPRT;
    }

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
1a0032b8:	4b22      	ldr	r3, [pc, #136]	; (1a003344 <FSSDC_FatFs_DiskWrite+0xa8>)
1a0032ba:	781b      	ldrb	r3, [r3, #0]
1a0032bc:	f013 0f08 	tst.w	r3, #8
1a0032c0:	d100      	bne.n	1a0032c4 <FSSDC_FatFs_DiskWrite+0x28>
1a0032c2:	024e      	lsls	r6, r1, #9

	if (count == 1) 
1a0032c4:	2c01      	cmp	r4, #1
1a0032c6:	d025      	beq.n	1a003314 <FSSDC_FatFs_DiskWrite+0x78>
			count = 0;
        }
	}
	else 
    {                                           /* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
1a0032c8:	f013 0f06 	tst.w	r3, #6
1a0032cc:	d130      	bne.n	1a003330 <FSSDC_FatFs_DiskWrite+0x94>
		if (send_cmd(CMD25, sector) == 0) 
1a0032ce:	4631      	mov	r1, r6
1a0032d0:	2059      	movs	r0, #89	; 0x59
1a0032d2:	f7ff fe21 	bl	1a002f18 <send_cmd>
1a0032d6:	b968      	cbnz	r0, 1a0032f4 <FSSDC_FatFs_DiskWrite+0x58>
        {                                       /* WRITE_MULTIPLE_BLOCK */
			do 
            {
				if (!xmit_datablock(buff, 0xFC))
1a0032d8:	21fc      	movs	r1, #252	; 0xfc
1a0032da:	4628      	mov	r0, r5
1a0032dc:	f7ff fe5e 	bl	1a002f9c <xmit_datablock>
1a0032e0:	b118      	cbz	r0, 1a0032ea <FSSDC_FatFs_DiskWrite+0x4e>
                {
                    break;
                }
				buff += 512;
1a0032e2:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} 
            while (--count);
1a0032e6:	3c01      	subs	r4, #1
1a0032e8:	d1f6      	bne.n	1a0032d8 <FSSDC_FatFs_DiskWrite+0x3c>
			if (!xmit_datablock(0, 0xFD))       /* STOP_TRAN token */
1a0032ea:	21fd      	movs	r1, #253	; 0xfd
1a0032ec:	2000      	movs	r0, #0
1a0032ee:	f7ff fe55 	bl	1a002f9c <xmit_datablock>
1a0032f2:	b310      	cbz	r0, 1a00333a <FSSDC_FatFs_DiskWrite+0x9e>
            {
				count = 1;
            }
		}
	}
	deselect();
1a0032f4:	f7ff fdf2 	bl	1a002edc <deselect>

	return count ? RES_ERROR : RES_OK;
1a0032f8:	1c20      	adds	r0, r4, #0
1a0032fa:	bf18      	it	ne
1a0032fc:	2001      	movne	r0, #1
}
1a0032fe:	bd70      	pop	{r4, r5, r6, pc}
        Board_UARTPutSTR ("FSSDC: [Write] Card not initialized.\r\n");
1a003300:	4811      	ldr	r0, [pc, #68]	; (1a003348 <FSSDC_FatFs_DiskWrite+0xac>)
1a003302:	f000 faff 	bl	1a003904 <Board_UARTPutSTR>
        return RES_NOTRDY;
1a003306:	2003      	movs	r0, #3
1a003308:	e7f9      	b.n	1a0032fe <FSSDC_FatFs_DiskWrite+0x62>
        Board_UARTPutSTR ("FSSDC: [Write] Card is write protected.\r\n");
1a00330a:	4810      	ldr	r0, [pc, #64]	; (1a00334c <FSSDC_FatFs_DiskWrite+0xb0>)
1a00330c:	f000 fafa 	bl	1a003904 <Board_UARTPutSTR>
        return RES_WRPRT;
1a003310:	2002      	movs	r0, #2
1a003312:	e7f4      	b.n	1a0032fe <FSSDC_FatFs_DiskWrite+0x62>
		if ((send_cmd(CMD24, sector) == 0)      /* WRITE_BLOCK */
1a003314:	4631      	mov	r1, r6
1a003316:	2058      	movs	r0, #88	; 0x58
1a003318:	f7ff fdfe 	bl	1a002f18 <send_cmd>
1a00331c:	2800      	cmp	r0, #0
1a00331e:	d1e9      	bne.n	1a0032f4 <FSSDC_FatFs_DiskWrite+0x58>
                    && xmit_datablock(buff, 0xFE))
1a003320:	21fe      	movs	r1, #254	; 0xfe
1a003322:	4628      	mov	r0, r5
1a003324:	f7ff fe3a 	bl	1a002f9c <xmit_datablock>
1a003328:	2800      	cmp	r0, #0
1a00332a:	d0e3      	beq.n	1a0032f4 <FSSDC_FatFs_DiskWrite+0x58>
			count = 0;
1a00332c:	2400      	movs	r4, #0
1a00332e:	e7e1      	b.n	1a0032f4 <FSSDC_FatFs_DiskWrite+0x58>
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
1a003330:	4621      	mov	r1, r4
1a003332:	20d7      	movs	r0, #215	; 0xd7
1a003334:	f7ff fdf0 	bl	1a002f18 <send_cmd>
1a003338:	e7c9      	b.n	1a0032ce <FSSDC_FatFs_DiskWrite+0x32>
				count = 1;
1a00333a:	2401      	movs	r4, #1
1a00333c:	e7da      	b.n	1a0032f4 <FSSDC_FatFs_DiskWrite+0x58>
1a00333e:	bf00      	nop
1a003340:	10000001 	.word	0x10000001
1a003344:	10000534 	.word	0x10000534
1a003348:	1a005f74 	.word	0x1a005f74
1a00334c:	1a005f9c 	.word	0x1a005f9c

1a003350 <FSSDC_FatFs_DiskIoCtl>:

/*-----------------------------------------------------------------------*/
/* Miscellaneous Functions                                               */
/*-----------------------------------------------------------------------*/
DRESULT FSSDC_FatFs_DiskIoCtl (BYTE cmd, void *buff)
{
1a003350:	b530      	push	{r4, r5, lr}
1a003352:	b085      	sub	sp, #20
1a003354:	460c      	mov	r4, r1
	BYTE n, csd[16], *ptr = buff;
	WORD csize;

	res = RES_ERROR;

	if (cmd == CTRL_POWER)
1a003356:	2805      	cmp	r0, #5
1a003358:	d018      	beq.n	1a00338c <FSSDC_FatFs_DiskIoCtl+0x3c>
			res = RES_PARERR;
		}
	}
	else 
    {
		if (g_diskStats & STA_NOINIT)
1a00335a:	4bb4      	ldr	r3, [pc, #720]	; (1a00362c <FSSDC_FatFs_DiskIoCtl+0x2dc>)
1a00335c:	781b      	ldrb	r3, [r3, #0]
1a00335e:	f013 0f01 	tst.w	r3, #1
1a003362:	d11f      	bne.n	1a0033a4 <FSSDC_FatFs_DiskIoCtl+0x54>
        {
            Board_UARTPutSTR ("FSSDC: [IOCtl] Card not initialized.\r\n");
            return RES_NOTRDY;
        }

		switch (cmd) {
1a003364:	280e      	cmp	r0, #14
1a003366:	f200 8148 	bhi.w	1a0035fa <FSSDC_FatFs_DiskIoCtl+0x2aa>
1a00336a:	e8df f010 	tbh	[pc, r0, lsl #1]
1a00336e:	0020      	.short	0x0020
1a003370:	006d002b 	.word	0x006d002b
1a003374:	01460074 	.word	0x01460074
1a003378:	01460146 	.word	0x01460146
1a00337c:	01460146 	.word	0x01460146
1a003380:	00d20146 	.word	0x00d20146
1a003384:	00e900d9 	.word	0x00e900d9
1a003388:	010a00f7 	.word	0x010a00f7
		switch (*ptr) {
1a00338c:	780b      	ldrb	r3, [r1, #0]
1a00338e:	2b01      	cmp	r3, #1
1a003390:	f240 814a 	bls.w	1a003628 <FSSDC_FatFs_DiskIoCtl+0x2d8>
1a003394:	2b02      	cmp	r3, #2
1a003396:	f040 8140 	bne.w	1a00361a <FSSDC_FatFs_DiskIoCtl+0x2ca>
			*(ptr+1) = (BYTE)chk_power();
1a00339a:	f7ff fd4b 	bl	1a002e34 <chk_power>
1a00339e:	7060      	strb	r0, [r4, #1]
			res = RES_OK;
1a0033a0:	2400      	movs	r4, #0
1a0033a2:	e13e      	b.n	1a003622 <FSSDC_FatFs_DiskIoCtl+0x2d2>
            Board_UARTPutSTR ("FSSDC: [IOCtl] Card not initialized.\r\n");
1a0033a4:	48a2      	ldr	r0, [pc, #648]	; (1a003630 <FSSDC_FatFs_DiskIoCtl+0x2e0>)
1a0033a6:	f000 faad 	bl	1a003904 <Board_UARTPutSTR>
            return RES_NOTRDY;
1a0033aa:	2403      	movs	r4, #3
1a0033ac:	e139      	b.n	1a003622 <FSSDC_FatFs_DiskIoCtl+0x2d2>
		case CTRL_SYNC :                    /* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select_()) 
1a0033ae:	f7ff fda1 	bl	1a002ef4 <select_>
1a0033b2:	2800      	cmp	r0, #0
1a0033b4:	f000 811d 	beq.w	1a0035f2 <FSSDC_FatFs_DiskIoCtl+0x2a2>
            {
				res = RES_OK;
				deselect();
1a0033b8:	f7ff fd90 	bl	1a002edc <deselect>

		default:
			res = RES_PARERR;
		}

		deselect();
1a0033bc:	f7ff fd8e 	bl	1a002edc <deselect>
				res = RES_OK;
1a0033c0:	2400      	movs	r4, #0
1a0033c2:	e12e      	b.n	1a003622 <FSSDC_FatFs_DiskIoCtl+0x2d2>
			if ((send_cmd(CMD9, 0) == 0) 
1a0033c4:	2100      	movs	r1, #0
1a0033c6:	2049      	movs	r0, #73	; 0x49
1a0033c8:	f7ff fda6 	bl	1a002f18 <send_cmd>
1a0033cc:	2800      	cmp	r0, #0
1a0033ce:	f040 810c 	bne.w	1a0035ea <FSSDC_FatFs_DiskIoCtl+0x29a>
                    && rcvr_datablock(csd, 16))
1a0033d2:	2110      	movs	r1, #16
1a0033d4:	4668      	mov	r0, sp
1a0033d6:	f7ff fe0f 	bl	1a002ff8 <rcvr_datablock>
1a0033da:	2800      	cmp	r0, #0
1a0033dc:	f000 8119 	beq.w	1a003612 <FSSDC_FatFs_DiskIoCtl+0x2c2>
				if ((csd[0] >> 6) == 1) 
1a0033e0:	f89d 3000 	ldrb.w	r3, [sp]
1a0033e4:	099b      	lsrs	r3, r3, #6
1a0033e6:	2b01      	cmp	r3, #1
1a0033e8:	d022      	beq.n	1a003430 <FSSDC_FatFs_DiskIoCtl+0xe0>
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
1a0033ea:	f89d 2005 	ldrb.w	r2, [sp, #5]
1a0033ee:	f002 020f 	and.w	r2, r2, #15
1a0033f2:	f89d 300a 	ldrb.w	r3, [sp, #10]
1a0033f6:	eb02 12d3 	add.w	r2, r2, r3, lsr #7
1a0033fa:	f89d 3009 	ldrb.w	r3, [sp, #9]
1a0033fe:	005b      	lsls	r3, r3, #1
1a003400:	f003 0306 	and.w	r3, r3, #6
1a003404:	441a      	add	r2, r3
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
1a003406:	f89d 3008 	ldrb.w	r3, [sp, #8]
1a00340a:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a00340e:	099b      	lsrs	r3, r3, #6
1a003410:	eb03 0381 	add.w	r3, r3, r1, lsl #2
1a003414:	f89d 1006 	ldrb.w	r1, [sp, #6]
1a003418:	0289      	lsls	r1, r1, #10
1a00341a:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
1a00341e:	440b      	add	r3, r1
1a003420:	3301      	adds	r3, #1
					*(DWORD*)buff = (DWORD)csize << (n - 9);
1a003422:	3a07      	subs	r2, #7
1a003424:	4093      	lsls	r3, r2
1a003426:	6023      	str	r3, [r4, #0]
		deselect();
1a003428:	f7ff fd58 	bl	1a002edc <deselect>
				res = RES_OK;
1a00342c:	2400      	movs	r4, #0
1a00342e:	e0f8      	b.n	1a003622 <FSSDC_FatFs_DiskIoCtl+0x2d2>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
1a003430:	f89d 3009 	ldrb.w	r3, [sp, #9]
1a003434:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003438:	eb03 2302 	add.w	r3, r3, r2, lsl #8
1a00343c:	b29b      	uxth	r3, r3
1a00343e:	3301      	adds	r3, #1
1a003440:	b29b      	uxth	r3, r3
					*(DWORD*)buff = (DWORD)csize << 10;
1a003442:	029b      	lsls	r3, r3, #10
1a003444:	6023      	str	r3, [r4, #0]
1a003446:	e7ef      	b.n	1a003428 <FSSDC_FatFs_DiskIoCtl+0xd8>
			*(WORD*)buff = 512;
1a003448:	f44f 7300 	mov.w	r3, #512	; 0x200
1a00344c:	800b      	strh	r3, [r1, #0]
		deselect();
1a00344e:	f7ff fd45 	bl	1a002edc <deselect>
			res = RES_OK;
1a003452:	2400      	movs	r4, #0
1a003454:	e0e5      	b.n	1a003622 <FSSDC_FatFs_DiskIoCtl+0x2d2>
			if (CardType & CT_SD2) {                            /* SDC ver 2.00 */
1a003456:	4b77      	ldr	r3, [pc, #476]	; (1a003634 <FSSDC_FatFs_DiskIoCtl+0x2e4>)
1a003458:	781b      	ldrb	r3, [r3, #0]
1a00345a:	f013 0f04 	tst.w	r3, #4
1a00345e:	d021      	beq.n	1a0034a4 <FSSDC_FatFs_DiskIoCtl+0x154>
				if (send_cmd(ACMD13, 0) == 0)                   /* Read SD status */
1a003460:	2100      	movs	r1, #0
1a003462:	20cd      	movs	r0, #205	; 0xcd
1a003464:	f7ff fd58 	bl	1a002f18 <send_cmd>
1a003468:	2800      	cmp	r0, #0
1a00346a:	f040 80b6 	bne.w	1a0035da <FSSDC_FatFs_DiskIoCtl+0x28a>
					rcvr_spi();
1a00346e:	f7ff fd13 	bl	1a002e98 <rcvr_spi>
					if (rcvr_datablock(csd, 16))                /* Read partial block */
1a003472:	2110      	movs	r1, #16
1a003474:	4668      	mov	r0, sp
1a003476:	f7ff fdbf 	bl	1a002ff8 <rcvr_datablock>
1a00347a:	2800      	cmp	r0, #0
1a00347c:	f000 80b1 	beq.w	1a0035e2 <FSSDC_FatFs_DiskIoCtl+0x292>
						for (n = 64 - 16; n; n--) 
1a003480:	2530      	movs	r5, #48	; 0x30
1a003482:	e003      	b.n	1a00348c <FSSDC_FatFs_DiskIoCtl+0x13c>
                            rcvr_spi();                         /* Purge trailing data */
1a003484:	f7ff fd08 	bl	1a002e98 <rcvr_spi>
						for (n = 64 - 16; n; n--) 
1a003488:	3d01      	subs	r5, #1
1a00348a:	b2ed      	uxtb	r5, r5
1a00348c:	2d00      	cmp	r5, #0
1a00348e:	d1f9      	bne.n	1a003484 <FSSDC_FatFs_DiskIoCtl+0x134>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
1a003490:	f89d 300a 	ldrb.w	r3, [sp, #10]
1a003494:	091a      	lsrs	r2, r3, #4
1a003496:	2310      	movs	r3, #16
1a003498:	4093      	lsls	r3, r2
1a00349a:	6023      	str	r3, [r4, #0]
		deselect();
1a00349c:	f7ff fd1e 	bl	1a002edc <deselect>
						res = RES_OK;
1a0034a0:	2400      	movs	r4, #0
1a0034a2:	e0be      	b.n	1a003622 <FSSDC_FatFs_DiskIoCtl+0x2d2>
				if ((send_cmd(CMD9, 0) == 0) 
1a0034a4:	2100      	movs	r1, #0
1a0034a6:	2049      	movs	r0, #73	; 0x49
1a0034a8:	f7ff fd36 	bl	1a002f18 <send_cmd>
1a0034ac:	2800      	cmp	r0, #0
1a0034ae:	f040 80ac 	bne.w	1a00360a <FSSDC_FatFs_DiskIoCtl+0x2ba>
                        && rcvr_datablock(csd, 16)) 
1a0034b2:	2110      	movs	r1, #16
1a0034b4:	4668      	mov	r0, sp
1a0034b6:	f7ff fd9f 	bl	1a002ff8 <rcvr_datablock>
1a0034ba:	2800      	cmp	r0, #0
1a0034bc:	f000 8089 	beq.w	1a0035d2 <FSSDC_FatFs_DiskIoCtl+0x282>
					if (CardType & CT_SD1)
1a0034c0:	4b5c      	ldr	r3, [pc, #368]	; (1a003634 <FSSDC_FatFs_DiskIoCtl+0x2e4>)
1a0034c2:	781b      	ldrb	r3, [r3, #0]
1a0034c4:	f013 0f02 	tst.w	r3, #2
1a0034c8:	d013      	beq.n	1a0034f2 <FSSDC_FatFs_DiskIoCtl+0x1a2>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
1a0034ca:	f89d 300a 	ldrb.w	r3, [sp, #10]
1a0034ce:	005b      	lsls	r3, r3, #1
1a0034d0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
1a0034d4:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a0034d8:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
1a0034dc:	3301      	adds	r3, #1
1a0034de:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0034e2:	0992      	lsrs	r2, r2, #6
1a0034e4:	3a01      	subs	r2, #1
1a0034e6:	4093      	lsls	r3, r2
1a0034e8:	6023      	str	r3, [r4, #0]
		deselect();
1a0034ea:	f7ff fcf7 	bl	1a002edc <deselect>
					res = RES_OK;
1a0034ee:	2400      	movs	r4, #0
1a0034f0:	e097      	b.n	1a003622 <FSSDC_FatFs_DiskIoCtl+0x2d2>
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
1a0034f2:	f89d 300a 	ldrb.w	r3, [sp, #10]
1a0034f6:	f3c3 0284 	ubfx	r2, r3, #2, #5
1a0034fa:	f89d 100b 	ldrb.w	r1, [sp, #11]
1a0034fe:	00cb      	lsls	r3, r1, #3
1a003500:	f003 0318 	and.w	r3, r3, #24
1a003504:	eb03 1351 	add.w	r3, r3, r1, lsr #5
1a003508:	3301      	adds	r3, #1
1a00350a:	fb02 3303 	mla	r3, r2, r3, r3
1a00350e:	6023      	str	r3, [r4, #0]
1a003510:	e7eb      	b.n	1a0034ea <FSSDC_FatFs_DiskIoCtl+0x19a>
			*ptr = CardType;
1a003512:	4b48      	ldr	r3, [pc, #288]	; (1a003634 <FSSDC_FatFs_DiskIoCtl+0x2e4>)
1a003514:	781b      	ldrb	r3, [r3, #0]
1a003516:	700b      	strb	r3, [r1, #0]
		deselect();
1a003518:	f7ff fce0 	bl	1a002edc <deselect>
			res = RES_OK;
1a00351c:	2400      	movs	r4, #0
1a00351e:	e080      	b.n	1a003622 <FSSDC_FatFs_DiskIoCtl+0x2d2>
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
1a003520:	2100      	movs	r1, #0
1a003522:	2049      	movs	r0, #73	; 0x49
1a003524:	f7ff fcf8 	bl	1a002f18 <send_cmd>
1a003528:	2800      	cmp	r0, #0
1a00352a:	d14e      	bne.n	1a0035ca <FSSDC_FatFs_DiskIoCtl+0x27a>
                    && rcvr_datablock(ptr, 16))
1a00352c:	2110      	movs	r1, #16
1a00352e:	4620      	mov	r0, r4
1a003530:	f7ff fd62 	bl	1a002ff8 <rcvr_datablock>
1a003534:	2800      	cmp	r0, #0
1a003536:	d144      	bne.n	1a0035c2 <FSSDC_FatFs_DiskIoCtl+0x272>
		deselect();
1a003538:	f7ff fcd0 	bl	1a002edc <deselect>
	res = RES_ERROR;
1a00353c:	2401      	movs	r4, #1
1a00353e:	e06d      	b.n	1a00361c <FSSDC_FatFs_DiskIoCtl+0x2cc>
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
1a003540:	2100      	movs	r1, #0
1a003542:	204a      	movs	r0, #74	; 0x4a
1a003544:	f7ff fce8 	bl	1a002f18 <send_cmd>
1a003548:	bbb8      	cbnz	r0, 1a0035ba <FSSDC_FatFs_DiskIoCtl+0x26a>
                    && rcvr_datablock(ptr, 16))
1a00354a:	2110      	movs	r1, #16
1a00354c:	4620      	mov	r0, r4
1a00354e:	f7ff fd53 	bl	1a002ff8 <rcvr_datablock>
1a003552:	bb70      	cbnz	r0, 1a0035b2 <FSSDC_FatFs_DiskIoCtl+0x262>
		deselect();
1a003554:	f7ff fcc2 	bl	1a002edc <deselect>
	res = RES_ERROR;
1a003558:	2401      	movs	r4, #1
1a00355a:	e05f      	b.n	1a00361c <FSSDC_FatFs_DiskIoCtl+0x2cc>
			if (send_cmd(CMD58, 0) == 0) 
1a00355c:	2100      	movs	r1, #0
1a00355e:	207a      	movs	r0, #122	; 0x7a
1a003560:	f7ff fcda 	bl	1a002f18 <send_cmd>
1a003564:	bb08      	cbnz	r0, 1a0035aa <FSSDC_FatFs_DiskIoCtl+0x25a>
				for (n = 4; n; n--) 
1a003566:	2504      	movs	r5, #4
1a003568:	e005      	b.n	1a003576 <FSSDC_FatFs_DiskIoCtl+0x226>
                    *ptr++ = rcvr_spi();
1a00356a:	f7ff fc95 	bl	1a002e98 <rcvr_spi>
1a00356e:	f804 0b01 	strb.w	r0, [r4], #1
				for (n = 4; n; n--) 
1a003572:	3d01      	subs	r5, #1
1a003574:	b2ed      	uxtb	r5, r5
1a003576:	2d00      	cmp	r5, #0
1a003578:	d1f7      	bne.n	1a00356a <FSSDC_FatFs_DiskIoCtl+0x21a>
		deselect();
1a00357a:	f7ff fcaf 	bl	1a002edc <deselect>
				res = RES_OK;
1a00357e:	2400      	movs	r4, #0
1a003580:	e04f      	b.n	1a003622 <FSSDC_FatFs_DiskIoCtl+0x2d2>
			if (send_cmd(ACMD13, 0) == 0) 
1a003582:	2100      	movs	r1, #0
1a003584:	20cd      	movs	r0, #205	; 0xcd
1a003586:	f7ff fcc7 	bl	1a002f18 <send_cmd>
1a00358a:	b950      	cbnz	r0, 1a0035a2 <FSSDC_FatFs_DiskIoCtl+0x252>
				rcvr_spi();
1a00358c:	f7ff fc84 	bl	1a002e98 <rcvr_spi>
				if (rcvr_datablock(ptr, 64))
1a003590:	2140      	movs	r1, #64	; 0x40
1a003592:	4620      	mov	r0, r4
1a003594:	f7ff fd30 	bl	1a002ff8 <rcvr_datablock>
1a003598:	b398      	cbz	r0, 1a003602 <FSSDC_FatFs_DiskIoCtl+0x2b2>
		deselect();
1a00359a:	f7ff fc9f 	bl	1a002edc <deselect>
					res = RES_OK;
1a00359e:	2400      	movs	r4, #0
1a0035a0:	e03f      	b.n	1a003622 <FSSDC_FatFs_DiskIoCtl+0x2d2>
		deselect();
1a0035a2:	f7ff fc9b 	bl	1a002edc <deselect>
	res = RES_ERROR;
1a0035a6:	2401      	movs	r4, #1
1a0035a8:	e038      	b.n	1a00361c <FSSDC_FatFs_DiskIoCtl+0x2cc>
		deselect();
1a0035aa:	f7ff fc97 	bl	1a002edc <deselect>
	res = RES_ERROR;
1a0035ae:	2401      	movs	r4, #1
1a0035b0:	e034      	b.n	1a00361c <FSSDC_FatFs_DiskIoCtl+0x2cc>
		deselect();
1a0035b2:	f7ff fc93 	bl	1a002edc <deselect>
				res = RES_OK;
1a0035b6:	2400      	movs	r4, #0
1a0035b8:	e033      	b.n	1a003622 <FSSDC_FatFs_DiskIoCtl+0x2d2>
		deselect();
1a0035ba:	f7ff fc8f 	bl	1a002edc <deselect>
	res = RES_ERROR;
1a0035be:	2401      	movs	r4, #1
1a0035c0:	e02c      	b.n	1a00361c <FSSDC_FatFs_DiskIoCtl+0x2cc>
		deselect();
1a0035c2:	f7ff fc8b 	bl	1a002edc <deselect>
				res = RES_OK;
1a0035c6:	2400      	movs	r4, #0
1a0035c8:	e02b      	b.n	1a003622 <FSSDC_FatFs_DiskIoCtl+0x2d2>
		deselect();
1a0035ca:	f7ff fc87 	bl	1a002edc <deselect>
	res = RES_ERROR;
1a0035ce:	2401      	movs	r4, #1
1a0035d0:	e024      	b.n	1a00361c <FSSDC_FatFs_DiskIoCtl+0x2cc>
		deselect();
1a0035d2:	f7ff fc83 	bl	1a002edc <deselect>
	res = RES_ERROR;
1a0035d6:	2401      	movs	r4, #1
1a0035d8:	e020      	b.n	1a00361c <FSSDC_FatFs_DiskIoCtl+0x2cc>
		deselect();
1a0035da:	f7ff fc7f 	bl	1a002edc <deselect>
	res = RES_ERROR;
1a0035de:	2401      	movs	r4, #1
1a0035e0:	e01c      	b.n	1a00361c <FSSDC_FatFs_DiskIoCtl+0x2cc>
		deselect();
1a0035e2:	f7ff fc7b 	bl	1a002edc <deselect>
	res = RES_ERROR;
1a0035e6:	2401      	movs	r4, #1
1a0035e8:	e018      	b.n	1a00361c <FSSDC_FatFs_DiskIoCtl+0x2cc>
		deselect();
1a0035ea:	f7ff fc77 	bl	1a002edc <deselect>
	res = RES_ERROR;
1a0035ee:	2401      	movs	r4, #1
1a0035f0:	e014      	b.n	1a00361c <FSSDC_FatFs_DiskIoCtl+0x2cc>
		deselect();
1a0035f2:	f7ff fc73 	bl	1a002edc <deselect>
	res = RES_ERROR;
1a0035f6:	2401      	movs	r4, #1
1a0035f8:	e010      	b.n	1a00361c <FSSDC_FatFs_DiskIoCtl+0x2cc>
		deselect();
1a0035fa:	f7ff fc6f 	bl	1a002edc <deselect>
			res = RES_PARERR;
1a0035fe:	2404      	movs	r4, #4
1a003600:	e00c      	b.n	1a00361c <FSSDC_FatFs_DiskIoCtl+0x2cc>
		deselect();
1a003602:	f7ff fc6b 	bl	1a002edc <deselect>
	res = RES_ERROR;
1a003606:	2401      	movs	r4, #1
1a003608:	e008      	b.n	1a00361c <FSSDC_FatFs_DiskIoCtl+0x2cc>
		deselect();
1a00360a:	f7ff fc67 	bl	1a002edc <deselect>
	res = RES_ERROR;
1a00360e:	2401      	movs	r4, #1
1a003610:	e004      	b.n	1a00361c <FSSDC_FatFs_DiskIoCtl+0x2cc>
		deselect();
1a003612:	f7ff fc63 	bl	1a002edc <deselect>
	res = RES_ERROR;
1a003616:	2401      	movs	r4, #1
1a003618:	e000      	b.n	1a00361c <FSSDC_FatFs_DiskIoCtl+0x2cc>
			res = RES_PARERR;
1a00361a:	2404      	movs	r4, #4
	}
    
    if (res != RES_OK)
    {
        Board_UARTPutSTR ("FSSDC: [IOCtl] Returning Error.\r\n");        
1a00361c:	4806      	ldr	r0, [pc, #24]	; (1a003638 <FSSDC_FatFs_DiskIoCtl+0x2e8>)
1a00361e:	f000 f971 	bl	1a003904 <Board_UARTPutSTR>
    }

	return res;
}
1a003622:	4620      	mov	r0, r4
1a003624:	b005      	add	sp, #20
1a003626:	bd30      	pop	{r4, r5, pc}
			res = RES_OK;
1a003628:	2400      	movs	r4, #0
1a00362a:	e7fa      	b.n	1a003622 <FSSDC_FatFs_DiskIoCtl+0x2d2>
1a00362c:	10000001 	.word	0x10000001
1a003630:	1a005f00 	.word	0x1a005f00
1a003634:	10000534 	.word	0x10000534
1a003638:	1a005f28 	.word	0x1a005f28

1a00363c <FSSDC_InitSPI>:
    WARNING: for card connectors without presence detection
    >>>> Only call this function when the card is inserted!
--------------------------------------------------------------------------------
*/
void FSSDC_InitSPI ()
{
1a00363c:	b510      	push	{r4, lr}
        seems to work at mode 0 at the SPI mode. Thus the SPI mode 0 (CPHA=0, CPOL=0)
        is the proper setting to control MMC/SDC
        
        http://elm-chan.org/docs/mmc/mmc_e.html#spimode
    */
    Chip_SSP_Init       (LPC_SSP1);
1a00363e:	4c13      	ldr	r4, [pc, #76]	; (1a00368c <FSSDC_InitSPI+0x50>)
1a003640:	4620      	mov	r0, r4
1a003642:	f000 ffed 	bl	1a004620 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a003646:	6863      	ldr	r3, [r4, #4]
1a003648:	f023 0304 	bic.w	r3, r3, #4
1a00364c:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00364e:	6823      	ldr	r3, [r4, #0]
1a003650:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003654:	f043 0307 	orr.w	r3, r3, #7
1a003658:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode   (LPC_SSP1, SSP_MODE_MASTER);
    Chip_SSP_SetFormat  (LPC_SSP1, SSP_BITS_8, SSP_FRAMEFORMAT_SPI,
                         SSP_CLOCK_CPHA0_CPOL0);
    FCLK_SLOW           ();
1a00365a:	4b0d      	ldr	r3, [pc, #52]	; (1a003690 <FSSDC_InitSPI+0x54>)
1a00365c:	6819      	ldr	r1, [r3, #0]
1a00365e:	4620      	mov	r0, r4
1a003660:	f000 ffbf 	bl	1a0045e2 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a003664:	6863      	ldr	r3, [r4, #4]
1a003666:	f043 0302 	orr.w	r3, r3, #2
1a00366a:	6063      	str	r3, [r4, #4]
    Chip_SSP_Enable     (LPC_SSP1);
    
    // PLEASE NOTE: muxing and direction of CS signal on FSSDC_CS_{PIN/PORT}
    //              must be configured beforehand!
    deselect ();    
1a00366c:	f7ff fc36 	bl	1a002edc <deselect>
    
#ifndef FSSDC_SUPPORTS_HOT_INSERTION
    g_diskStats &= ~STA_NODISK;
1a003670:	4a08      	ldr	r2, [pc, #32]	; (1a003694 <FSSDC_InitSPI+0x58>)
1a003672:	7813      	ldrb	r3, [r2, #0]
1a003674:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
1a003678:	7013      	strb	r3, [r2, #0]
    Board_UARTPutSTR ("FSSDC: [InitSPI] New card status: Inserted.\r\n");
1a00367a:	4807      	ldr	r0, [pc, #28]	; (1a003698 <FSSDC_InitSPI+0x5c>)
1a00367c:	f000 f942 	bl	1a003904 <Board_UARTPutSTR>
    newCardStatus (FSSDC_CardStatus_Inserted);
1a003680:	2002      	movs	r0, #2
1a003682:	f7ff fbcb 	bl	1a002e1c <newCardStatus>
    FSSDC_FatFs_DiskInitialize ();
1a003686:	f7ff fced 	bl	1a003064 <FSSDC_FatFs_DiskInitialize>
#endif
}
1a00368a:	bd10      	pop	{r4, pc}
1a00368c:	400c5000 	.word	0x400c5000
1a003690:	10000008 	.word	0x10000008
1a003694:	10000001 	.word	0x10000001
1a003698:	1a005fc8 	.word	0x1a005fc8

1a00369c <FSSDC_Update>:
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */
void FSSDC_Update ()
{   
    if (Timer1)             /* 100Hz decrement timer */
1a00369c:	4b08      	ldr	r3, [pc, #32]	; (1a0036c0 <FSSDC_Update+0x24>)
1a00369e:	781b      	ldrb	r3, [r3, #0]
1a0036a0:	b123      	cbz	r3, 1a0036ac <FSSDC_Update+0x10>
    {
        -- Timer1;
1a0036a2:	4a07      	ldr	r2, [pc, #28]	; (1a0036c0 <FSSDC_Update+0x24>)
1a0036a4:	7813      	ldrb	r3, [r2, #0]
1a0036a6:	3b01      	subs	r3, #1
1a0036a8:	b2db      	uxtb	r3, r3
1a0036aa:	7013      	strb	r3, [r2, #0]
    }
    
    if (Timer2)
1a0036ac:	4b05      	ldr	r3, [pc, #20]	; (1a0036c4 <FSSDC_Update+0x28>)
1a0036ae:	781b      	ldrb	r3, [r3, #0]
1a0036b0:	b123      	cbz	r3, 1a0036bc <FSSDC_Update+0x20>
    {
        -- Timer2;
1a0036b2:	4a04      	ldr	r2, [pc, #16]	; (1a0036c4 <FSSDC_Update+0x28>)
1a0036b4:	7813      	ldrb	r3, [r2, #0]
1a0036b6:	3b01      	subs	r3, #1
1a0036b8:	b2db      	uxtb	r3, r3
1a0036ba:	7013      	strb	r3, [r2, #0]
			s &= ~STA_NODISK;

		g_diskStats = s;
	}
    #endif
}
1a0036bc:	4770      	bx	lr
1a0036be:	bf00      	nop
1a0036c0:	10000535 	.word	0x10000535
1a0036c4:	10000536 	.word	0x10000536

1a0036c8 <get_fattime>:


// Definitions required by FatFs according to ffconf.h
#if !FF_FS_READONLY && !FF_FS_NORTC
DWORD get_fattime (void)
{
1a0036c8:	b500      	push	{lr}
1a0036ca:	b089      	sub	sp, #36	; 0x24
	/* Get local time */
    RTC_TIME_T rtcTime;
	Chip_RTC_GetFullTime (LPC_RTC, &rtcTime);
1a0036cc:	4669      	mov	r1, sp
1a0036ce:	480c      	ldr	r0, [pc, #48]	; (1a003700 <get_fattime+0x38>)
1a0036d0:	f000 fe6d 	bl	1a0043ae <Chip_RTC_GetFullTime>

	/* Pack date and time into a DWORD variable */
	return (  (DWORD) (rtcTime.time[RTC_TIMETYPE_YEAR] - 1980)  << 25)
1a0036d4:	9b07      	ldr	r3, [sp, #28]
1a0036d6:	f2a3 70bc 	subw	r0, r3, #1980	; 0x7bc
		   | ((DWORD)  rtcTime.time[RTC_TIMETYPE_MONTH]         << 21)
1a0036da:	9b06      	ldr	r3, [sp, #24]
1a0036dc:	055b      	lsls	r3, r3, #21
1a0036de:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
		   | ((DWORD)  rtcTime.time[RTC_TIMETYPE_DAYOFMONTH]    << 16)
1a0036e2:	9803      	ldr	r0, [sp, #12]
1a0036e4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
		   | ((DWORD)  rtcTime.time[RTC_TIMETYPE_HOUR]          << 11)
1a0036e8:	9802      	ldr	r0, [sp, #8]
1a0036ea:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
		   | ((DWORD)  rtcTime.time[RTC_TIMETYPE_MINUTE]        << 5)
1a0036ee:	9801      	ldr	r0, [sp, #4]
1a0036f0:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
		   | ((DWORD)  rtcTime.time[RTC_TIMETYPE_SECOND]        >> 1);
}
1a0036f4:	9800      	ldr	r0, [sp, #0]
1a0036f6:	ea43 0050 	orr.w	r0, r3, r0, lsr #1
1a0036fa:	b009      	add	sp, #36	; 0x24
1a0036fc:	f85d fb04 	ldr.w	pc, [sp], #4
1a003700:	40046000 	.word	0x40046000

1a003704 <disk_timerproc>:
};
#endif

// Must be called once every 10 ms ideally from PendSV, not SysTickHandler!
void disk_timerproc (void)
{
1a003704:	b508      	push	{r3, lr}
    FSSDC_Update ();
1a003706:	f7ff ffc9 	bl	1a00369c <FSSDC_Update>
    #ifdef LPCUSBLIB_HOST_MASS_STORAGE
    FSUSB_Update ();
    #endif
}
1a00370a:	bd08      	pop	{r3, pc}

1a00370c <disk_status>:

DSTATUS disk_status (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{    
    switch (pdrv)
1a00370c:	b108      	cbz	r0, 1a003712 <disk_status+0x6>
            #else
            break;
            #endif
    }

    return STA_NOINIT;
1a00370e:	2001      	movs	r0, #1
}
1a003710:	4770      	bx	lr
{    
1a003712:	b508      	push	{r3, lr}
            return FSSDC_FatFs_DiskStatus ();
1a003714:	f7ff fca0 	bl	1a003058 <FSSDC_FatFs_DiskStatus>
}
1a003718:	bd08      	pop	{r3, pc}

1a00371a <disk_initialize>:

DSTATUS disk_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv)
1a00371a:	b108      	cbz	r0, 1a003720 <disk_initialize+0x6>
            #else
            break;
            #endif
    }
    
    return STA_NOINIT;
1a00371c:	2001      	movs	r0, #1
}
1a00371e:	4770      	bx	lr
{
1a003720:	b508      	push	{r3, lr}
            return FSSDC_FatFs_DiskInitialize ();
1a003722:	f7ff fc9f 	bl	1a003064 <FSSDC_FatFs_DiskInitialize>
}
1a003726:	bd08      	pop	{r3, pc}

1a003728 <disk_read>:
	BYTE *buff,         /* Data buffer to store read data */
	DWORD sector,       /* Start sector in LBA */
	UINT count          /* Number of sectors to read */
)
{
	if (!buff || !count) 
1a003728:	b151      	cbz	r1, 1a003740 <disk_read+0x18>
{
1a00372a:	b510      	push	{r4, lr}
	if (!buff || !count) 
1a00372c:	b153      	cbz	r3, 1a003744 <disk_read+0x1c>
    {
		return RES_PARERR;
	}
    
    switch (pdrv)
1a00372e:	b108      	cbz	r0, 1a003734 <disk_read+0xc>
            #else
            break;
            #endif
    }
    
    return RES_PARERR;
1a003730:	2004      	movs	r0, #4
}
1a003732:	bd10      	pop	{r4, pc}
1a003734:	4608      	mov	r0, r1
1a003736:	4611      	mov	r1, r2
            return FSSDC_FatFs_DiskRead (buff, sector, count);
1a003738:	461a      	mov	r2, r3
1a00373a:	f7ff fd6d 	bl	1a003218 <FSSDC_FatFs_DiskRead>
1a00373e:	e7f8      	b.n	1a003732 <disk_read+0xa>
		return RES_PARERR;
1a003740:	2004      	movs	r0, #4
}
1a003742:	4770      	bx	lr
		return RES_PARERR;
1a003744:	2004      	movs	r0, #4
1a003746:	e7f4      	b.n	1a003732 <disk_read+0xa>

1a003748 <disk_write>:
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
	if (!buff || !count)
1a003748:	b151      	cbz	r1, 1a003760 <disk_write+0x18>
{
1a00374a:	b510      	push	{r4, lr}
	if (!buff || !count)
1a00374c:	b153      	cbz	r3, 1a003764 <disk_write+0x1c>
    {
		return RES_PARERR;
	}
    
    switch (pdrv)
1a00374e:	b108      	cbz	r0, 1a003754 <disk_write+0xc>
            #else
            break;
            #endif
    }
    
	return RES_PARERR;
1a003750:	2004      	movs	r0, #4
}
1a003752:	bd10      	pop	{r4, pc}
1a003754:	4608      	mov	r0, r1
1a003756:	4611      	mov	r1, r2
            return FSSDC_FatFs_DiskWrite (buff, sector, count);
1a003758:	461a      	mov	r2, r3
1a00375a:	f7ff fd9f 	bl	1a00329c <FSSDC_FatFs_DiskWrite>
1a00375e:	e7f8      	b.n	1a003752 <disk_write+0xa>
		return RES_PARERR;
1a003760:	2004      	movs	r0, #4
}
1a003762:	4770      	bx	lr
		return RES_PARERR;
1a003764:	2004      	movs	r0, #4
1a003766:	e7f4      	b.n	1a003752 <disk_write+0xa>

1a003768 <disk_ioctl>:
	BYTE pdrv,          /* Physical drive nmuber (0..) */
	BYTE cmd,           /* Control code */
	void *buff          /* Buffer to send/receive control data */
)
{   
    switch (pdrv)
1a003768:	b108      	cbz	r0, 1a00376e <disk_ioctl+0x6>
            #else
            break;
            #endif
    }

	return RES_PARERR;
1a00376a:	2004      	movs	r0, #4
}
1a00376c:	4770      	bx	lr
{   
1a00376e:	b508      	push	{r3, lr}
1a003770:	4608      	mov	r0, r1
            return FSSDC_FatFs_DiskIoCtl (cmd, buff);
1a003772:	4611      	mov	r1, r2
1a003774:	f7ff fdec 	bl	1a003350 <FSSDC_FatFs_DiskIoCtl>
}
1a003778:	bd08      	pop	{r3, pc}
1a00377a:	Address 0x000000001a00377a is out of bounds.


1a00377c <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a00377c:	2200      	movs	r2, #0
1a00377e:	2a05      	cmp	r2, #5
1a003780:	d819      	bhi.n	1a0037b6 <Board_LED_Init+0x3a>
{
1a003782:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a003784:	490c      	ldr	r1, [pc, #48]	; (1a0037b8 <Board_LED_Init+0x3c>)
1a003786:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a00378a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a00378e:	784c      	ldrb	r4, [r1, #1]
	pGPIO->DIR[port] |= 1UL << pin;
1a003790:	4b0a      	ldr	r3, [pc, #40]	; (1a0037bc <Board_LED_Init+0x40>)
1a003792:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a003796:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a00379a:	2001      	movs	r0, #1
1a00379c:	40a0      	lsls	r0, r4
1a00379e:	4301      	orrs	r1, r0
1a0037a0:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a0037a4:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a0037a8:	2100      	movs	r1, #0
1a0037aa:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0037ac:	3201      	adds	r2, #1
1a0037ae:	2a05      	cmp	r2, #5
1a0037b0:	d9e8      	bls.n	1a003784 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a0037b2:	bc70      	pop	{r4, r5, r6}
1a0037b4:	4770      	bx	lr
1a0037b6:	4770      	bx	lr
1a0037b8:	1a006004 	.word	0x1a006004
1a0037bc:	400f4000 	.word	0x400f4000

1a0037c0 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0037c0:	2300      	movs	r3, #0
1a0037c2:	2b03      	cmp	r3, #3
1a0037c4:	d816      	bhi.n	1a0037f4 <Board_TEC_Init+0x34>
{
1a0037c6:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0037c8:	490b      	ldr	r1, [pc, #44]	; (1a0037f8 <Board_TEC_Init+0x38>)
1a0037ca:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0037ce:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0037d2:	784d      	ldrb	r5, [r1, #1]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0037d4:	4c09      	ldr	r4, [pc, #36]	; (1a0037fc <Board_TEC_Init+0x3c>)
1a0037d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0037da:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0037de:	2001      	movs	r0, #1
1a0037e0:	40a8      	lsls	r0, r5
1a0037e2:	ea21 0100 	bic.w	r1, r1, r0
1a0037e6:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0037ea:	3301      	adds	r3, #1
1a0037ec:	2b03      	cmp	r3, #3
1a0037ee:	d9eb      	bls.n	1a0037c8 <Board_TEC_Init+0x8>
   }
}
1a0037f0:	bc30      	pop	{r4, r5}
1a0037f2:	4770      	bx	lr
1a0037f4:	4770      	bx	lr
1a0037f6:	bf00      	nop
1a0037f8:	1a005ffc 	.word	0x1a005ffc
1a0037fc:	400f4000 	.word	0x400f4000

1a003800 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a003800:	2300      	movs	r3, #0
1a003802:	2b08      	cmp	r3, #8
1a003804:	d816      	bhi.n	1a003834 <Board_GPIO_Init+0x34>
{
1a003806:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a003808:	490b      	ldr	r1, [pc, #44]	; (1a003838 <Board_GPIO_Init+0x38>)
1a00380a:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00380e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a003812:	784d      	ldrb	r5, [r1, #1]
1a003814:	4c09      	ldr	r4, [pc, #36]	; (1a00383c <Board_GPIO_Init+0x3c>)
1a003816:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00381a:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a00381e:	2001      	movs	r0, #1
1a003820:	40a8      	lsls	r0, r5
1a003822:	ea21 0100 	bic.w	r1, r1, r0
1a003826:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a00382a:	3301      	adds	r3, #1
1a00382c:	2b08      	cmp	r3, #8
1a00382e:	d9eb      	bls.n	1a003808 <Board_GPIO_Init+0x8>
   }
}
1a003830:	bc30      	pop	{r4, r5}
1a003832:	4770      	bx	lr
1a003834:	4770      	bx	lr
1a003836:	bf00      	nop
1a003838:	1a006010 	.word	0x1a006010
1a00383c:	400f4000 	.word	0x400f4000

1a003840 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a003840:	b510      	push	{r4, lr}
1a003842:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a003844:	4c08      	ldr	r4, [pc, #32]	; (1a003868 <Board_ADC_Init+0x28>)
1a003846:	4669      	mov	r1, sp
1a003848:	4620      	mov	r0, r4
1a00384a:	f000 f9cb 	bl	1a003be4 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a00384e:	4a07      	ldr	r2, [pc, #28]	; (1a00386c <Board_ADC_Init+0x2c>)
1a003850:	4669      	mov	r1, sp
1a003852:	4620      	mov	r0, r4
1a003854:	f000 f9e6 	bl	1a003c24 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a003858:	2200      	movs	r2, #0
1a00385a:	4669      	mov	r1, sp
1a00385c:	4620      	mov	r0, r4
1a00385e:	f000 f9fa 	bl	1a003c56 <Chip_ADC_SetResolution>
}
1a003862:	b002      	add	sp, #8
1a003864:	bd10      	pop	{r4, pc}
1a003866:	bf00      	nop
1a003868:	400e3000 	.word	0x400e3000
1a00386c:	00061a80 	.word	0x00061a80

1a003870 <Board_SPI_Init>:
{
1a003870:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a003872:	4c0b      	ldr	r4, [pc, #44]	; (1a0038a0 <Board_SPI_Init+0x30>)
1a003874:	4620      	mov	r0, r4
1a003876:	f000 fed3 	bl	1a004620 <Chip_SSP_Init>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00387a:	6863      	ldr	r3, [r4, #4]
1a00387c:	f023 0304 	bic.w	r3, r3, #4
1a003880:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003882:	6823      	ldr	r3, [r4, #0]
1a003884:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003888:	f043 0307 	orr.w	r3, r3, #7
1a00388c:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a00388e:	4905      	ldr	r1, [pc, #20]	; (1a0038a4 <Board_SPI_Init+0x34>)
1a003890:	4620      	mov	r0, r4
1a003892:	f000 fea6 	bl	1a0045e2 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a003896:	6863      	ldr	r3, [r4, #4]
1a003898:	f043 0302 	orr.w	r3, r3, #2
1a00389c:	6063      	str	r3, [r4, #4]
}
1a00389e:	bd10      	pop	{r4, pc}
1a0038a0:	400c5000 	.word	0x400c5000
1a0038a4:	000186a0 	.word	0x000186a0

1a0038a8 <Board_I2C_Init>:
{
1a0038a8:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a0038aa:	2000      	movs	r0, #0
1a0038ac:	f000 fee4 	bl	1a004678 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0038b0:	4b04      	ldr	r3, [pc, #16]	; (1a0038c4 <Board_I2C_Init+0x1c>)
1a0038b2:	f640 0208 	movw	r2, #2056	; 0x808
1a0038b6:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0038ba:	4903      	ldr	r1, [pc, #12]	; (1a0038c8 <Board_I2C_Init+0x20>)
1a0038bc:	2000      	movs	r0, #0
1a0038be:	f000 feed 	bl	1a00469c <Chip_I2C_SetClockRate>
}
1a0038c2:	bd08      	pop	{r3, pc}
1a0038c4:	40086000 	.word	0x40086000
1a0038c8:	000f4240 	.word	0x000f4240

1a0038cc <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0038cc:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a0038ce:	4c07      	ldr	r4, [pc, #28]	; (1a0038ec <Board_Debug_Init+0x20>)
1a0038d0:	4620      	mov	r0, r4
1a0038d2:	f000 f8ab 	bl	1a003a2c <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0038d6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0038da:	4620      	mov	r0, r4
1a0038dc:	f000 f8f0 	bl	1a003ac0 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0038e0:	2303      	movs	r3, #3
1a0038e2:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0038e4:	2301      	movs	r3, #1
1a0038e6:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a0038e8:	bd10      	pop	{r4, pc}
1a0038ea:	bf00      	nop
1a0038ec:	400c1000 	.word	0x400c1000

1a0038f0 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0038f0:	4b03      	ldr	r3, [pc, #12]	; (1a003900 <Board_UARTPutChar+0x10>)
1a0038f2:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a0038f4:	f013 0f20 	tst.w	r3, #32
1a0038f8:	d0fa      	beq.n	1a0038f0 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a0038fa:	4b01      	ldr	r3, [pc, #4]	; (1a003900 <Board_UARTPutChar+0x10>)
1a0038fc:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a0038fe:	4770      	bx	lr
1a003900:	400c1000 	.word	0x400c1000

1a003904 <Board_UARTPutSTR>:
   return EOF;
}


void Board_UARTPutSTR(const char *str)
{
1a003904:	b510      	push	{r4, lr}
1a003906:	4604      	mov	r4, r0
   while (*str != '\0') {
1a003908:	7820      	ldrb	r0, [r4, #0]
1a00390a:	b118      	cbz	r0, 1a003914 <Board_UARTPutSTR+0x10>
      Board_UARTPutChar(*str++);
1a00390c:	3401      	adds	r4, #1
1a00390e:	f7ff ffef 	bl	1a0038f0 <Board_UARTPutChar>
1a003912:	e7f9      	b.n	1a003908 <Board_UARTPutSTR+0x4>
   }
}
1a003914:	bd10      	pop	{r4, pc}
1a003916:	Address 0x000000001a003916 is out of bounds.


1a003918 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a003918:	b508      	push	{r3, lr}
   DEBUGINIT();
1a00391a:	f7ff ffd7 	bl	1a0038cc <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a00391e:	4809      	ldr	r0, [pc, #36]	; (1a003944 <Board_Init+0x2c>)
1a003920:	f000 fd90 	bl	1a004444 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a003924:	f7ff ff6c 	bl	1a003800 <Board_GPIO_Init>
   Board_ADC_Init();
1a003928:	f7ff ff8a 	bl	1a003840 <Board_ADC_Init>
   Board_SPI_Init();
1a00392c:	f7ff ffa0 	bl	1a003870 <Board_SPI_Init>
   Board_I2C_Init();
1a003930:	f7ff ffba 	bl	1a0038a8 <Board_I2C_Init>

   Board_LED_Init();
1a003934:	f7ff ff22 	bl	1a00377c <Board_LED_Init>
   Board_TEC_Init();
1a003938:	f7ff ff42 	bl	1a0037c0 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a00393c:	f000 fc64 	bl	1a004208 <SystemCoreClockUpdate>
}
1a003940:	bd08      	pop	{r3, pc}
1a003942:	bf00      	nop
1a003944:	400f4000 	.word	0x400f4000

1a003948 <__stdio_init>:
{
   return Board_UARTGetChar();;
}

void __stdio_init()
{
1a003948:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a00394a:	f7ff ffbf 	bl	1a0038cc <Board_Debug_Init>
1a00394e:	bd08      	pop	{r3, pc}

1a003950 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a003950:	2300      	movs	r3, #0
1a003952:	2b1c      	cmp	r3, #28
1a003954:	d812      	bhi.n	1a00397c <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a003956:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a003958:	4a09      	ldr	r2, [pc, #36]	; (1a003980 <Board_SetupMuxing+0x30>)
1a00395a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a00395e:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a003962:	784a      	ldrb	r2, [r1, #1]
1a003964:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003966:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00396a:	4906      	ldr	r1, [pc, #24]	; (1a003984 <Board_SetupMuxing+0x34>)
1a00396c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a003970:	3301      	adds	r3, #1
1a003972:	2b1c      	cmp	r3, #28
1a003974:	d9f0      	bls.n	1a003958 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a003976:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00397a:	4770      	bx	lr
1a00397c:	4770      	bx	lr
1a00397e:	bf00      	nop
1a003980:	1a00602c 	.word	0x1a00602c
1a003984:	40086000 	.word	0x40086000

1a003988 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a003988:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00398a:	4a17      	ldr	r2, [pc, #92]	; (1a0039e8 <Board_SetupClocking+0x60>)
1a00398c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a003990:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a003994:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a003998:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a00399c:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0039a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0039a4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0039a8:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0039ac:	2201      	movs	r2, #1
1a0039ae:	490f      	ldr	r1, [pc, #60]	; (1a0039ec <Board_SetupClocking+0x64>)
1a0039b0:	2006      	movs	r0, #6
1a0039b2:	f000 fc33 	bl	1a00421c <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0039b6:	2400      	movs	r4, #0
1a0039b8:	b14c      	cbz	r4, 1a0039ce <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0039ba:	4b0b      	ldr	r3, [pc, #44]	; (1a0039e8 <Board_SetupClocking+0x60>)
1a0039bc:	685a      	ldr	r2, [r3, #4]
1a0039be:	f022 020c 	bic.w	r2, r2, #12
1a0039c2:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0039c4:	685a      	ldr	r2, [r3, #4]
1a0039c6:	f042 0203 	orr.w	r2, r2, #3
1a0039ca:	605a      	str	r2, [r3, #4]
}
1a0039cc:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a0039ce:	4808      	ldr	r0, [pc, #32]	; (1a0039f0 <Board_SetupClocking+0x68>)
1a0039d0:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0039d4:	2301      	movs	r3, #1
1a0039d6:	788a      	ldrb	r2, [r1, #2]
1a0039d8:	7849      	ldrb	r1, [r1, #1]
1a0039da:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0039de:	f000 fb63 	bl	1a0040a8 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0039e2:	3401      	adds	r4, #1
1a0039e4:	e7e8      	b.n	1a0039b8 <Board_SetupClocking+0x30>
1a0039e6:	bf00      	nop
1a0039e8:	40043000 	.word	0x40043000
1a0039ec:	0c28cb00 	.word	0x0c28cb00
1a0039f0:	1a006028 	.word	0x1a006028

1a0039f4 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0039f4:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0039f6:	f7ff ffab 	bl	1a003950 <Board_SetupMuxing>
    Board_SetupClocking();
1a0039fa:	f7ff ffc5 	bl	1a003988 <Board_SetupClocking>
}
1a0039fe:	bd08      	pop	{r3, pc}

1a003a00 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a003a00:	4b09      	ldr	r3, [pc, #36]	; (1a003a28 <Chip_UART_GetIndex+0x28>)
1a003a02:	4298      	cmp	r0, r3
1a003a04:	d009      	beq.n	1a003a1a <Chip_UART_GetIndex+0x1a>
1a003a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a003a0a:	4298      	cmp	r0, r3
1a003a0c:	d007      	beq.n	1a003a1e <Chip_UART_GetIndex+0x1e>
1a003a0e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a003a12:	4298      	cmp	r0, r3
1a003a14:	d005      	beq.n	1a003a22 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a003a16:	2000      	movs	r0, #0
1a003a18:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a003a1a:	2002      	movs	r0, #2
1a003a1c:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a003a1e:	2003      	movs	r0, #3
1a003a20:	4770      	bx	lr
			return 1;
1a003a22:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a003a24:	4770      	bx	lr
1a003a26:	bf00      	nop
1a003a28:	400c1000 	.word	0x400c1000

1a003a2c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a003a2c:	b530      	push	{r4, r5, lr}
1a003a2e:	b083      	sub	sp, #12
1a003a30:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a003a32:	f7ff ffe5 	bl	1a003a00 <Chip_UART_GetIndex>
1a003a36:	2301      	movs	r3, #1
1a003a38:	461a      	mov	r2, r3
1a003a3a:	4619      	mov	r1, r3
1a003a3c:	4d0e      	ldr	r5, [pc, #56]	; (1a003a78 <Chip_UART_Init+0x4c>)
1a003a3e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a003a42:	f000 fb77 	bl	1a004134 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a003a46:	2307      	movs	r3, #7
1a003a48:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a003a4a:	2300      	movs	r3, #0
1a003a4c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a003a4e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a003a50:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a003a52:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a003a54:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a003a56:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a003a58:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a003a5a:	4b08      	ldr	r3, [pc, #32]	; (1a003a7c <Chip_UART_Init+0x50>)
1a003a5c:	429c      	cmp	r4, r3
1a003a5e:	d006      	beq.n	1a003a6e <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a003a60:	2303      	movs	r3, #3
1a003a62:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a003a64:	2310      	movs	r3, #16
1a003a66:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a003a68:	9b01      	ldr	r3, [sp, #4]
}
1a003a6a:	b003      	add	sp, #12
1a003a6c:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a003a6e:	2300      	movs	r3, #0
1a003a70:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a003a72:	69a3      	ldr	r3, [r4, #24]
1a003a74:	9301      	str	r3, [sp, #4]
1a003a76:	e7f3      	b.n	1a003a60 <Chip_UART_Init+0x34>
1a003a78:	1a0060a8 	.word	0x1a0060a8
1a003a7c:	40082000 	.word	0x40082000

1a003a80 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a003a80:	b538      	push	{r3, r4, r5, lr}
1a003a82:	4605      	mov	r5, r0
1a003a84:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a003a86:	f7ff ffbb 	bl	1a003a00 <Chip_UART_GetIndex>
1a003a8a:	4b0c      	ldr	r3, [pc, #48]	; (1a003abc <Chip_UART_SetBaud+0x3c>)
1a003a8c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a003a90:	f000 fb94 	bl	1a0041bc <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a003a94:	0123      	lsls	r3, r4, #4
1a003a96:	fbb0 f3f3 	udiv	r3, r0, r3

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
1a003a9a:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a003a9c:	68ea      	ldr	r2, [r5, #12]
1a003a9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a003aa2:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a003aa4:	6029      	str	r1, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a003aa6:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a003aaa:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a003aac:	68ea      	ldr	r2, [r5, #12]
1a003aae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a003ab2:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a003ab4:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a003ab8:	0900      	lsrs	r0, r0, #4
1a003aba:	bd38      	pop	{r3, r4, r5, pc}
1a003abc:	1a0060a0 	.word	0x1a0060a0

1a003ac0 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a003ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003ac4:	b083      	sub	sp, #12
1a003ac6:	9001      	str	r0, [sp, #4]
1a003ac8:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a003aca:	f7ff ff99 	bl	1a003a00 <Chip_UART_GetIndex>
1a003ace:	4b32      	ldr	r3, [pc, #200]	; (1a003b98 <Chip_UART_SetBaudFDR+0xd8>)
1a003ad0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a003ad4:	f000 fb72 	bl	1a0041bc <Chip_Clock_GetRate>
1a003ad8:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a003ada:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a003ade:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a003ae0:	f04f 0b00 	mov.w	fp, #0
1a003ae4:	46a2      	mov	sl, r4
1a003ae6:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a003ae8:	e02a      	b.n	1a003b40 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a003aea:	4242      	negs	r2, r0
				div ++;
1a003aec:	1c4b      	adds	r3, r1, #1
1a003aee:	e017      	b.n	1a003b20 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a003af0:	b30a      	cbz	r2, 1a003b36 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a003af2:	4617      	mov	r7, r2
			sd = d;
1a003af4:	46ab      	mov	fp, r5
			sm = m;
1a003af6:	46a2      	mov	sl, r4
			sdiv = div;
1a003af8:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a003afa:	3501      	adds	r5, #1
1a003afc:	42ac      	cmp	r4, r5
1a003afe:	d91e      	bls.n	1a003b3e <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a003b00:	0933      	lsrs	r3, r6, #4
1a003b02:	0730      	lsls	r0, r6, #28
1a003b04:	fba4 0100 	umull	r0, r1, r4, r0
1a003b08:	fb04 1103 	mla	r1, r4, r3, r1
1a003b0c:	1962      	adds	r2, r4, r5
1a003b0e:	fb08 f202 	mul.w	r2, r8, r2
1a003b12:	2300      	movs	r3, #0
1a003b14:	f001 f8c2 	bl	1a004c9c <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a003b18:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a003b1a:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a003b1c:	2800      	cmp	r0, #0
1a003b1e:	dbe4      	blt.n	1a003aea <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a003b20:	4297      	cmp	r7, r2
1a003b22:	d3ea      	bcc.n	1a003afa <Chip_UART_SetBaudFDR+0x3a>
1a003b24:	2b00      	cmp	r3, #0
1a003b26:	d0e8      	beq.n	1a003afa <Chip_UART_SetBaudFDR+0x3a>
1a003b28:	0c19      	lsrs	r1, r3, #16
1a003b2a:	d1e6      	bne.n	1a003afa <Chip_UART_SetBaudFDR+0x3a>
1a003b2c:	2b02      	cmp	r3, #2
1a003b2e:	d8df      	bhi.n	1a003af0 <Chip_UART_SetBaudFDR+0x30>
1a003b30:	2d00      	cmp	r5, #0
1a003b32:	d0dd      	beq.n	1a003af0 <Chip_UART_SetBaudFDR+0x30>
1a003b34:	e7e1      	b.n	1a003afa <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a003b36:	4617      	mov	r7, r2
			sd = d;
1a003b38:	46ab      	mov	fp, r5
			sm = m;
1a003b3a:	46a2      	mov	sl, r4
			sdiv = div;
1a003b3c:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a003b3e:	3401      	adds	r4, #1
1a003b40:	b11f      	cbz	r7, 1a003b4a <Chip_UART_SetBaudFDR+0x8a>
1a003b42:	2c0f      	cmp	r4, #15
1a003b44:	d801      	bhi.n	1a003b4a <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a003b46:	2500      	movs	r5, #0
1a003b48:	e7d8      	b.n	1a003afc <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a003b4a:	f1b9 0f00 	cmp.w	r9, #0
1a003b4e:	d01e      	beq.n	1a003b8e <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a003b50:	9a01      	ldr	r2, [sp, #4]
1a003b52:	4611      	mov	r1, r2
1a003b54:	68d3      	ldr	r3, [r2, #12]
1a003b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003b5a:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a003b5c:	fa5f f389 	uxtb.w	r3, r9
1a003b60:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a003b62:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a003b66:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a003b68:	68d3      	ldr	r3, [r2, #12]
1a003b6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a003b6e:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a003b70:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a003b74:	b2db      	uxtb	r3, r3
1a003b76:	f00b 020f 	and.w	r2, fp, #15
1a003b7a:	4313      	orrs	r3, r2
1a003b7c:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a003b7e:	0933      	lsrs	r3, r6, #4
1a003b80:	fb0a f303 	mul.w	r3, sl, r3
1a003b84:	44da      	add	sl, fp
1a003b86:	fb09 f90a 	mul.w	r9, r9, sl
1a003b8a:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a003b8e:	4648      	mov	r0, r9
1a003b90:	b003      	add	sp, #12
1a003b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003b96:	bf00      	nop
1a003b98:	1a0060a0 	.word	0x1a0060a0

1a003b9c <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a003b9c:	4b03      	ldr	r3, [pc, #12]	; (1a003bac <Chip_ADC_GetClockIndex+0x10>)
1a003b9e:	4298      	cmp	r0, r3
1a003ba0:	d001      	beq.n	1a003ba6 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a003ba2:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a003ba4:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a003ba6:	2004      	movs	r0, #4
1a003ba8:	4770      	bx	lr
1a003baa:	bf00      	nop
1a003bac:	400e4000 	.word	0x400e4000

1a003bb0 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a003bb0:	b570      	push	{r4, r5, r6, lr}
1a003bb2:	460d      	mov	r5, r1
1a003bb4:	4614      	mov	r4, r2
1a003bb6:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a003bb8:	f7ff fff0 	bl	1a003b9c <Chip_ADC_GetClockIndex>
1a003bbc:	f000 fafe 	bl	1a0041bc <Chip_Clock_GetRate>
	if (burstMode) {
1a003bc0:	b155      	cbz	r5, 1a003bd8 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a003bc2:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a003bc6:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a003bca:	0064      	lsls	r4, r4, #1
1a003bcc:	fbb0 f0f4 	udiv	r0, r0, r4
1a003bd0:	b2c0      	uxtb	r0, r0
1a003bd2:	3801      	subs	r0, #1
	return div;
}
1a003bd4:	b2c0      	uxtb	r0, r0
1a003bd6:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a003bd8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a003bdc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a003be0:	e7f1      	b.n	1a003bc6 <getClkDiv+0x16>
1a003be2:	Address 0x000000001a003be2 is out of bounds.


1a003be4 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a003be4:	b538      	push	{r3, r4, r5, lr}
1a003be6:	4605      	mov	r5, r0
1a003be8:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a003bea:	f7ff ffd7 	bl	1a003b9c <Chip_ADC_GetClockIndex>
1a003bee:	2301      	movs	r3, #1
1a003bf0:	461a      	mov	r2, r3
1a003bf2:	4619      	mov	r1, r3
1a003bf4:	f000 fa9e 	bl	1a004134 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a003bf8:	2100      	movs	r1, #0
1a003bfa:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a003bfc:	4a08      	ldr	r2, [pc, #32]	; (1a003c20 <Chip_ADC_Init+0x3c>)
1a003bfe:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a003c00:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a003c02:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a003c04:	230b      	movs	r3, #11
1a003c06:	4628      	mov	r0, r5
1a003c08:	f7ff ffd2 	bl	1a003bb0 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a003c0c:	0200      	lsls	r0, r0, #8
1a003c0e:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a003c12:	7920      	ldrb	r0, [r4, #4]
1a003c14:	0440      	lsls	r0, r0, #17
1a003c16:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a003c1a:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a003c1c:	6028      	str	r0, [r5, #0]
}
1a003c1e:	bd38      	pop	{r3, r4, r5, pc}
1a003c20:	00061a80 	.word	0x00061a80

1a003c24 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a003c24:	b570      	push	{r4, r5, r6, lr}
1a003c26:	4605      	mov	r5, r0
1a003c28:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a003c2a:	6804      	ldr	r4, [r0, #0]
1a003c2c:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a003c30:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a003c34:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a003c36:	790b      	ldrb	r3, [r1, #4]
1a003c38:	f1c3 030b 	rsb	r3, r3, #11
1a003c3c:	b2db      	uxtb	r3, r3
1a003c3e:	7949      	ldrb	r1, [r1, #5]
1a003c40:	f7ff ffb6 	bl	1a003bb0 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a003c44:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a003c48:	7933      	ldrb	r3, [r6, #4]
1a003c4a:	045b      	lsls	r3, r3, #17
1a003c4c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a003c50:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a003c52:	602b      	str	r3, [r5, #0]
}
1a003c54:	bd70      	pop	{r4, r5, r6, pc}

1a003c56 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a003c56:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a003c58:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a003c5a:	680a      	ldr	r2, [r1, #0]
1a003c5c:	f7ff ffe2 	bl	1a003c24 <Chip_ADC_SetSampleRate>
}
1a003c60:	bd08      	pop	{r3, pc}
1a003c62:	Address 0x000000001a003c62 is out of bounds.


1a003c64 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a003c64:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a003c66:	680b      	ldr	r3, [r1, #0]
1a003c68:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003c6c:	d002      	beq.n	1a003c74 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a003c6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a003c72:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a003c74:	4607      	mov	r7, r0
1a003c76:	2501      	movs	r5, #1
1a003c78:	e03a      	b.n	1a003cf0 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a003c7a:	694b      	ldr	r3, [r1, #20]
1a003c7c:	fb03 f302 	mul.w	r3, r3, r2
1a003c80:	fbb3 f3f5 	udiv	r3, r3, r5
1a003c84:	e01c      	b.n	1a003cc0 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a003c86:	461c      	mov	r4, r3
	if (val < 0)
1a003c88:	ebb0 0c04 	subs.w	ip, r0, r4
1a003c8c:	d427      	bmi.n	1a003cde <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a003c8e:	4567      	cmp	r7, ip
1a003c90:	d906      	bls.n	1a003ca0 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a003c92:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a003c94:	1c77      	adds	r7, r6, #1
1a003c96:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a003c98:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a003c9a:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a003c9c:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a003c9e:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a003ca0:	3201      	adds	r2, #1
1a003ca2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a003ca6:	dc1d      	bgt.n	1a003ce4 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a003ca8:	680c      	ldr	r4, [r1, #0]
1a003caa:	f014 0f40 	tst.w	r4, #64	; 0x40
1a003cae:	d0e4      	beq.n	1a003c7a <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a003cb0:	1c73      	adds	r3, r6, #1
1a003cb2:	fa02 fc03 	lsl.w	ip, r2, r3
1a003cb6:	694b      	ldr	r3, [r1, #20]
1a003cb8:	fb03 f30c 	mul.w	r3, r3, ip
1a003cbc:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a003cc0:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a003cfc <pll_calc_divs+0x98>
1a003cc4:	4563      	cmp	r3, ip
1a003cc6:	d9eb      	bls.n	1a003ca0 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a003cc8:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a003d00 <pll_calc_divs+0x9c>
1a003ccc:	4563      	cmp	r3, ip
1a003cce:	d809      	bhi.n	1a003ce4 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a003cd0:	f014 0f80 	tst.w	r4, #128	; 0x80
1a003cd4:	d1d7      	bne.n	1a003c86 <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a003cd6:	1c74      	adds	r4, r6, #1
1a003cd8:	fa23 f404 	lsr.w	r4, r3, r4
1a003cdc:	e7d4      	b.n	1a003c88 <pll_calc_divs+0x24>
		return -val;
1a003cde:	f1cc 0c00 	rsb	ip, ip, #0
1a003ce2:	e7d4      	b.n	1a003c8e <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a003ce4:	3601      	adds	r6, #1
1a003ce6:	2e03      	cmp	r6, #3
1a003ce8:	dc01      	bgt.n	1a003cee <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a003cea:	2201      	movs	r2, #1
1a003cec:	e7d9      	b.n	1a003ca2 <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a003cee:	3501      	adds	r5, #1
1a003cf0:	2d04      	cmp	r5, #4
1a003cf2:	dc01      	bgt.n	1a003cf8 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a003cf4:	2600      	movs	r6, #0
1a003cf6:	e7f6      	b.n	1a003ce6 <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a003cf8:	bcf0      	pop	{r4, r5, r6, r7}
1a003cfa:	4770      	bx	lr
1a003cfc:	094c5eff 	.word	0x094c5eff
1a003d00:	1312d000 	.word	0x1312d000

1a003d04 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a003d04:	b5f0      	push	{r4, r5, r6, r7, lr}
1a003d06:	b099      	sub	sp, #100	; 0x64
1a003d08:	4605      	mov	r5, r0
1a003d0a:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a003d0c:	225c      	movs	r2, #92	; 0x5c
1a003d0e:	2100      	movs	r1, #0
1a003d10:	a801      	add	r0, sp, #4
1a003d12:	f001 f979 	bl	1a005008 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a003d16:	2380      	movs	r3, #128	; 0x80
1a003d18:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a003d1a:	6963      	ldr	r3, [r4, #20]
1a003d1c:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a003d1e:	7923      	ldrb	r3, [r4, #4]
1a003d20:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a003d24:	4669      	mov	r1, sp
1a003d26:	4628      	mov	r0, r5
1a003d28:	f7ff ff9c 	bl	1a003c64 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a003d2c:	9b06      	ldr	r3, [sp, #24]
1a003d2e:	42ab      	cmp	r3, r5
1a003d30:	d027      	beq.n	1a003d82 <pll_get_frac+0x7e>
	if (val < 0)
1a003d32:	1aeb      	subs	r3, r5, r3
1a003d34:	d42e      	bmi.n	1a003d94 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a003d36:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a003d38:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a003d3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a003d3e:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a003d40:	6963      	ldr	r3, [r4, #20]
1a003d42:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a003d44:	7923      	ldrb	r3, [r4, #4]
1a003d46:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a003d4a:	a910      	add	r1, sp, #64	; 0x40
1a003d4c:	4628      	mov	r0, r5
1a003d4e:	f7ff ff89 	bl	1a003c64 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a003d52:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a003d54:	42ab      	cmp	r3, r5
1a003d56:	d01f      	beq.n	1a003d98 <pll_get_frac+0x94>
	if (val < 0)
1a003d58:	1aeb      	subs	r3, r5, r3
1a003d5a:	d425      	bmi.n	1a003da8 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a003d5c:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a003d5e:	4b2b      	ldr	r3, [pc, #172]	; (1a003e0c <pll_get_frac+0x108>)
1a003d60:	429d      	cmp	r5, r3
1a003d62:	d923      	bls.n	1a003dac <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a003d64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a003d66:	1aed      	subs	r5, r5, r3
1a003d68:	d433      	bmi.n	1a003dd2 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a003d6a:	42ae      	cmp	r6, r5
1a003d6c:	dc3b      	bgt.n	1a003de6 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a003d6e:	42be      	cmp	r6, r7
1a003d70:	dc31      	bgt.n	1a003dd6 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a003d72:	466d      	mov	r5, sp
1a003d74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003d76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003d78:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003d7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003d80:	e006      	b.n	1a003d90 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a003d82:	466d      	mov	r5, sp
1a003d84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003d88:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003d8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a003d90:	b019      	add	sp, #100	; 0x64
1a003d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a003d94:	425b      	negs	r3, r3
1a003d96:	e7ce      	b.n	1a003d36 <pll_get_frac+0x32>
		*ppll = pll[2];
1a003d98:	ad10      	add	r5, sp, #64	; 0x40
1a003d9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003d9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003d9e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003da2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a003da6:	e7f3      	b.n	1a003d90 <pll_get_frac+0x8c>
		return -val;
1a003da8:	425b      	negs	r3, r3
1a003daa:	e7d7      	b.n	1a003d5c <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a003dac:	2340      	movs	r3, #64	; 0x40
1a003dae:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a003db0:	6963      	ldr	r3, [r4, #20]
1a003db2:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a003db4:	a908      	add	r1, sp, #32
1a003db6:	4628      	mov	r0, r5
1a003db8:	f7ff ff54 	bl	1a003c64 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a003dbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a003dbe:	42ab      	cmp	r3, r5
1a003dc0:	d1d0      	bne.n	1a003d64 <pll_get_frac+0x60>
			*ppll = pll[1];
1a003dc2:	ad08      	add	r5, sp, #32
1a003dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003dc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003dc8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003dcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a003dd0:	e7de      	b.n	1a003d90 <pll_get_frac+0x8c>
		return -val;
1a003dd2:	426d      	negs	r5, r5
1a003dd4:	e7c9      	b.n	1a003d6a <pll_get_frac+0x66>
			*ppll = pll[2];
1a003dd6:	ad10      	add	r5, sp, #64	; 0x40
1a003dd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003dda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003ddc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003de0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003de4:	e7d4      	b.n	1a003d90 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a003de6:	42af      	cmp	r7, r5
1a003de8:	db07      	blt.n	1a003dfa <pll_get_frac+0xf6>
			*ppll = pll[1];
1a003dea:	ad08      	add	r5, sp, #32
1a003dec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003dee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003df0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003df4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003df8:	e7ca      	b.n	1a003d90 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a003dfa:	ad10      	add	r5, sp, #64	; 0x40
1a003dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003e00:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003e04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003e08:	e7c2      	b.n	1a003d90 <pll_get_frac+0x8c>
1a003e0a:	bf00      	nop
1a003e0c:	068e7780 	.word	0x068e7780

1a003e10 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a003e10:	b430      	push	{r4, r5}
1a003e12:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a003e14:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a003e16:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a003e18:	e000      	b.n	1a003e1c <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a003e1a:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a003e1c:	281c      	cmp	r0, #28
1a003e1e:	d118      	bne.n	1a003e52 <Chip_Clock_FindBaseClock+0x42>
1a003e20:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a003e24:	0051      	lsls	r1, r2, #1
1a003e26:	4a0c      	ldr	r2, [pc, #48]	; (1a003e58 <Chip_Clock_FindBaseClock+0x48>)
1a003e28:	440a      	add	r2, r1
1a003e2a:	7914      	ldrb	r4, [r2, #4]
1a003e2c:	4284      	cmp	r4, r0
1a003e2e:	d010      	beq.n	1a003e52 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a003e30:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a003e34:	004a      	lsls	r2, r1, #1
1a003e36:	4908      	ldr	r1, [pc, #32]	; (1a003e58 <Chip_Clock_FindBaseClock+0x48>)
1a003e38:	5a8a      	ldrh	r2, [r1, r2]
1a003e3a:	42aa      	cmp	r2, r5
1a003e3c:	d8ed      	bhi.n	1a003e1a <Chip_Clock_FindBaseClock+0xa>
1a003e3e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a003e42:	0051      	lsls	r1, r2, #1
1a003e44:	4a04      	ldr	r2, [pc, #16]	; (1a003e58 <Chip_Clock_FindBaseClock+0x48>)
1a003e46:	440a      	add	r2, r1
1a003e48:	8852      	ldrh	r2, [r2, #2]
1a003e4a:	42aa      	cmp	r2, r5
1a003e4c:	d3e5      	bcc.n	1a003e1a <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a003e4e:	4620      	mov	r0, r4
1a003e50:	e7e4      	b.n	1a003e1c <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a003e52:	bc30      	pop	{r4, r5}
1a003e54:	4770      	bx	lr
1a003e56:	bf00      	nop
1a003e58:	1a0060bc 	.word	0x1a0060bc

1a003e5c <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a003e5c:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a003e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a003e62:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a003e64:	4a0d      	ldr	r2, [pc, #52]	; (1a003e9c <Chip_Clock_EnableCrystal+0x40>)
1a003e66:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a003e68:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a003e6c:	6992      	ldr	r2, [r2, #24]
1a003e6e:	428a      	cmp	r2, r1
1a003e70:	d001      	beq.n	1a003e76 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a003e72:	4a0a      	ldr	r2, [pc, #40]	; (1a003e9c <Chip_Clock_EnableCrystal+0x40>)
1a003e74:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a003e76:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a003e7a:	4a09      	ldr	r2, [pc, #36]	; (1a003ea0 <Chip_Clock_EnableCrystal+0x44>)
1a003e7c:	6811      	ldr	r1, [r2, #0]
1a003e7e:	4a09      	ldr	r2, [pc, #36]	; (1a003ea4 <Chip_Clock_EnableCrystal+0x48>)
1a003e80:	4291      	cmp	r1, r2
1a003e82:	d901      	bls.n	1a003e88 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a003e84:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a003e88:	4a04      	ldr	r2, [pc, #16]	; (1a003e9c <Chip_Clock_EnableCrystal+0x40>)
1a003e8a:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a003e8c:	9b01      	ldr	r3, [sp, #4]
1a003e8e:	1e5a      	subs	r2, r3, #1
1a003e90:	9201      	str	r2, [sp, #4]
1a003e92:	2b00      	cmp	r3, #0
1a003e94:	d1fa      	bne.n	1a003e8c <Chip_Clock_EnableCrystal+0x30>
}
1a003e96:	b002      	add	sp, #8
1a003e98:	4770      	bx	lr
1a003e9a:	bf00      	nop
1a003e9c:	40050000 	.word	0x40050000
1a003ea0:	1a006024 	.word	0x1a006024
1a003ea4:	01312cff 	.word	0x01312cff

1a003ea8 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a003ea8:	3012      	adds	r0, #18
1a003eaa:	4b05      	ldr	r3, [pc, #20]	; (1a003ec0 <Chip_Clock_GetDividerSource+0x18>)
1a003eac:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a003eb0:	f010 0f01 	tst.w	r0, #1
1a003eb4:	d102      	bne.n	1a003ebc <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a003eb6:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a003eba:	4770      	bx	lr
		return CLKINPUT_PD;
1a003ebc:	2011      	movs	r0, #17
}
1a003ebe:	4770      	bx	lr
1a003ec0:	40050000 	.word	0x40050000

1a003ec4 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a003ec4:	f100 0212 	add.w	r2, r0, #18
1a003ec8:	4b03      	ldr	r3, [pc, #12]	; (1a003ed8 <Chip_Clock_GetDividerDivisor+0x14>)
1a003eca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a003ece:	4b03      	ldr	r3, [pc, #12]	; (1a003edc <Chip_Clock_GetDividerDivisor+0x18>)
1a003ed0:	5c18      	ldrb	r0, [r3, r0]
}
1a003ed2:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a003ed6:	4770      	bx	lr
1a003ed8:	40050000 	.word	0x40050000
1a003edc:	1a0060b4 	.word	0x1a0060b4

1a003ee0 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a003ee0:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a003ee2:	2810      	cmp	r0, #16
1a003ee4:	d80a      	bhi.n	1a003efc <Chip_Clock_GetClockInputHz+0x1c>
1a003ee6:	e8df f000 	tbb	[pc, r0]
1a003eea:	0b44      	.short	0x0b44
1a003eec:	0921180d 	.word	0x0921180d
1a003ef0:	2d2a2724 	.word	0x2d2a2724
1a003ef4:	34300909 	.word	0x34300909
1a003ef8:	3c38      	.short	0x3c38
1a003efa:	40          	.byte	0x40
1a003efb:	00          	.byte	0x00
	uint32_t rate = 0;
1a003efc:	2000      	movs	r0, #0
1a003efe:	e03a      	b.n	1a003f76 <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a003f00:	481e      	ldr	r0, [pc, #120]	; (1a003f7c <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a003f02:	e038      	b.n	1a003f76 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003f04:	4b1e      	ldr	r3, [pc, #120]	; (1a003f80 <Chip_Clock_GetClockInputHz+0xa0>)
1a003f06:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a003f0a:	f003 0307 	and.w	r3, r3, #7
1a003f0e:	2b04      	cmp	r3, #4
1a003f10:	d001      	beq.n	1a003f16 <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a003f12:	481c      	ldr	r0, [pc, #112]	; (1a003f84 <Chip_Clock_GetClockInputHz+0xa4>)
1a003f14:	e02f      	b.n	1a003f76 <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a003f16:	2000      	movs	r0, #0
1a003f18:	e02d      	b.n	1a003f76 <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003f1a:	4b19      	ldr	r3, [pc, #100]	; (1a003f80 <Chip_Clock_GetClockInputHz+0xa0>)
1a003f1c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a003f20:	f003 0307 	and.w	r3, r3, #7
1a003f24:	2b04      	cmp	r3, #4
1a003f26:	d027      	beq.n	1a003f78 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a003f28:	4816      	ldr	r0, [pc, #88]	; (1a003f84 <Chip_Clock_GetClockInputHz+0xa4>)
1a003f2a:	e024      	b.n	1a003f76 <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a003f2c:	4b16      	ldr	r3, [pc, #88]	; (1a003f88 <Chip_Clock_GetClockInputHz+0xa8>)
1a003f2e:	6818      	ldr	r0, [r3, #0]
		break;
1a003f30:	e021      	b.n	1a003f76 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a003f32:	4b16      	ldr	r3, [pc, #88]	; (1a003f8c <Chip_Clock_GetClockInputHz+0xac>)
1a003f34:	6818      	ldr	r0, [r3, #0]
		break;
1a003f36:	e01e      	b.n	1a003f76 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a003f38:	4b15      	ldr	r3, [pc, #84]	; (1a003f90 <Chip_Clock_GetClockInputHz+0xb0>)
1a003f3a:	6818      	ldr	r0, [r3, #0]
		break;
1a003f3c:	e01b      	b.n	1a003f76 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a003f3e:	4b14      	ldr	r3, [pc, #80]	; (1a003f90 <Chip_Clock_GetClockInputHz+0xb0>)
1a003f40:	6858      	ldr	r0, [r3, #4]
		break;
1a003f42:	e018      	b.n	1a003f76 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a003f44:	f000 f868 	bl	1a004018 <Chip_Clock_GetMainPLLHz>
		break;
1a003f48:	e015      	b.n	1a003f76 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a003f4a:	2100      	movs	r1, #0
1a003f4c:	f000 f89a 	bl	1a004084 <Chip_Clock_GetDivRate>
		break;
1a003f50:	e011      	b.n	1a003f76 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a003f52:	2101      	movs	r1, #1
1a003f54:	f000 f896 	bl	1a004084 <Chip_Clock_GetDivRate>
		break;
1a003f58:	e00d      	b.n	1a003f76 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a003f5a:	2102      	movs	r1, #2
1a003f5c:	f000 f892 	bl	1a004084 <Chip_Clock_GetDivRate>
		break;
1a003f60:	e009      	b.n	1a003f76 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a003f62:	2103      	movs	r1, #3
1a003f64:	f000 f88e 	bl	1a004084 <Chip_Clock_GetDivRate>
		break;
1a003f68:	e005      	b.n	1a003f76 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a003f6a:	2104      	movs	r1, #4
1a003f6c:	f000 f88a 	bl	1a004084 <Chip_Clock_GetDivRate>
		break;
1a003f70:	e001      	b.n	1a003f76 <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a003f72:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a003f76:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a003f78:	4806      	ldr	r0, [pc, #24]	; (1a003f94 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a003f7a:	e7fc      	b.n	1a003f76 <Chip_Clock_GetClockInputHz+0x96>
1a003f7c:	00b71b00 	.word	0x00b71b00
1a003f80:	40043000 	.word	0x40043000
1a003f84:	017d7840 	.word	0x017d7840
1a003f88:	1a005ff8 	.word	0x1a005ff8
1a003f8c:	1a006024 	.word	0x1a006024
1a003f90:	1000053c 	.word	0x1000053c
1a003f94:	02faf080 	.word	0x02faf080

1a003f98 <Chip_Clock_CalcMainPLLValue>:
{
1a003f98:	b538      	push	{r3, r4, r5, lr}
1a003f9a:	4605      	mov	r5, r0
1a003f9c:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a003f9e:	7908      	ldrb	r0, [r1, #4]
1a003fa0:	f7ff ff9e 	bl	1a003ee0 <Chip_Clock_GetClockInputHz>
1a003fa4:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a003fa6:	4b19      	ldr	r3, [pc, #100]	; (1a00400c <Chip_Clock_CalcMainPLLValue+0x74>)
1a003fa8:	442b      	add	r3, r5
1a003faa:	4a19      	ldr	r2, [pc, #100]	; (1a004010 <Chip_Clock_CalcMainPLLValue+0x78>)
1a003fac:	4293      	cmp	r3, r2
1a003fae:	d821      	bhi.n	1a003ff4 <Chip_Clock_CalcMainPLLValue+0x5c>
1a003fb0:	b318      	cbz	r0, 1a003ffa <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a003fb2:	2380      	movs	r3, #128	; 0x80
1a003fb4:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a003fb6:	2300      	movs	r3, #0
1a003fb8:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a003fba:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a003fbc:	fbb5 f3f0 	udiv	r3, r5, r0
1a003fc0:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a003fc2:	4a14      	ldr	r2, [pc, #80]	; (1a004014 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a003fc4:	4295      	cmp	r5, r2
1a003fc6:	d903      	bls.n	1a003fd0 <Chip_Clock_CalcMainPLLValue+0x38>
1a003fc8:	fb03 f000 	mul.w	r0, r3, r0
1a003fcc:	42a8      	cmp	r0, r5
1a003fce:	d007      	beq.n	1a003fe0 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a003fd0:	4621      	mov	r1, r4
1a003fd2:	4628      	mov	r0, r5
1a003fd4:	f7ff fe96 	bl	1a003d04 <pll_get_frac>
		if (!ppll->nsel) {
1a003fd8:	68a3      	ldr	r3, [r4, #8]
1a003fda:	b18b      	cbz	r3, 1a004000 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a003fdc:	3b01      	subs	r3, #1
1a003fde:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a003fe0:	6923      	ldr	r3, [r4, #16]
1a003fe2:	b183      	cbz	r3, 1a004006 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a003fe4:	68e2      	ldr	r2, [r4, #12]
1a003fe6:	b10a      	cbz	r2, 1a003fec <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a003fe8:	3a01      	subs	r2, #1
1a003fea:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a003fec:	3b01      	subs	r3, #1
1a003fee:	6123      	str	r3, [r4, #16]
	return 0;
1a003ff0:	2000      	movs	r0, #0
}
1a003ff2:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a003ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003ff8:	e7fb      	b.n	1a003ff2 <Chip_Clock_CalcMainPLLValue+0x5a>
1a003ffa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003ffe:	e7f8      	b.n	1a003ff2 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a004000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004004:	e7f5      	b.n	1a003ff2 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a004006:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00400a:	e7f2      	b.n	1a003ff2 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00400c:	ff6b3a10 	.word	0xff6b3a10
1a004010:	0b940510 	.word	0x0b940510
1a004014:	094c5eff 	.word	0x094c5eff

1a004018 <Chip_Clock_GetMainPLLHz>:
{
1a004018:	b530      	push	{r4, r5, lr}
1a00401a:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a00401c:	4d17      	ldr	r5, [pc, #92]	; (1a00407c <Chip_Clock_GetMainPLLHz+0x64>)
1a00401e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a004020:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a004024:	f7ff ff5c 	bl	1a003ee0 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a004028:	4b15      	ldr	r3, [pc, #84]	; (1a004080 <Chip_Clock_GetMainPLLHz+0x68>)
1a00402a:	681b      	ldr	r3, [r3, #0]
1a00402c:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a00402e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a004030:	f013 0f01 	tst.w	r3, #1
1a004034:	d020      	beq.n	1a004078 <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a004036:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a00403a:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a00403e:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a004042:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a004046:	3301      	adds	r3, #1
	n = nsel + 1;
1a004048:	3201      	adds	r2, #1
	p = ptab[psel];
1a00404a:	f10d 0c08 	add.w	ip, sp, #8
1a00404e:	4461      	add	r1, ip
1a004050:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a004054:	f014 0f80 	tst.w	r4, #128	; 0x80
1a004058:	d108      	bne.n	1a00406c <Chip_Clock_GetMainPLLHz+0x54>
1a00405a:	b93d      	cbnz	r5, 1a00406c <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a00405c:	0049      	lsls	r1, r1, #1
1a00405e:	fbb3 f3f1 	udiv	r3, r3, r1
1a004062:	fbb0 f0f2 	udiv	r0, r0, r2
1a004066:	fb00 f003 	mul.w	r0, r0, r3
1a00406a:	e003      	b.n	1a004074 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a00406c:	fbb0 f0f2 	udiv	r0, r0, r2
1a004070:	fb03 f000 	mul.w	r0, r3, r0
}
1a004074:	b003      	add	sp, #12
1a004076:	bd30      	pop	{r4, r5, pc}
		return 0;
1a004078:	2000      	movs	r0, #0
1a00407a:	e7fb      	b.n	1a004074 <Chip_Clock_GetMainPLLHz+0x5c>
1a00407c:	40050000 	.word	0x40050000
1a004080:	1a0060b0 	.word	0x1a0060b0

1a004084 <Chip_Clock_GetDivRate>:
{
1a004084:	b538      	push	{r3, r4, r5, lr}
1a004086:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a004088:	4608      	mov	r0, r1
1a00408a:	f7ff ff0d 	bl	1a003ea8 <Chip_Clock_GetDividerSource>
1a00408e:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a004090:	4620      	mov	r0, r4
1a004092:	f7ff ff17 	bl	1a003ec4 <Chip_Clock_GetDividerDivisor>
1a004096:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a004098:	4628      	mov	r0, r5
1a00409a:	f7ff ff21 	bl	1a003ee0 <Chip_Clock_GetClockInputHz>
1a00409e:	3401      	adds	r4, #1
}
1a0040a0:	fbb0 f0f4 	udiv	r0, r0, r4
1a0040a4:	bd38      	pop	{r3, r4, r5, pc}
1a0040a6:	Address 0x000000001a0040a6 is out of bounds.


1a0040a8 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0040a8:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0040aa:	f100 0416 	add.w	r4, r0, #22
1a0040ae:	00a4      	lsls	r4, r4, #2
1a0040b0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a0040b4:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a0040b8:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a0040ba:	281b      	cmp	r0, #27
1a0040bc:	d813      	bhi.n	1a0040e6 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a0040be:	2911      	cmp	r1, #17
1a0040c0:	d01a      	beq.n	1a0040f8 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a0040c2:	4d0e      	ldr	r5, [pc, #56]	; (1a0040fc <Chip_Clock_SetBaseClock+0x54>)
1a0040c4:	4025      	ands	r5, r4

			if (autoblocken) {
1a0040c6:	b10a      	cbz	r2, 1a0040cc <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a0040c8:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a0040cc:	b10b      	cbz	r3, 1a0040d2 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a0040ce:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a0040d2:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a0040d6:	3016      	adds	r0, #22
1a0040d8:	0080      	lsls	r0, r0, #2
1a0040da:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0040de:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0040e2:	6045      	str	r5, [r0, #4]
1a0040e4:	e008      	b.n	1a0040f8 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a0040e6:	f044 0401 	orr.w	r4, r4, #1
1a0040ea:	3016      	adds	r0, #22
1a0040ec:	0080      	lsls	r0, r0, #2
1a0040ee:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0040f2:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0040f6:	6044      	str	r4, [r0, #4]
	}
}
1a0040f8:	bc30      	pop	{r4, r5}
1a0040fa:	4770      	bx	lr
1a0040fc:	e0fff7fe 	.word	0xe0fff7fe

1a004100 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a004100:	281b      	cmp	r0, #27
1a004102:	d80c      	bhi.n	1a00411e <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a004104:	3016      	adds	r0, #22
1a004106:	0080      	lsls	r0, r0, #2
1a004108:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00410c:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a004110:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a004112:	f010 0f01 	tst.w	r0, #1
1a004116:	d104      	bne.n	1a004122 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a004118:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00411c:	4770      	bx	lr
		return CLKINPUT_PD;
1a00411e:	2011      	movs	r0, #17
1a004120:	4770      	bx	lr
		return CLKINPUT_PD;
1a004122:	2011      	movs	r0, #17
}
1a004124:	4770      	bx	lr

1a004126 <Chip_Clock_GetBaseClocktHz>:
{
1a004126:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a004128:	f7ff ffea 	bl	1a004100 <Chip_Clock_GetBaseClock>
1a00412c:	f7ff fed8 	bl	1a003ee0 <Chip_Clock_GetClockInputHz>
}
1a004130:	bd08      	pop	{r3, pc}
1a004132:	Address 0x000000001a004132 is out of bounds.


1a004134 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a004134:	b971      	cbnz	r1, 1a004154 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a004136:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a004138:	b10a      	cbz	r2, 1a00413e <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a00413a:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a00413e:	2b02      	cmp	r3, #2
1a004140:	d00a      	beq.n	1a004158 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a004142:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a004146:	d30a      	bcc.n	1a00415e <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a004148:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a00414c:	4b06      	ldr	r3, [pc, #24]	; (1a004168 <Chip_Clock_EnableOpts+0x34>)
1a00414e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a004152:	4770      	bx	lr
		reg |= (1 << 1);
1a004154:	2103      	movs	r1, #3
1a004156:	e7ef      	b.n	1a004138 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a004158:	f041 0120 	orr.w	r1, r1, #32
1a00415c:	e7f1      	b.n	1a004142 <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a00415e:	3020      	adds	r0, #32
1a004160:	4b02      	ldr	r3, [pc, #8]	; (1a00416c <Chip_Clock_EnableOpts+0x38>)
1a004162:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a004166:	4770      	bx	lr
1a004168:	40052000 	.word	0x40052000
1a00416c:	40051000 	.word	0x40051000

1a004170 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a004170:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a004174:	d309      	bcc.n	1a00418a <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a004176:	4a09      	ldr	r2, [pc, #36]	; (1a00419c <Chip_Clock_Enable+0x2c>)
1a004178:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a00417c:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a004180:	f043 0301 	orr.w	r3, r3, #1
1a004184:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a004188:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a00418a:	4a05      	ldr	r2, [pc, #20]	; (1a0041a0 <Chip_Clock_Enable+0x30>)
1a00418c:	3020      	adds	r0, #32
1a00418e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a004192:	f043 0301 	orr.w	r3, r3, #1
1a004196:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a00419a:	4770      	bx	lr
1a00419c:	40052000 	.word	0x40052000
1a0041a0:	40051000 	.word	0x40051000

1a0041a4 <Chip_Clock_RTCEnable>:

/* Enable RTC Clock */
void Chip_Clock_RTCEnable(void)
{
	LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));	/* Reset 32Khz oscillator */
1a0041a4:	4b04      	ldr	r3, [pc, #16]	; (1a0041b8 <Chip_Clock_RTCEnable+0x14>)
1a0041a6:	685a      	ldr	r2, [r3, #4]
1a0041a8:	f022 020c 	bic.w	r2, r2, #12
1a0041ac:	605a      	str	r2, [r3, #4]
	LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);	/* Enable 32 kHz & 1 kHz on osc32k and release reset */
1a0041ae:	685a      	ldr	r2, [r3, #4]
1a0041b0:	f042 0203 	orr.w	r2, r2, #3
1a0041b4:	605a      	str	r2, [r3, #4]
}
1a0041b6:	4770      	bx	lr
1a0041b8:	40043000 	.word	0x40043000

1a0041bc <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0041bc:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a0041be:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0041c2:	d309      	bcc.n	1a0041d8 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0041c4:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a0041c8:	4a0d      	ldr	r2, [pc, #52]	; (1a004200 <Chip_Clock_GetRate+0x44>)
1a0041ca:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a0041ce:	f014 0f01 	tst.w	r4, #1
1a0041d2:	d107      	bne.n	1a0041e4 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a0041d4:	2000      	movs	r0, #0
	}

	return rate;
}
1a0041d6:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0041d8:	f100 0320 	add.w	r3, r0, #32
1a0041dc:	4a09      	ldr	r2, [pc, #36]	; (1a004204 <Chip_Clock_GetRate+0x48>)
1a0041de:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a0041e2:	e7f4      	b.n	1a0041ce <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a0041e4:	f7ff fe14 	bl	1a003e10 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a0041e8:	f7ff ff9d 	bl	1a004126 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a0041ec:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a0041f0:	d103      	bne.n	1a0041fa <Chip_Clock_GetRate+0x3e>
			div = 1;
1a0041f2:	2301      	movs	r3, #1
		rate = rate / div;
1a0041f4:	fbb0 f0f3 	udiv	r0, r0, r3
1a0041f8:	e7ed      	b.n	1a0041d6 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a0041fa:	2302      	movs	r3, #2
1a0041fc:	e7fa      	b.n	1a0041f4 <Chip_Clock_GetRate+0x38>
1a0041fe:	bf00      	nop
1a004200:	40052000 	.word	0x40052000
1a004204:	40051000 	.word	0x40051000

1a004208 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a004208:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a00420a:	2069      	movs	r0, #105	; 0x69
1a00420c:	f7ff ffd6 	bl	1a0041bc <Chip_Clock_GetRate>
1a004210:	4b01      	ldr	r3, [pc, #4]	; (1a004218 <SystemCoreClockUpdate+0x10>)
1a004212:	6018      	str	r0, [r3, #0]
}
1a004214:	bd08      	pop	{r3, pc}
1a004216:	bf00      	nop
1a004218:	1000129c 	.word	0x1000129c

1a00421c <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a00421c:	b570      	push	{r4, r5, r6, lr}
1a00421e:	b08a      	sub	sp, #40	; 0x28
1a004220:	4605      	mov	r5, r0
1a004222:	460e      	mov	r6, r1
1a004224:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a004226:	f24c 3350 	movw	r3, #50000	; 0xc350
1a00422a:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a00422c:	2806      	cmp	r0, #6
1a00422e:	d018      	beq.n	1a004262 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a004230:	2300      	movs	r3, #0
1a004232:	2201      	movs	r2, #1
1a004234:	4629      	mov	r1, r5
1a004236:	2004      	movs	r0, #4
1a004238:	f7ff ff36 	bl	1a0040a8 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a00423c:	4a4a      	ldr	r2, [pc, #296]	; (1a004368 <Chip_SetupCoreClock+0x14c>)
1a00423e:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a004240:	f043 0301 	orr.w	r3, r3, #1
1a004244:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a004246:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a00424a:	a901      	add	r1, sp, #4
1a00424c:	4630      	mov	r0, r6
1a00424e:	f7ff fea3 	bl	1a003f98 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a004252:	4b46      	ldr	r3, [pc, #280]	; (1a00436c <Chip_SetupCoreClock+0x150>)
1a004254:	429e      	cmp	r6, r3
1a004256:	d916      	bls.n	1a004286 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a004258:	9b01      	ldr	r3, [sp, #4]
1a00425a:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00425e:	d003      	beq.n	1a004268 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a004260:	e7fe      	b.n	1a004260 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a004262:	f7ff fdfb 	bl	1a003e5c <Chip_Clock_EnableCrystal>
1a004266:	e7e3      	b.n	1a004230 <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a004268:	f013 0f80 	tst.w	r3, #128	; 0x80
1a00426c:	d005      	beq.n	1a00427a <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a00426e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a004272:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a004274:	2500      	movs	r5, #0
			direct = 1;
1a004276:	2601      	movs	r6, #1
1a004278:	e007      	b.n	1a00428a <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a00427a:	9b04      	ldr	r3, [sp, #16]
1a00427c:	3301      	adds	r3, #1
1a00427e:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a004280:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a004282:	2600      	movs	r6, #0
1a004284:	e001      	b.n	1a00428a <Chip_SetupCoreClock+0x6e>
1a004286:	2500      	movs	r5, #0
1a004288:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00428a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00428e:	9b01      	ldr	r3, [sp, #4]
1a004290:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a004294:	9a05      	ldr	r2, [sp, #20]
1a004296:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00429a:	9a03      	ldr	r2, [sp, #12]
1a00429c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0042a0:	9a04      	ldr	r2, [sp, #16]
1a0042a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0042a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0042aa:	4a2f      	ldr	r2, [pc, #188]	; (1a004368 <Chip_SetupCoreClock+0x14c>)
1a0042ac:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0042ae:	4b2e      	ldr	r3, [pc, #184]	; (1a004368 <Chip_SetupCoreClock+0x14c>)
1a0042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a0042b2:	f013 0f01 	tst.w	r3, #1
1a0042b6:	d0fa      	beq.n	1a0042ae <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0042b8:	2300      	movs	r3, #0
1a0042ba:	2201      	movs	r2, #1
1a0042bc:	2109      	movs	r1, #9
1a0042be:	2004      	movs	r0, #4
1a0042c0:	f7ff fef2 	bl	1a0040a8 <Chip_Clock_SetBaseClock>

	if (direct) {
1a0042c4:	b306      	cbz	r6, 1a004308 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0042c6:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0042ca:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a0042cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0042ce:	1e5a      	subs	r2, r3, #1
1a0042d0:	9209      	str	r2, [sp, #36]	; 0x24
1a0042d2:	2b00      	cmp	r3, #0
1a0042d4:	d1fa      	bne.n	1a0042cc <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a0042d6:	9b01      	ldr	r3, [sp, #4]
1a0042d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0042dc:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0042de:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0042e2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0042e6:	9a05      	ldr	r2, [sp, #20]
1a0042e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0042ec:	9a03      	ldr	r2, [sp, #12]
1a0042ee:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0042f2:	9a04      	ldr	r2, [sp, #16]
1a0042f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0042f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0042fc:	4a1a      	ldr	r2, [pc, #104]	; (1a004368 <Chip_SetupCoreClock+0x14c>)
1a0042fe:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a004300:	2c00      	cmp	r4, #0
1a004302:	d12e      	bne.n	1a004362 <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a004304:	b00a      	add	sp, #40	; 0x28
1a004306:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a004308:	2d00      	cmp	r5, #0
1a00430a:	d0f9      	beq.n	1a004300 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00430c:	f24c 3350 	movw	r3, #50000	; 0xc350
1a004310:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a004312:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004314:	1e5a      	subs	r2, r3, #1
1a004316:	9209      	str	r2, [sp, #36]	; 0x24
1a004318:	2b00      	cmp	r3, #0
1a00431a:	d1fa      	bne.n	1a004312 <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a00431c:	9b04      	ldr	r3, [sp, #16]
1a00431e:	1e5a      	subs	r2, r3, #1
1a004320:	9204      	str	r2, [sp, #16]
1a004322:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a004326:	9b01      	ldr	r3, [sp, #4]
1a004328:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a00432c:	9905      	ldr	r1, [sp, #20]
1a00432e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a004332:	9903      	ldr	r1, [sp, #12]
1a004334:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a004338:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00433c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a004340:	4a09      	ldr	r2, [pc, #36]	; (1a004368 <Chip_SetupCoreClock+0x14c>)
1a004342:	6453      	str	r3, [r2, #68]	; 0x44
1a004344:	e7dc      	b.n	1a004300 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a004346:	480a      	ldr	r0, [pc, #40]	; (1a004370 <Chip_SetupCoreClock+0x154>)
1a004348:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a00434c:	78cb      	ldrb	r3, [r1, #3]
1a00434e:	788a      	ldrb	r2, [r1, #2]
1a004350:	7849      	ldrb	r1, [r1, #1]
1a004352:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a004356:	f7ff fea7 	bl	1a0040a8 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00435a:	3401      	adds	r4, #1
1a00435c:	2c11      	cmp	r4, #17
1a00435e:	d9f2      	bls.n	1a004346 <Chip_SetupCoreClock+0x12a>
1a004360:	e7d0      	b.n	1a004304 <Chip_SetupCoreClock+0xe8>
1a004362:	2400      	movs	r4, #0
1a004364:	e7fa      	b.n	1a00435c <Chip_SetupCoreClock+0x140>
1a004366:	bf00      	nop
1a004368:	40050000 	.word	0x40050000
1a00436c:	068e7780 	.word	0x068e7780
1a004370:	1a006128 	.word	0x1a006128

1a004374 <Chip_RTC_ResetClockTickCounter>:

/* Reset clock tick counter in the RTC peripheral */
void Chip_RTC_ResetClockTickCounter(LPC_RTC_T *pRTC)
{
	/* Reset RTC clock*/
	pRTC->CCR |= RTC_CCR_CTCRST;
1a004374:	6883      	ldr	r3, [r0, #8]
1a004376:	f043 0302 	orr.w	r3, r3, #2
1a00437a:	6083      	str	r3, [r0, #8]
	while (!(pRTC->CCR & RTC_CCR_CTCRST)) {}
1a00437c:	6883      	ldr	r3, [r0, #8]
1a00437e:	f013 0f02 	tst.w	r3, #2
1a004382:	d0fb      	beq.n	1a00437c <Chip_RTC_ResetClockTickCounter+0x8>

	/* Finish resetting RTC clock */
	pRTC->CCR = (pRTC->CCR & ~RTC_CCR_CTCRST) & RTC_CCR_BITMASK;
1a004384:	6883      	ldr	r3, [r0, #8]
1a004386:	f003 0311 	and.w	r3, r3, #17
1a00438a:	6083      	str	r3, [r0, #8]
	while (pRTC->CCR & RTC_CCR_CTCRST) {}
1a00438c:	6883      	ldr	r3, [r0, #8]
1a00438e:	f013 0f02 	tst.w	r3, #2
1a004392:	d1fb      	bne.n	1a00438c <Chip_RTC_ResetClockTickCounter+0x18>
}
1a004394:	4770      	bx	lr

1a004396 <Chip_RTC_Enable>:

/* Start/Stop RTC peripheral */
void Chip_RTC_Enable(LPC_RTC_T *pRTC, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a004396:	2901      	cmp	r1, #1
1a004398:	d004      	beq.n	1a0043a4 <Chip_RTC_Enable+0xe>
		pRTC->CCR |= RTC_CCR_CLKEN;
	} else {
		pRTC->CCR = (pRTC->CCR & ~RTC_CCR_CLKEN) & RTC_CCR_BITMASK;
1a00439a:	6883      	ldr	r3, [r0, #8]
1a00439c:	f003 0312 	and.w	r3, r3, #18
1a0043a0:	6083      	str	r3, [r0, #8]
	}
}
1a0043a2:	4770      	bx	lr
		pRTC->CCR |= RTC_CCR_CLKEN;
1a0043a4:	6883      	ldr	r3, [r0, #8]
1a0043a6:	f043 0301 	orr.w	r3, r3, #1
1a0043aa:	6083      	str	r3, [r0, #8]
1a0043ac:	4770      	bx	lr

1a0043ae <Chip_RTC_GetFullTime>:
	pRTC->CCR = ccr_val;
}

/* Get full time from the RTC peripheral */
void Chip_RTC_GetFullTime(LPC_RTC_T *pRTC, RTC_TIME_T *pFullTime)
{
1a0043ae:	b410      	push	{r4}
	RTC_TIMEINDEX_T i;
	uint32_t secs = 0xFF;
1a0043b0:	24ff      	movs	r4, #255	; 0xff

	/* Read full time, but verify second tick didn't change during the read. If
	   it did, re-read the time again so it will be consistent across all fields. */
	while (secs != pRTC->TIME[RTC_TIMETYPE_SECOND]) {
1a0043b2:	6a03      	ldr	r3, [r0, #32]
1a0043b4:	42a3      	cmp	r3, r4
1a0043b6:	d00d      	beq.n	1a0043d4 <Chip_RTC_GetFullTime+0x26>
		secs = pFullTime->time[RTC_TIMETYPE_SECOND] = pRTC->TIME[RTC_TIMETYPE_SECOND];
1a0043b8:	6a04      	ldr	r4, [r0, #32]
1a0043ba:	600c      	str	r4, [r1, #0]
		for (i = RTC_TIMETYPE_MINUTE; i < RTC_TIMETYPE_LAST; i++) {
1a0043bc:	2301      	movs	r3, #1
1a0043be:	2b07      	cmp	r3, #7
1a0043c0:	d8f7      	bhi.n	1a0043b2 <Chip_RTC_GetFullTime+0x4>
			pFullTime->time[i] = pRTC->TIME[i];
1a0043c2:	f103 0208 	add.w	r2, r3, #8
1a0043c6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
1a0043ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (i = RTC_TIMETYPE_MINUTE; i < RTC_TIMETYPE_LAST; i++) {
1a0043ce:	3301      	adds	r3, #1
1a0043d0:	b2db      	uxtb	r3, r3
1a0043d2:	e7f4      	b.n	1a0043be <Chip_RTC_GetFullTime+0x10>
		}
	}
}
1a0043d4:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0043d8:	4770      	bx	lr

1a0043da <Chip_RTC_CalibCounterCmd>:
}

/* Enable/Disable calibration counter in the RTC peripheral */
void Chip_RTC_CalibCounterCmd(LPC_RTC_T *pRTC, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a0043da:	2901      	cmp	r1, #1
1a0043dc:	d004      	beq.n	1a0043e8 <Chip_RTC_CalibCounterCmd+0xe>
		do {
			pRTC->CCR &= (~RTC_CCR_CCALEN) & RTC_CCR_BITMASK;
		} while (pRTC->CCR & RTC_CCR_CCALEN);
	}
	else {
		pRTC->CCR |= RTC_CCR_CCALEN;
1a0043de:	6883      	ldr	r3, [r0, #8]
1a0043e0:	f043 0310 	orr.w	r3, r3, #16
1a0043e4:	6083      	str	r3, [r0, #8]
	}
}
1a0043e6:	4770      	bx	lr
			pRTC->CCR &= (~RTC_CCR_CCALEN) & RTC_CCR_BITMASK;
1a0043e8:	6883      	ldr	r3, [r0, #8]
1a0043ea:	f003 0303 	and.w	r3, r3, #3
1a0043ee:	6083      	str	r3, [r0, #8]
		} while (pRTC->CCR & RTC_CCR_CCALEN);
1a0043f0:	6883      	ldr	r3, [r0, #8]
1a0043f2:	f013 0f10 	tst.w	r3, #16
1a0043f6:	d1f7      	bne.n	1a0043e8 <Chip_RTC_CalibCounterCmd+0xe>
1a0043f8:	4770      	bx	lr
1a0043fa:	Address 0x000000001a0043fa is out of bounds.


1a0043fc <Chip_RTC_Init>:
{
1a0043fc:	b510      	push	{r4, lr}
1a0043fe:	4604      	mov	r4, r0
	Chip_Clock_RTCEnable();
1a004400:	f7ff fed0 	bl	1a0041a4 <Chip_Clock_RTCEnable>
	LPC_ATIMER->DOWNCOUNTER = 2048;
1a004404:	4b0e      	ldr	r3, [pc, #56]	; (1a004440 <Chip_RTC_Init+0x44>)
1a004406:	f44f 6200 	mov.w	r2, #2048	; 0x800
1a00440a:	601a      	str	r2, [r3, #0]
	while (LPC_ATIMER->DOWNCOUNTER);
1a00440c:	4b0c      	ldr	r3, [pc, #48]	; (1a004440 <Chip_RTC_Init+0x44>)
1a00440e:	681b      	ldr	r3, [r3, #0]
1a004410:	2b00      	cmp	r3, #0
1a004412:	d1fb      	bne.n	1a00440c <Chip_RTC_Init+0x10>
	Chip_RTC_Enable(pRTC, DISABLE);
1a004414:	2100      	movs	r1, #0
1a004416:	4620      	mov	r0, r4
1a004418:	f7ff ffbd 	bl	1a004396 <Chip_RTC_Enable>
	Chip_RTC_CalibCounterCmd(pRTC, DISABLE);
1a00441c:	2100      	movs	r1, #0
1a00441e:	4620      	mov	r0, r4
1a004420:	f7ff ffdb 	bl	1a0043da <Chip_RTC_CalibCounterCmd>
	Chip_RTC_ResetClockTickCounter(pRTC);
1a004424:	4620      	mov	r0, r4
1a004426:	f7ff ffa5 	bl	1a004374 <Chip_RTC_ResetClockTickCounter>
	pRTC->ILR = RTC_IRL_RTCCIF | RTC_IRL_RTCALF;
1a00442a:	2303      	movs	r3, #3
1a00442c:	6023      	str	r3, [r4, #0]
	while (pRTC->ILR != 0) {}
1a00442e:	6823      	ldr	r3, [r4, #0]
1a004430:	2b00      	cmp	r3, #0
1a004432:	d1fc      	bne.n	1a00442e <Chip_RTC_Init+0x32>
	pRTC->CIIR = 0x00;
1a004434:	60e3      	str	r3, [r4, #12]
	pRTC->AMR = 0xFF;
1a004436:	22ff      	movs	r2, #255	; 0xff
1a004438:	6122      	str	r2, [r4, #16]
	pRTC->CALIBRATION = 0x00;
1a00443a:	6423      	str	r3, [r4, #64]	; 0x40
}
1a00443c:	bd10      	pop	{r4, pc}
1a00443e:	bf00      	nop
1a004440:	40040000 	.word	0x40040000

1a004444 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a004444:	4770      	bx	lr

1a004446 <SSP_Write2BFifo>:
 * Private functions
 ****************************************************************************/

STATIC void SSP_Write2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
1a004446:	680b      	ldr	r3, [r1, #0]
1a004448:	b133      	cbz	r3, 1a004458 <SSP_Write2BFifo+0x12>
		Chip_SSP_SendFrame(pSSP, (*(uint16_t *) ((uint32_t) xf_setup->tx_data +
												 xf_setup->tx_cnt)));
1a00444a:	684a      	ldr	r2, [r1, #4]
		Chip_SSP_SendFrame(pSSP, (*(uint16_t *) ((uint32_t) xf_setup->tx_data +
1a00444c:	5a9b      	ldrh	r3, [r3, r2]
	pSSP->DR = SSP_DR_BITMASK(tx_data);
1a00444e:	6083      	str	r3, [r0, #8]
	}
	else {
		Chip_SSP_SendFrame(pSSP, 0xFFFF);
	}

	xf_setup->tx_cnt += 2;
1a004450:	684b      	ldr	r3, [r1, #4]
1a004452:	3302      	adds	r3, #2
1a004454:	604b      	str	r3, [r1, #4]
}
1a004456:	4770      	bx	lr
1a004458:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a00445c:	6083      	str	r3, [r0, #8]
1a00445e:	e7f7      	b.n	1a004450 <SSP_Write2BFifo+0xa>

1a004460 <SSP_Write1BFifo>:

/** SSP macro: write 1 bytes to FIFO buffer */
STATIC void SSP_Write1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
1a004460:	680b      	ldr	r3, [r1, #0]
1a004462:	b133      	cbz	r3, 1a004472 <SSP_Write1BFifo+0x12>
		Chip_SSP_SendFrame(pSSP, (*(uint8_t *) ((uint32_t) xf_setup->tx_data + xf_setup->tx_cnt)));
1a004464:	684a      	ldr	r2, [r1, #4]
1a004466:	5c9b      	ldrb	r3, [r3, r2]
1a004468:	6083      	str	r3, [r0, #8]
	}
	else {
		Chip_SSP_SendFrame(pSSP, 0xFF);
	}

	xf_setup->tx_cnt++;
1a00446a:	684b      	ldr	r3, [r1, #4]
1a00446c:	3301      	adds	r3, #1
1a00446e:	604b      	str	r3, [r1, #4]
}
1a004470:	4770      	bx	lr
1a004472:	23ff      	movs	r3, #255	; 0xff
1a004474:	6083      	str	r3, [r0, #8]
1a004476:	e7f8      	b.n	1a00446a <SSP_Write1BFifo+0xa>

1a004478 <SSP_Read2BFifo>:
	return (pSSP->SR & Stat) ? SET : RESET;
1a004478:	68c3      	ldr	r3, [r0, #12]
/** SSP macro: read 1 bytes from FIFO buffer */
STATIC void SSP_Read2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a00447a:	f013 0f04 	tst.w	r3, #4
1a00447e:	d01b      	beq.n	1a0044b8 <SSP_Read2BFifo+0x40>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a004480:	68ca      	ldr	r2, [r1, #12]
1a004482:	690b      	ldr	r3, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a004484:	429a      	cmp	r2, r3
1a004486:	d216      	bcs.n	1a0044b6 <SSP_Read2BFifo+0x3e>
{
1a004488:	b410      	push	{r4}
1a00448a:	e00a      	b.n	1a0044a2 <SSP_Read2BFifo+0x2a>
		rDat = Chip_SSP_ReceiveFrame(pSSP);
		if (xf_setup->rx_data) {
			*(uint16_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
		}

		xf_setup->rx_cnt += 2;
1a00448c:	68cb      	ldr	r3, [r1, #12]
1a00448e:	3302      	adds	r3, #2
1a004490:	60cb      	str	r3, [r1, #12]
1a004492:	68c3      	ldr	r3, [r0, #12]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a004494:	f013 0f04 	tst.w	r3, #4
1a004498:	d00a      	beq.n	1a0044b0 <SSP_Read2BFifo+0x38>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a00449a:	68ca      	ldr	r2, [r1, #12]
1a00449c:	690b      	ldr	r3, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a00449e:	429a      	cmp	r2, r3
1a0044a0:	d206      	bcs.n	1a0044b0 <SSP_Read2BFifo+0x38>
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a0044a2:	6883      	ldr	r3, [r0, #8]
1a0044a4:	b29b      	uxth	r3, r3
		if (xf_setup->rx_data) {
1a0044a6:	688c      	ldr	r4, [r1, #8]
1a0044a8:	2c00      	cmp	r4, #0
1a0044aa:	d0ef      	beq.n	1a00448c <SSP_Read2BFifo+0x14>
			*(uint16_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
1a0044ac:	52a3      	strh	r3, [r4, r2]
1a0044ae:	e7ed      	b.n	1a00448c <SSP_Read2BFifo+0x14>
	}
}
1a0044b0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0044b4:	4770      	bx	lr
1a0044b6:	4770      	bx	lr
1a0044b8:	4770      	bx	lr

1a0044ba <SSP_Read1BFifo>:
	return (pSSP->SR & Stat) ? SET : RESET;
1a0044ba:	68c3      	ldr	r3, [r0, #12]
/** SSP macro: read 2 bytes from FIFO buffer */
STATIC void SSP_Read1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0044bc:	f013 0f04 	tst.w	r3, #4
1a0044c0:	d01a      	beq.n	1a0044f8 <SSP_Read1BFifo+0x3e>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a0044c2:	68cb      	ldr	r3, [r1, #12]
1a0044c4:	690a      	ldr	r2, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0044c6:	4293      	cmp	r3, r2
1a0044c8:	d215      	bcs.n	1a0044f6 <SSP_Read1BFifo+0x3c>
{
1a0044ca:	b410      	push	{r4}
1a0044cc:	e00a      	b.n	1a0044e4 <SSP_Read1BFifo+0x2a>
		rDat = Chip_SSP_ReceiveFrame(pSSP);
		if (xf_setup->rx_data) {
			*(uint8_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
		}

		xf_setup->rx_cnt++;
1a0044ce:	68cb      	ldr	r3, [r1, #12]
1a0044d0:	3301      	adds	r3, #1
1a0044d2:	60cb      	str	r3, [r1, #12]
1a0044d4:	68c3      	ldr	r3, [r0, #12]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0044d6:	f013 0f04 	tst.w	r3, #4
1a0044da:	d009      	beq.n	1a0044f0 <SSP_Read1BFifo+0x36>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a0044dc:	68cb      	ldr	r3, [r1, #12]
1a0044de:	690a      	ldr	r2, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0044e0:	4293      	cmp	r3, r2
1a0044e2:	d205      	bcs.n	1a0044f0 <SSP_Read1BFifo+0x36>
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a0044e4:	6884      	ldr	r4, [r0, #8]
		if (xf_setup->rx_data) {
1a0044e6:	688a      	ldr	r2, [r1, #8]
1a0044e8:	2a00      	cmp	r2, #0
1a0044ea:	d0f0      	beq.n	1a0044ce <SSP_Read1BFifo+0x14>
			*(uint8_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
1a0044ec:	54d4      	strb	r4, [r2, r3]
1a0044ee:	e7ee      	b.n	1a0044ce <SSP_Read1BFifo+0x14>
	}
}
1a0044f0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0044f4:	4770      	bx	lr
1a0044f6:	4770      	bx	lr
1a0044f8:	4770      	bx	lr
1a0044fa:	Address 0x000000001a0044fa is out of bounds.


1a0044fc <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0044fc:	4b03      	ldr	r3, [pc, #12]	; (1a00450c <Chip_SSP_GetClockIndex+0x10>)
1a0044fe:	4298      	cmp	r0, r3
1a004500:	d001      	beq.n	1a004506 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a004502:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a004504:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a004506:	20a5      	movs	r0, #165	; 0xa5
1a004508:	4770      	bx	lr
1a00450a:	bf00      	nop
1a00450c:	400c5000 	.word	0x400c5000

1a004510 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a004510:	4b04      	ldr	r3, [pc, #16]	; (1a004524 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a004512:	4298      	cmp	r0, r3
1a004514:	d002      	beq.n	1a00451c <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a004516:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a00451a:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a00451c:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a004520:	4770      	bx	lr
1a004522:	bf00      	nop
1a004524:	400c5000 	.word	0x400c5000

1a004528 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a004528:	6803      	ldr	r3, [r0, #0]
1a00452a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a00452e:	0209      	lsls	r1, r1, #8
1a004530:	b289      	uxth	r1, r1
1a004532:	4319      	orrs	r1, r3
1a004534:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a004536:	6102      	str	r2, [r0, #16]
}
1a004538:	4770      	bx	lr

1a00453a <Chip_SSP_RWFrames_Blocking>:

/* SSP Polling Read/Write in blocking mode */
uint32_t Chip_SSP_RWFrames_Blocking(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
1a00453a:	b538      	push	{r3, r4, r5, lr}
1a00453c:	4604      	mov	r4, r0
1a00453e:	460d      	mov	r5, r1
	return (pSSP->SR & Stat) ? SET : RESET;
1a004540:	68e3      	ldr	r3, [r4, #12]
	/* Clear all remaining frames in RX FIFO */
	while (Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE)) {
1a004542:	f013 0f04 	tst.w	r3, #4
1a004546:	d001      	beq.n	1a00454c <Chip_SSP_RWFrames_Blocking+0x12>
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a004548:	68a3      	ldr	r3, [r4, #8]
1a00454a:	e7f9      	b.n	1a004540 <Chip_SSP_RWFrames_Blocking+0x6>
	pSSP->ICR = IntClear;
1a00454c:	2303      	movs	r3, #3
1a00454e:	6223      	str	r3, [r4, #32]
	return SSP_CR0_DSS(pSSP->CR0);
1a004550:	6823      	ldr	r3, [r4, #0]
	}

	/* Clear status */
	Chip_SSP_ClearIntPending(pSSP, SSP_INT_CLEAR_BITMASK);

	if (Chip_SSP_GetDataSize(pSSP) > SSP_BITS_8) {
1a004552:	f013 0f08 	tst.w	r3, #8
1a004556:	d108      	bne.n	1a00456a <Chip_SSP_RWFrames_Blocking+0x30>
1a004558:	e022      	b.n	1a0045a0 <Chip_SSP_RWFrames_Blocking+0x66>
	return (pSSP->RIS & RawInt) ? SET : RESET;
1a00455a:	69a3      	ldr	r3, [r4, #24]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
				SSP_Write2BFifo(pSSP, xf_setup);
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
1a00455c:	f013 0f01 	tst.w	r3, #1
1a004560:	d139      	bne.n	1a0045d6 <Chip_SSP_RWFrames_Blocking+0x9c>
				return ERROR;
			}

			/* Check for any data available in RX FIFO */
			SSP_Read2BFifo(pSSP, xf_setup);
1a004562:	4629      	mov	r1, r5
1a004564:	4620      	mov	r0, r4
1a004566:	f7ff ff87 	bl	1a004478 <SSP_Read2BFifo>
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
1a00456a:	68ea      	ldr	r2, [r5, #12]
1a00456c:	692b      	ldr	r3, [r5, #16]
1a00456e:	429a      	cmp	r2, r3
1a004570:	d302      	bcc.n	1a004578 <Chip_SSP_RWFrames_Blocking+0x3e>
1a004572:	686a      	ldr	r2, [r5, #4]
1a004574:	4293      	cmp	r3, r2
1a004576:	d926      	bls.n	1a0045c6 <Chip_SSP_RWFrames_Blocking+0x8c>
	return (pSSP->SR & Stat) ? SET : RESET;
1a004578:	68e2      	ldr	r2, [r4, #12]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
1a00457a:	f012 0f02 	tst.w	r2, #2
1a00457e:	d0ec      	beq.n	1a00455a <Chip_SSP_RWFrames_Blocking+0x20>
1a004580:	686a      	ldr	r2, [r5, #4]
1a004582:	429a      	cmp	r2, r3
1a004584:	d2e9      	bcs.n	1a00455a <Chip_SSP_RWFrames_Blocking+0x20>
				SSP_Write2BFifo(pSSP, xf_setup);
1a004586:	4629      	mov	r1, r5
1a004588:	4620      	mov	r0, r4
1a00458a:	f7ff ff5c 	bl	1a004446 <SSP_Write2BFifo>
1a00458e:	e7e4      	b.n	1a00455a <Chip_SSP_RWFrames_Blocking+0x20>
	return (pSSP->RIS & RawInt) ? SET : RESET;
1a004590:	69a3      	ldr	r3, [r4, #24]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
				SSP_Write1BFifo(pSSP, xf_setup);
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
1a004592:	f013 0f01 	tst.w	r3, #1
1a004596:	d120      	bne.n	1a0045da <Chip_SSP_RWFrames_Blocking+0xa0>
				return ERROR;
			}

			/* Check for any data available in RX FIFO */
			SSP_Read1BFifo(pSSP, xf_setup);
1a004598:	4629      	mov	r1, r5
1a00459a:	4620      	mov	r0, r4
1a00459c:	f7ff ff8d 	bl	1a0044ba <SSP_Read1BFifo>
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
1a0045a0:	68ea      	ldr	r2, [r5, #12]
1a0045a2:	692b      	ldr	r3, [r5, #16]
1a0045a4:	429a      	cmp	r2, r3
1a0045a6:	d302      	bcc.n	1a0045ae <Chip_SSP_RWFrames_Blocking+0x74>
1a0045a8:	686a      	ldr	r2, [r5, #4]
1a0045aa:	4293      	cmp	r3, r2
1a0045ac:	d90b      	bls.n	1a0045c6 <Chip_SSP_RWFrames_Blocking+0x8c>
	return (pSSP->SR & Stat) ? SET : RESET;
1a0045ae:	68e2      	ldr	r2, [r4, #12]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
1a0045b0:	f012 0f02 	tst.w	r2, #2
1a0045b4:	d0ec      	beq.n	1a004590 <Chip_SSP_RWFrames_Blocking+0x56>
1a0045b6:	686a      	ldr	r2, [r5, #4]
1a0045b8:	429a      	cmp	r2, r3
1a0045ba:	d2e9      	bcs.n	1a004590 <Chip_SSP_RWFrames_Blocking+0x56>
				SSP_Write1BFifo(pSSP, xf_setup);
1a0045bc:	4629      	mov	r1, r5
1a0045be:	4620      	mov	r0, r4
1a0045c0:	f7ff ff4e 	bl	1a004460 <SSP_Write1BFifo>
1a0045c4:	e7e4      	b.n	1a004590 <Chip_SSP_RWFrames_Blocking+0x56>
		}
	}
	if (xf_setup->tx_data) {
1a0045c6:	682b      	ldr	r3, [r5, #0]
1a0045c8:	b10b      	cbz	r3, 1a0045ce <Chip_SSP_RWFrames_Blocking+0x94>
		return xf_setup->tx_cnt;
1a0045ca:	6868      	ldr	r0, [r5, #4]
1a0045cc:	e004      	b.n	1a0045d8 <Chip_SSP_RWFrames_Blocking+0x9e>
	}
	else if (xf_setup->rx_data) {
1a0045ce:	68ab      	ldr	r3, [r5, #8]
1a0045d0:	b12b      	cbz	r3, 1a0045de <Chip_SSP_RWFrames_Blocking+0xa4>
		return xf_setup->rx_cnt;
1a0045d2:	68e8      	ldr	r0, [r5, #12]
1a0045d4:	e000      	b.n	1a0045d8 <Chip_SSP_RWFrames_Blocking+0x9e>
				return ERROR;
1a0045d6:	2000      	movs	r0, #0
	}

	return 0;
}
1a0045d8:	bd38      	pop	{r3, r4, r5, pc}
				return ERROR;
1a0045da:	2000      	movs	r0, #0
1a0045dc:	e7fc      	b.n	1a0045d8 <Chip_SSP_RWFrames_Blocking+0x9e>
	return 0;
1a0045de:	2000      	movs	r0, #0
1a0045e0:	e7fa      	b.n	1a0045d8 <Chip_SSP_RWFrames_Blocking+0x9e>

1a0045e2 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a0045e2:	b570      	push	{r4, r5, r6, lr}
1a0045e4:	4606      	mov	r6, r0
1a0045e6:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0045e8:	f7ff ff92 	bl	1a004510 <Chip_SSP_GetPeriphClockIndex>
1a0045ec:	f7ff fde6 	bl	1a0041bc <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a0045f0:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a0045f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a0045f6:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a0045f8:	e000      	b.n	1a0045fc <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a0045fa:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a0045fc:	42ab      	cmp	r3, r5
1a0045fe:	d90b      	bls.n	1a004618 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a004600:	1c4c      	adds	r4, r1, #1
1a004602:	fb02 f304 	mul.w	r3, r2, r4
1a004606:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a00460a:	429d      	cmp	r5, r3
1a00460c:	d2f6      	bcs.n	1a0045fc <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a00460e:	2cff      	cmp	r4, #255	; 0xff
1a004610:	d9f3      	bls.n	1a0045fa <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a004612:	3202      	adds	r2, #2
				cr0_div = 0;
1a004614:	2100      	movs	r1, #0
1a004616:	e7f1      	b.n	1a0045fc <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a004618:	4630      	mov	r0, r6
1a00461a:	f7ff ff85 	bl	1a004528 <Chip_SSP_SetClockRate>
}
1a00461e:	bd70      	pop	{r4, r5, r6, pc}

1a004620 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a004620:	b510      	push	{r4, lr}
1a004622:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a004624:	f7ff ff6a 	bl	1a0044fc <Chip_SSP_GetClockIndex>
1a004628:	f7ff fda2 	bl	1a004170 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a00462c:	4620      	mov	r0, r4
1a00462e:	f7ff ff6f 	bl	1a004510 <Chip_SSP_GetPeriphClockIndex>
1a004632:	f7ff fd9d 	bl	1a004170 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a004636:	6863      	ldr	r3, [r4, #4]
1a004638:	f023 0304 	bic.w	r3, r3, #4
1a00463c:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00463e:	6823      	ldr	r3, [r4, #0]
1a004640:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a004644:	f043 0307 	orr.w	r3, r3, #7
1a004648:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a00464a:	4902      	ldr	r1, [pc, #8]	; (1a004654 <Chip_SSP_Init+0x34>)
1a00464c:	4620      	mov	r0, r4
1a00464e:	f7ff ffc8 	bl	1a0045e2 <Chip_SSP_SetBitRate>
}
1a004652:	bd10      	pop	{r4, pc}
1a004654:	000186a0 	.word	0x000186a0

1a004658 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a004658:	2901      	cmp	r1, #1
1a00465a:	d109      	bne.n	1a004670 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a00465c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a004660:	0082      	lsls	r2, r0, #2
1a004662:	4b04      	ldr	r3, [pc, #16]	; (1a004674 <Chip_I2C_EventHandler+0x1c>)
1a004664:	4413      	add	r3, r2
1a004666:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a004668:	7d13      	ldrb	r3, [r2, #20]
1a00466a:	b2db      	uxtb	r3, r3
1a00466c:	2b04      	cmp	r3, #4
1a00466e:	d0fb      	beq.n	1a004668 <Chip_I2C_EventHandler+0x10>
}
1a004670:	4770      	bx	lr
1a004672:	bf00      	nop
1a004674:	10000010 	.word	0x10000010

1a004678 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a004678:	b570      	push	{r4, r5, r6, lr}
1a00467a:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a00467c:	4e06      	ldr	r6, [pc, #24]	; (1a004698 <Chip_I2C_Init+0x20>)
1a00467e:	00c4      	lsls	r4, r0, #3
1a004680:	1a22      	subs	r2, r4, r0
1a004682:	0093      	lsls	r3, r2, #2
1a004684:	4433      	add	r3, r6
1a004686:	8898      	ldrh	r0, [r3, #4]
1a004688:	f7ff fd72 	bl	1a004170 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a00468c:	1b64      	subs	r4, r4, r5
1a00468e:	00a3      	lsls	r3, r4, #2
1a004690:	58f3      	ldr	r3, [r6, r3]
1a004692:	226c      	movs	r2, #108	; 0x6c
1a004694:	619a      	str	r2, [r3, #24]
}
1a004696:	bd70      	pop	{r4, r5, r6, pc}
1a004698:	10000010 	.word	0x10000010

1a00469c <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a00469c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0046a0:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a0046a2:	4e0b      	ldr	r6, [pc, #44]	; (1a0046d0 <Chip_I2C_SetClockRate+0x34>)
1a0046a4:	00c5      	lsls	r5, r0, #3
1a0046a6:	1a2b      	subs	r3, r5, r0
1a0046a8:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a0046ac:	eb06 0308 	add.w	r3, r6, r8
1a0046b0:	8898      	ldrh	r0, [r3, #4]
1a0046b2:	f7ff fd83 	bl	1a0041bc <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a0046b6:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0046ba:	f856 3008 	ldr.w	r3, [r6, r8]
1a0046be:	0842      	lsrs	r2, r0, #1
1a0046c0:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a0046c2:	f856 3008 	ldr.w	r3, [r6, r8]
1a0046c6:	691a      	ldr	r2, [r3, #16]
1a0046c8:	1a80      	subs	r0, r0, r2
1a0046ca:	6158      	str	r0, [r3, #20]
}
1a0046cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0046d0:	10000010 	.word	0x10000010

1a0046d4 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a0046d4:	b508      	push	{r3, lr}
   // to use CMSIS.
   volatile unsigned int *pCREG_M0APPMAP = (volatile unsigned int *) 0x40043404;
   // CMSIS : CREG->M0APPMAP = <address of vector table>
   *pCREG_M0APPMAP = (unsigned int)g_pfnVectors;
#else
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a0046d6:	4a0b      	ldr	r2, [pc, #44]	; (1a004704 <SystemInit+0x30>)
1a0046d8:	4b0b      	ldr	r3, [pc, #44]	; (1a004708 <SystemInit+0x34>)
1a0046da:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a0046dc:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a0046e0:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a0046e2:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a0046e6:	2b20      	cmp	r3, #32
1a0046e8:	d004      	beq.n	1a0046f4 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit only in M4 */
   Board_SystemInit();
1a0046ea:	f7ff f983 	bl	1a0039f4 <Board_SystemInit>
   Board_Init();
1a0046ee:	f7ff f913 	bl	1a003918 <Board_Init>
#endif
}
1a0046f2:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a0046f4:	4a04      	ldr	r2, [pc, #16]	; (1a004708 <SystemInit+0x34>)
1a0046f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a0046fa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0046fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a004702:	e7f2      	b.n	1a0046ea <SystemInit+0x16>
1a004704:	1a000000 	.word	0x1a000000
1a004708:	e000ed00 	.word	0xe000ed00

1a00470c <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a00470c:	4b04      	ldr	r3, [pc, #16]	; (1a004720 <cyclesCounterInit+0x14>)
1a00470e:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a004710:	4a04      	ldr	r2, [pc, #16]	; (1a004724 <cyclesCounterInit+0x18>)
1a004712:	6813      	ldr	r3, [r2, #0]
1a004714:	f043 0301 	orr.w	r3, r3, #1
1a004718:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a00471a:	2001      	movs	r0, #1
1a00471c:	4770      	bx	lr
1a00471e:	bf00      	nop
1a004720:	10000048 	.word	0x10000048
1a004724:	e0001000 	.word	0xe0001000

1a004728 <sleepUntilNextInterrupt>:
 */
void sleepUntilNextInterrupt( void )
{

   /* Instert an assembly instruction wfi (wait for interrupt) */
   __asm volatile( "wfi" );
1a004728:	bf30      	wfi

}
1a00472a:	4770      	bx	lr

1a00472c <rtcInit>:
 * @Brief: Configure RTC peripheral.
 * @param  rtc_t rtc: RTC structure
 * @return bool_t true (1) if config it is ok
 */
bool_t rtcInit( void )
{
1a00472c:	b510      	push	{r4, lr}
      // Already initialized
      ret_val = 0;
   } else {
*/
      /* RTC Block section ------------------------- */
      Chip_RTC_Init(LPC_RTC);
1a00472e:	4c07      	ldr	r4, [pc, #28]	; (1a00474c <rtcInit+0x20>)
1a004730:	4620      	mov	r0, r4
1a004732:	f7ff fe63 	bl	1a0043fc <Chip_RTC_Init>

      //rtcWrite( rtc );

      /* Enable rtc (starts increase the tick counter
         and second counter register) */
      Chip_RTC_Enable(LPC_RTC, ENABLE);
1a004736:	2101      	movs	r1, #1
1a004738:	4620      	mov	r0, r4
1a00473a:	f7ff fe2c 	bl	1a004396 <Chip_RTC_Enable>
      
      delay(2100);
1a00473e:	f640 0034 	movw	r0, #2100	; 0x834
1a004742:	2100      	movs	r1, #0
1a004744:	f000 fa8e 	bl	1a004c64 <delay>

      //init = 1;
   //}

   return ret_val;
}
1a004748:	2001      	movs	r0, #1
1a00474a:	bd10      	pop	{r4, pc}
1a00474c:	40046000 	.word	0x40046000

1a004750 <rtcRead>:
 * @Brief: Get time from RTC peripheral.
 * @param  rtc_t rtc: RTC structure
 * @return bool_t true (1) if config it is ok
 */
bool_t rtcRead( rtc_t * rtc )
{
1a004750:	b510      	push	{r4, lr}
1a004752:	b088      	sub	sp, #32
1a004754:	4604      	mov	r4, r0
   bool_t ret_val = 1;

   RTC_TIME_T rtcTime;

   Chip_RTC_GetFullTime(LPC_RTC, &rtcTime);
1a004756:	4669      	mov	r1, sp
1a004758:	4809      	ldr	r0, [pc, #36]	; (1a004780 <rtcRead+0x30>)
1a00475a:	f7ff fe28 	bl	1a0043ae <Chip_RTC_GetFullTime>

   rtc->sec = rtcTime.time[RTC_TIMETYPE_SECOND];
1a00475e:	9b00      	ldr	r3, [sp, #0]
1a004760:	71e3      	strb	r3, [r4, #7]
   rtc->min = rtcTime.time[RTC_TIMETYPE_MINUTE];
1a004762:	9b01      	ldr	r3, [sp, #4]
1a004764:	71a3      	strb	r3, [r4, #6]
   rtc->hour = rtcTime.time[RTC_TIMETYPE_HOUR];
1a004766:	9b02      	ldr	r3, [sp, #8]
1a004768:	7163      	strb	r3, [r4, #5]
   rtc->wday = rtcTime.time[RTC_TIMETYPE_DAYOFWEEK];
1a00476a:	9b04      	ldr	r3, [sp, #16]
1a00476c:	7123      	strb	r3, [r4, #4]
   rtc->mday = rtcTime.time[RTC_TIMETYPE_DAYOFMONTH];
1a00476e:	9b03      	ldr	r3, [sp, #12]
1a004770:	70e3      	strb	r3, [r4, #3]
   rtc->month = rtcTime.time[RTC_TIMETYPE_MONTH];
1a004772:	9b06      	ldr	r3, [sp, #24]
1a004774:	70a3      	strb	r3, [r4, #2]
   rtc->year = rtcTime.time[RTC_TIMETYPE_YEAR];
1a004776:	9b07      	ldr	r3, [sp, #28]
1a004778:	8023      	strh	r3, [r4, #0]

   return ret_val;
}
1a00477a:	2001      	movs	r0, #1
1a00477c:	b008      	add	sp, #32
1a00477e:	bd10      	pop	{r4, pc}
1a004780:	40046000 	.word	0x40046000

1a004784 <uartRxReady>:
//-------------------------------------------------------------

// Return TRUE if have unread data in RX FIFO
bool_t uartRxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
1a004784:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a004788:	0083      	lsls	r3, r0, #2
1a00478a:	4a03      	ldr	r2, [pc, #12]	; (1a004798 <uartRxReady+0x14>)
1a00478c:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a00478e:	6958      	ldr	r0, [r3, #20]
}
1a004790:	f000 0001 	and.w	r0, r0, #1
1a004794:	4770      	bx	lr
1a004796:	bf00      	nop
1a004798:	1a006170 	.word	0x1a006170

1a00479c <uartRxRead>:
}

// Read from RX FIFO
uint8_t uartRxRead( uartMap_t uart )
{
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a00479c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0047a0:	0083      	lsls	r3, r0, #2
1a0047a2:	4a02      	ldr	r2, [pc, #8]	; (1a0047ac <uartRxRead+0x10>)
1a0047a4:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0047a6:	6818      	ldr	r0, [r3, #0]
}
1a0047a8:	b2c0      	uxtb	r0, r0
1a0047aa:	4770      	bx	lr
1a0047ac:	1a006170 	.word	0x1a006170

1a0047b0 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a0047b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0047b4:	4680      	mov	r8, r0
1a0047b6:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a0047b8:	4c19      	ldr	r4, [pc, #100]	; (1a004820 <uartInit+0x70>)
1a0047ba:	0045      	lsls	r5, r0, #1
1a0047bc:	182a      	adds	r2, r5, r0
1a0047be:	0093      	lsls	r3, r2, #2
1a0047c0:	18e6      	adds	r6, r4, r3
1a0047c2:	58e7      	ldr	r7, [r4, r3]
1a0047c4:	4638      	mov	r0, r7
1a0047c6:	f7ff f931 	bl	1a003a2c <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a0047ca:	4649      	mov	r1, r9
1a0047cc:	4638      	mov	r0, r7
1a0047ce:	f7ff f957 	bl	1a003a80 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a0047d2:	2307      	movs	r3, #7
1a0047d4:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0047d6:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a0047d8:	2301      	movs	r3, #1
1a0047da:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a0047dc:	7930      	ldrb	r0, [r6, #4]
1a0047de:	7973      	ldrb	r3, [r6, #5]
1a0047e0:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0047e2:	f042 0218 	orr.w	r2, r2, #24
1a0047e6:	490f      	ldr	r1, [pc, #60]	; (1a004824 <uartInit+0x74>)
1a0047e8:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0047ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a0047f0:	79f0      	ldrb	r0, [r6, #7]
1a0047f2:	7a33      	ldrb	r3, [r6, #8]
1a0047f4:	7a72      	ldrb	r2, [r6, #9]
1a0047f6:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0047fa:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0047fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a004802:	f1b8 0f01 	cmp.w	r8, #1
1a004806:	d001      	beq.n	1a00480c <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a004808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a00480c:	4a06      	ldr	r2, [pc, #24]	; (1a004828 <uartInit+0x78>)
1a00480e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a004810:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a004814:	64d3      	str	r3, [r2, #76]	; 0x4c
1a004816:	221a      	movs	r2, #26
1a004818:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a00481c:	e7f4      	b.n	1a004808 <uartInit+0x58>
1a00481e:	bf00      	nop
1a004820:	1a006170 	.word	0x1a006170
1a004824:	40086000 	.word	0x40086000
1a004828:	40081000 	.word	0x40081000

1a00482c <uartReadByte>:
   }
}

// Read 1 byte from RX FIFO, check first if exist aviable data
bool_t uartReadByte( uartMap_t uart, uint8_t* receivedByte )
{
1a00482c:	b538      	push	{r3, r4, r5, lr}
1a00482e:	4605      	mov	r5, r0
1a004830:	460c      	mov	r4, r1
   bool_t retVal = TRUE;
   if ( uartRxReady(uart) ) {
1a004832:	f7ff ffa7 	bl	1a004784 <uartRxReady>
1a004836:	4603      	mov	r3, r0
1a004838:	b908      	cbnz	r0, 1a00483e <uartReadByte+0x12>
      *receivedByte = uartRxRead(uart);
   } else {
      retVal = FALSE;
   }
   return retVal;
}
1a00483a:	4618      	mov	r0, r3
1a00483c:	bd38      	pop	{r3, r4, r5, pc}
      *receivedByte = uartRxRead(uart);
1a00483e:	4628      	mov	r0, r5
1a004840:	f7ff ffac 	bl	1a00479c <uartRxRead>
1a004844:	7020      	strb	r0, [r4, #0]
   bool_t retVal = TRUE;
1a004846:	2301      	movs	r3, #1
1a004848:	e7f7      	b.n	1a00483a <uartReadByte+0xe>
1a00484a:	Address 0x000000001a00484a is out of bounds.


1a00484c <spiInit>:
bool_t spiInit( spiMap_t spi )
{

   bool_t retVal = TRUE;

   if( spi == SPI0 ) {
1a00484c:	b108      	cbz	r0, 1a004852 <spiInit+0x6>
      #else
         #error BOARD compile variable must be defined
      #endif

   } else {
      retVal = FALSE;
1a00484e:	2000      	movs	r0, #0
   }

   return retVal;
}
1a004850:	4770      	bx	lr
{
1a004852:	b570      	push	{r4, r5, r6, lr}
1a004854:	4c0e      	ldr	r4, [pc, #56]	; (1a004890 <spiInit+0x44>)
1a004856:	2600      	movs	r6, #0
1a004858:	f8c4 6790 	str.w	r6, [r4, #1936]	; 0x790
1a00485c:	23c5      	movs	r3, #197	; 0xc5
1a00485e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
1a004862:	2305      	movs	r3, #5
1a004864:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
         Chip_SSP_Init( LPC_SSP1 );
1a004868:	4d0a      	ldr	r5, [pc, #40]	; (1a004894 <spiInit+0x48>)
1a00486a:	4628      	mov	r0, r5
1a00486c:	f7ff fed8 	bl	1a004620 <Chip_SSP_Init>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a004870:	686b      	ldr	r3, [r5, #4]
1a004872:	f043 0302 	orr.w	r3, r3, #2
1a004876:	606b      	str	r3, [r5, #4]
1a004878:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
	pGPIO->DIR[port] |= 1UL << pin;
1a00487c:	4906      	ldr	r1, [pc, #24]	; (1a004898 <spiInit+0x4c>)
1a00487e:	f242 020c 	movw	r2, #8204	; 0x200c
1a004882:	588b      	ldr	r3, [r1, r2]
1a004884:	f043 0301 	orr.w	r3, r3, #1
1a004888:	508b      	str	r3, [r1, r2]
   bool_t retVal = TRUE;
1a00488a:	2001      	movs	r0, #1
}
1a00488c:	bd70      	pop	{r4, r5, r6, pc}
1a00488e:	bf00      	nop
1a004890:	40086000 	.word	0x40086000
1a004894:	400c5000 	.word	0x400c5000
1a004898:	400f4000 	.word	0x400f4000

1a00489c <tickRead>:
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
   #else
      return tickCounter;
   #endif
}
1a00489c:	4b01      	ldr	r3, [pc, #4]	; (1a0048a4 <tickRead+0x8>)
1a00489e:	e9d3 0100 	ldrd	r0, r1, [r3]
1a0048a2:	4770      	bx	lr
1a0048a4:	10000548 	.word	0x10000548

1a0048a8 <tickCallbackSet>:
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickCallbackSet() in a program with freeRTOS has no effect\r\n" );
      return 0;
   #else
      bool_t retVal = TRUE;
      if( tickCallback != NULL ) {
1a0048a8:	b130      	cbz	r0, 1a0048b8 <tickCallbackSet+0x10>
         tickHookFunction = tickCallback;
1a0048aa:	4a05      	ldr	r2, [pc, #20]	; (1a0048c0 <tickCallbackSet+0x18>)
1a0048ac:	6010      	str	r0, [r2, #0]
      bool_t retVal = TRUE;
1a0048ae:	2001      	movs	r0, #1
      } else {
         retVal = FALSE;
      }
      if( tickCallbackParams != NULL ) {
1a0048b0:	b121      	cbz	r1, 1a0048bc <tickCallbackSet+0x14>
         callBackFuncParams = tickCallbackParams;
1a0048b2:	4b04      	ldr	r3, [pc, #16]	; (1a0048c4 <tickCallbackSet+0x1c>)
1a0048b4:	6019      	str	r1, [r3, #0]
1a0048b6:	4770      	bx	lr
         retVal = FALSE;
1a0048b8:	2000      	movs	r0, #0
1a0048ba:	e7f9      	b.n	1a0048b0 <tickCallbackSet+0x8>
      } else {
         retVal &= FALSE;
1a0048bc:	2000      	movs	r0, #0
      }
      return retVal;
   #endif
}
1a0048be:	4770      	bx	lr
1a0048c0:	10000550 	.word	0x10000550
1a0048c4:	10000544 	.word	0x10000544

1a0048c8 <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a0048c8:	b118      	cbz	r0, 1a0048d2 <tickPowerSet+0xa>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a0048ca:	4b04      	ldr	r3, [pc, #16]	; (1a0048dc <tickPowerSet+0x14>)
1a0048cc:	2207      	movs	r2, #7
1a0048ce:	601a      	str	r2, [r3, #0]
1a0048d0:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a0048d2:	4b02      	ldr	r3, [pc, #8]	; (1a0048dc <tickPowerSet+0x14>)
1a0048d4:	2200      	movs	r2, #0
1a0048d6:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a0048d8:	4770      	bx	lr
1a0048da:	bf00      	nop
1a0048dc:	e000e010 	.word	0xe000e010

1a0048e0 <tickInit>:
{
1a0048e0:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a0048e2:	ea50 0401 	orrs.w	r4, r0, r1
1a0048e6:	d02a      	beq.n	1a00493e <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a0048e8:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a0048ec:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a0048f0:	2b00      	cmp	r3, #0
1a0048f2:	bf08      	it	eq
1a0048f4:	2a32      	cmpeq	r2, #50	; 0x32
1a0048f6:	d227      	bcs.n	1a004948 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a0048f8:	4b14      	ldr	r3, [pc, #80]	; (1a00494c <tickInit+0x6c>)
1a0048fa:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a0048fe:	4b14      	ldr	r3, [pc, #80]	; (1a004950 <tickInit+0x70>)
1a004900:	681b      	ldr	r3, [r3, #0]
1a004902:	fba3 4500 	umull	r4, r5, r3, r0
1a004906:	fb03 5501 	mla	r5, r3, r1, r5
1a00490a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00490e:	2300      	movs	r3, #0
1a004910:	4620      	mov	r0, r4
1a004912:	4629      	mov	r1, r5
1a004914:	f000 f9c2 	bl	1a004c9c <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a004918:	3801      	subs	r0, #1
1a00491a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a00491e:	d209      	bcs.n	1a004934 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a004920:	4b0c      	ldr	r3, [pc, #48]	; (1a004954 <tickInit+0x74>)
1a004922:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a004924:	4a0c      	ldr	r2, [pc, #48]	; (1a004958 <tickInit+0x78>)
1a004926:	21e0      	movs	r1, #224	; 0xe0
1a004928:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a00492c:	2200      	movs	r2, #0
1a00492e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a004930:	2207      	movs	r2, #7
1a004932:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a004934:	2001      	movs	r0, #1
1a004936:	f7ff ffc7 	bl	1a0048c8 <tickPowerSet>
      bool_t ret_val = 1;
1a00493a:	2001      	movs	r0, #1
}
1a00493c:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a00493e:	2000      	movs	r0, #0
1a004940:	f7ff ffc2 	bl	1a0048c8 <tickPowerSet>
         ret_val = 0;
1a004944:	2000      	movs	r0, #0
1a004946:	e7f9      	b.n	1a00493c <tickInit+0x5c>
            ret_val = 0;
1a004948:	2000      	movs	r0, #0
1a00494a:	e7f7      	b.n	1a00493c <tickInit+0x5c>
1a00494c:	10000050 	.word	0x10000050
1a004950:	1000129c 	.word	0x1000129c
1a004954:	e000e010 	.word	0xe000e010
1a004958:	e000ed00 	.word	0xe000ed00

1a00495c <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a00495c:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a00495e:	4a07      	ldr	r2, [pc, #28]	; (1a00497c <SysTick_Handler+0x20>)
1a004960:	6813      	ldr	r3, [r2, #0]
1a004962:	6851      	ldr	r1, [r2, #4]
1a004964:	3301      	adds	r3, #1
1a004966:	f141 0100 	adc.w	r1, r1, #0
1a00496a:	6013      	str	r3, [r2, #0]
1a00496c:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a00496e:	4b04      	ldr	r3, [pc, #16]	; (1a004980 <SysTick_Handler+0x24>)
1a004970:	681b      	ldr	r3, [r3, #0]
1a004972:	b113      	cbz	r3, 1a00497a <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a004974:	4a03      	ldr	r2, [pc, #12]	; (1a004984 <SysTick_Handler+0x28>)
1a004976:	6810      	ldr	r0, [r2, #0]
1a004978:	4798      	blx	r3
   }
}
1a00497a:	bd08      	pop	{r3, pc}
1a00497c:	10000548 	.word	0x10000548
1a004980:	10000550 	.word	0x10000550
1a004984:	10000544 	.word	0x10000544

1a004988 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a004988:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00498a:	4d0b      	ldr	r5, [pc, #44]	; (1a0049b8 <gpioObtainPinInit+0x30>)
1a00498c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a004990:	182c      	adds	r4, r5, r0
1a004992:	5628      	ldrsb	r0, [r5, r0]
1a004994:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a004996:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a00499a:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a00499c:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a0049a0:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a0049a2:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a0049a6:	9b02      	ldr	r3, [sp, #8]
1a0049a8:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a0049aa:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a0049ae:	9b03      	ldr	r3, [sp, #12]
1a0049b0:	701a      	strb	r2, [r3, #0]
}
1a0049b2:	bc30      	pop	{r4, r5}
1a0049b4:	4770      	bx	lr
1a0049b6:	bf00      	nop
1a0049b8:	1a0061b8 	.word	0x1a0061b8

1a0049bc <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a0049bc:	f110 0f02 	cmn.w	r0, #2
1a0049c0:	f000 80c7 	beq.w	1a004b52 <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a0049c4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0049c8:	f000 80c5 	beq.w	1a004b56 <gpioInit+0x19a>
{
1a0049cc:	b570      	push	{r4, r5, r6, lr}
1a0049ce:	b084      	sub	sp, #16
1a0049d0:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0049d2:	2300      	movs	r3, #0
1a0049d4:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0049d8:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0049dc:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0049e0:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0049e4:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0049e8:	f10d 030b 	add.w	r3, sp, #11
1a0049ec:	9301      	str	r3, [sp, #4]
1a0049ee:	ab03      	add	r3, sp, #12
1a0049f0:	9300      	str	r3, [sp, #0]
1a0049f2:	f10d 030d 	add.w	r3, sp, #13
1a0049f6:	f10d 020e 	add.w	r2, sp, #14
1a0049fa:	f10d 010f 	add.w	r1, sp, #15
1a0049fe:	f7ff ffc3 	bl	1a004988 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a004a02:	2c05      	cmp	r4, #5
1a004a04:	f200 80a9 	bhi.w	1a004b5a <gpioInit+0x19e>
1a004a08:	e8df f004 	tbb	[pc, r4]
1a004a0c:	45278109 	.word	0x45278109
1a004a10:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a004a12:	4853      	ldr	r0, [pc, #332]	; (1a004b60 <gpioInit+0x1a4>)
1a004a14:	f7ff fd16 	bl	1a004444 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a004a18:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a004a1a:	b004      	add	sp, #16
1a004a1c:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a004a1e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a004a22:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a004a26:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a004a2a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a004a2e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a004a32:	494c      	ldr	r1, [pc, #304]	; (1a004b64 <gpioInit+0x1a8>)
1a004a34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004a38:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004a3c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004a40:	2001      	movs	r0, #1
1a004a42:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] &= ~bitValue;
1a004a46:	4c46      	ldr	r4, [pc, #280]	; (1a004b60 <gpioInit+0x1a4>)
1a004a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a004a4c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a004a50:	ea22 0201 	bic.w	r2, r2, r1
1a004a54:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a004a58:	e7df      	b.n	1a004a1a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a004a5a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a004a5e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a004a62:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a004a66:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a004a6a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a004a6e:	493d      	ldr	r1, [pc, #244]	; (1a004b64 <gpioInit+0x1a8>)
1a004a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004a74:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004a78:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004a7c:	2001      	movs	r0, #1
1a004a7e:	fa00 f102 	lsl.w	r1, r0, r2
1a004a82:	4c37      	ldr	r4, [pc, #220]	; (1a004b60 <gpioInit+0x1a4>)
1a004a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a004a88:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a004a8c:	ea22 0201 	bic.w	r2, r2, r1
1a004a90:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a004a94:	e7c1      	b.n	1a004a1a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a004a96:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a004a9a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a004a9e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a004aa2:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a004aa6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a004aaa:	492e      	ldr	r1, [pc, #184]	; (1a004b64 <gpioInit+0x1a8>)
1a004aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004ab0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004ab4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004ab8:	2001      	movs	r0, #1
1a004aba:	fa00 f102 	lsl.w	r1, r0, r2
1a004abe:	4c28      	ldr	r4, [pc, #160]	; (1a004b60 <gpioInit+0x1a4>)
1a004ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a004ac4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a004ac8:	ea22 0201 	bic.w	r2, r2, r1
1a004acc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a004ad0:	e7a3      	b.n	1a004a1a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a004ad2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a004ad6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a004ada:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a004ade:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a004ae2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a004ae6:	491f      	ldr	r1, [pc, #124]	; (1a004b64 <gpioInit+0x1a8>)
1a004ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004aec:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004af0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004af4:	2001      	movs	r0, #1
1a004af6:	fa00 f102 	lsl.w	r1, r0, r2
1a004afa:	4c19      	ldr	r4, [pc, #100]	; (1a004b60 <gpioInit+0x1a4>)
1a004afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a004b00:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a004b04:	ea22 0201 	bic.w	r2, r2, r1
1a004b08:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a004b0c:	e785      	b.n	1a004a1a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a004b0e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a004b12:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a004b16:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a004b1a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a004b1e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a004b22:	4910      	ldr	r1, [pc, #64]	; (1a004b64 <gpioInit+0x1a8>)
1a004b24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a004b28:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a004b2c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004b30:	2001      	movs	r0, #1
1a004b32:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a004b36:	4b0a      	ldr	r3, [pc, #40]	; (1a004b60 <gpioInit+0x1a4>)
1a004b38:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a004b3c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a004b40:	4331      	orrs	r1, r6
1a004b42:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a004b46:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a004b48:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a004b4c:	2100      	movs	r1, #0
1a004b4e:	5499      	strb	r1, [r3, r2]
1a004b50:	e763      	b.n	1a004a1a <gpioInit+0x5e>
	  return FALSE;
1a004b52:	2000      	movs	r0, #0
1a004b54:	4770      	bx	lr
	  return FALSE;
1a004b56:	2000      	movs	r0, #0
}
1a004b58:	4770      	bx	lr
      ret_val = 0;
1a004b5a:	2000      	movs	r0, #0
1a004b5c:	e75d      	b.n	1a004a1a <gpioInit+0x5e>
1a004b5e:	bf00      	nop
1a004b60:	400f4000 	.word	0x400f4000
1a004b64:	40086000 	.word	0x40086000

1a004b68 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a004b68:	f110 0f02 	cmn.w	r0, #2
1a004b6c:	d02d      	beq.n	1a004bca <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a004b6e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a004b72:	d02c      	beq.n	1a004bce <gpioWrite+0x66>
{
1a004b74:	b510      	push	{r4, lr}
1a004b76:	b084      	sub	sp, #16
1a004b78:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a004b7a:	2300      	movs	r3, #0
1a004b7c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a004b80:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a004b84:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a004b88:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a004b8c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a004b90:	f10d 030b 	add.w	r3, sp, #11
1a004b94:	9301      	str	r3, [sp, #4]
1a004b96:	ab03      	add	r3, sp, #12
1a004b98:	9300      	str	r3, [sp, #0]
1a004b9a:	f10d 030d 	add.w	r3, sp, #13
1a004b9e:	f10d 020e 	add.w	r2, sp, #14
1a004ba2:	f10d 010f 	add.w	r1, sp, #15
1a004ba6:	f7ff feef 	bl	1a004988 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a004baa:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004bae:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a004bb2:	1c21      	adds	r1, r4, #0
1a004bb4:	bf18      	it	ne
1a004bb6:	2101      	movne	r1, #1
1a004bb8:	015b      	lsls	r3, r3, #5
1a004bba:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a004bbe:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a004bc2:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a004bc4:	2001      	movs	r0, #1
}
1a004bc6:	b004      	add	sp, #16
1a004bc8:	bd10      	pop	{r4, pc}
	  return FALSE;
1a004bca:	2000      	movs	r0, #0
1a004bcc:	4770      	bx	lr
	  return FALSE;
1a004bce:	2000      	movs	r0, #0
}
1a004bd0:	4770      	bx	lr
1a004bd2:	Address 0x000000001a004bd2 is out of bounds.


1a004bd4 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a004bd4:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a004bd6:	4b04      	ldr	r3, [pc, #16]	; (1a004be8 <USB0_IRQHandler+0x14>)
1a004bd8:	681b      	ldr	r3, [r3, #0]
1a004bda:	681b      	ldr	r3, [r3, #0]
1a004bdc:	68db      	ldr	r3, [r3, #12]
1a004bde:	4a03      	ldr	r2, [pc, #12]	; (1a004bec <USB0_IRQHandler+0x18>)
1a004be0:	6810      	ldr	r0, [r2, #0]
1a004be2:	4798      	blx	r3
}
1a004be4:	bd08      	pop	{r3, pc}
1a004be6:	bf00      	nop
1a004be8:	100012a0 	.word	0x100012a0
1a004bec:	10000554 	.word	0x10000554

1a004bf0 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a004bf0:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a004bf2:	f7ff fb09 	bl	1a004208 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a004bf6:	4b1a      	ldr	r3, [pc, #104]	; (1a004c60 <boardInit+0x70>)
1a004bf8:	6818      	ldr	r0, [r3, #0]
1a004bfa:	f7ff fd87 	bl	1a00470c <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a004bfe:	2001      	movs	r0, #1
1a004c00:	2100      	movs	r1, #0
1a004c02:	f7ff fe6d 	bl	1a0048e0 <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a004c06:	2105      	movs	r1, #5
1a004c08:	2000      	movs	r0, #0
1a004c0a:	f7ff fed7 	bl	1a0049bc <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a004c0e:	2100      	movs	r1, #0
1a004c10:	2024      	movs	r0, #36	; 0x24
1a004c12:	f7ff fed3 	bl	1a0049bc <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a004c16:	2100      	movs	r1, #0
1a004c18:	2025      	movs	r0, #37	; 0x25
1a004c1a:	f7ff fecf 	bl	1a0049bc <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a004c1e:	2100      	movs	r1, #0
1a004c20:	2026      	movs	r0, #38	; 0x26
1a004c22:	f7ff fecb 	bl	1a0049bc <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a004c26:	2100      	movs	r1, #0
1a004c28:	2027      	movs	r0, #39	; 0x27
1a004c2a:	f7ff fec7 	bl	1a0049bc <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a004c2e:	2101      	movs	r1, #1
1a004c30:	2028      	movs	r0, #40	; 0x28
1a004c32:	f7ff fec3 	bl	1a0049bc <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a004c36:	2101      	movs	r1, #1
1a004c38:	2029      	movs	r0, #41	; 0x29
1a004c3a:	f7ff febf 	bl	1a0049bc <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a004c3e:	2101      	movs	r1, #1
1a004c40:	202a      	movs	r0, #42	; 0x2a
1a004c42:	f7ff febb 	bl	1a0049bc <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a004c46:	2101      	movs	r1, #1
1a004c48:	202b      	movs	r0, #43	; 0x2b
1a004c4a:	f7ff feb7 	bl	1a0049bc <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a004c4e:	2101      	movs	r1, #1
1a004c50:	202c      	movs	r0, #44	; 0x2c
1a004c52:	f7ff feb3 	bl	1a0049bc <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a004c56:	2101      	movs	r1, #1
1a004c58:	202d      	movs	r0, #45	; 0x2d
1a004c5a:	f7ff feaf 	bl	1a0049bc <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a004c5e:	bd08      	pop	{r3, pc}
1a004c60:	1000129c 	.word	0x1000129c

1a004c64 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay( tick_t duration_ms )
{
1a004c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a004c68:	4680      	mov	r8, r0
1a004c6a:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a004c6c:	f7ff fe16 	bl	1a00489c <tickRead>
1a004c70:	4606      	mov	r6, r0
1a004c72:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration_ms/tickRateMS );
1a004c74:	f7ff fe12 	bl	1a00489c <tickRead>
1a004c78:	1b84      	subs	r4, r0, r6
1a004c7a:	eb61 0507 	sbc.w	r5, r1, r7
1a004c7e:	4b06      	ldr	r3, [pc, #24]	; (1a004c98 <delay+0x34>)
1a004c80:	e9d3 2300 	ldrd	r2, r3, [r3]
1a004c84:	4640      	mov	r0, r8
1a004c86:	4649      	mov	r1, r9
1a004c88:	f000 f808 	bl	1a004c9c <__aeabi_uldivmod>
1a004c8c:	428d      	cmp	r5, r1
1a004c8e:	bf08      	it	eq
1a004c90:	4284      	cmpeq	r4, r0
1a004c92:	d3ef      	bcc.n	1a004c74 <delay+0x10>
}
1a004c94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a004c98:	10000050 	.word	0x10000050

1a004c9c <__aeabi_uldivmod>:
1a004c9c:	b953      	cbnz	r3, 1a004cb4 <__aeabi_uldivmod+0x18>
1a004c9e:	b94a      	cbnz	r2, 1a004cb4 <__aeabi_uldivmod+0x18>
1a004ca0:	2900      	cmp	r1, #0
1a004ca2:	bf08      	it	eq
1a004ca4:	2800      	cmpeq	r0, #0
1a004ca6:	bf1c      	itt	ne
1a004ca8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a004cac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a004cb0:	f000 b974 	b.w	1a004f9c <__aeabi_idiv0>
1a004cb4:	f1ad 0c08 	sub.w	ip, sp, #8
1a004cb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a004cbc:	f000 f806 	bl	1a004ccc <__udivmoddi4>
1a004cc0:	f8dd e004 	ldr.w	lr, [sp, #4]
1a004cc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a004cc8:	b004      	add	sp, #16
1a004cca:	4770      	bx	lr

1a004ccc <__udivmoddi4>:
1a004ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a004cd0:	9e08      	ldr	r6, [sp, #32]
1a004cd2:	4604      	mov	r4, r0
1a004cd4:	4688      	mov	r8, r1
1a004cd6:	2b00      	cmp	r3, #0
1a004cd8:	f040 8085 	bne.w	1a004de6 <__udivmoddi4+0x11a>
1a004cdc:	428a      	cmp	r2, r1
1a004cde:	4615      	mov	r5, r2
1a004ce0:	d948      	bls.n	1a004d74 <__udivmoddi4+0xa8>
1a004ce2:	fab2 f282 	clz	r2, r2
1a004ce6:	b14a      	cbz	r2, 1a004cfc <__udivmoddi4+0x30>
1a004ce8:	f1c2 0720 	rsb	r7, r2, #32
1a004cec:	fa01 f302 	lsl.w	r3, r1, r2
1a004cf0:	fa20 f707 	lsr.w	r7, r0, r7
1a004cf4:	4095      	lsls	r5, r2
1a004cf6:	ea47 0803 	orr.w	r8, r7, r3
1a004cfa:	4094      	lsls	r4, r2
1a004cfc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a004d00:	0c23      	lsrs	r3, r4, #16
1a004d02:	fbb8 f7fe 	udiv	r7, r8, lr
1a004d06:	fa1f fc85 	uxth.w	ip, r5
1a004d0a:	fb0e 8817 	mls	r8, lr, r7, r8
1a004d0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a004d12:	fb07 f10c 	mul.w	r1, r7, ip
1a004d16:	4299      	cmp	r1, r3
1a004d18:	d909      	bls.n	1a004d2e <__udivmoddi4+0x62>
1a004d1a:	18eb      	adds	r3, r5, r3
1a004d1c:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a004d20:	f080 80e3 	bcs.w	1a004eea <__udivmoddi4+0x21e>
1a004d24:	4299      	cmp	r1, r3
1a004d26:	f240 80e0 	bls.w	1a004eea <__udivmoddi4+0x21e>
1a004d2a:	3f02      	subs	r7, #2
1a004d2c:	442b      	add	r3, r5
1a004d2e:	1a5b      	subs	r3, r3, r1
1a004d30:	b2a4      	uxth	r4, r4
1a004d32:	fbb3 f0fe 	udiv	r0, r3, lr
1a004d36:	fb0e 3310 	mls	r3, lr, r0, r3
1a004d3a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a004d3e:	fb00 fc0c 	mul.w	ip, r0, ip
1a004d42:	45a4      	cmp	ip, r4
1a004d44:	d909      	bls.n	1a004d5a <__udivmoddi4+0x8e>
1a004d46:	192c      	adds	r4, r5, r4
1a004d48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a004d4c:	f080 80cb 	bcs.w	1a004ee6 <__udivmoddi4+0x21a>
1a004d50:	45a4      	cmp	ip, r4
1a004d52:	f240 80c8 	bls.w	1a004ee6 <__udivmoddi4+0x21a>
1a004d56:	3802      	subs	r0, #2
1a004d58:	442c      	add	r4, r5
1a004d5a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a004d5e:	eba4 040c 	sub.w	r4, r4, ip
1a004d62:	2700      	movs	r7, #0
1a004d64:	b11e      	cbz	r6, 1a004d6e <__udivmoddi4+0xa2>
1a004d66:	40d4      	lsrs	r4, r2
1a004d68:	2300      	movs	r3, #0
1a004d6a:	e9c6 4300 	strd	r4, r3, [r6]
1a004d6e:	4639      	mov	r1, r7
1a004d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004d74:	2a00      	cmp	r2, #0
1a004d76:	d053      	beq.n	1a004e20 <__udivmoddi4+0x154>
1a004d78:	fab2 f282 	clz	r2, r2
1a004d7c:	2a00      	cmp	r2, #0
1a004d7e:	f040 80b6 	bne.w	1a004eee <__udivmoddi4+0x222>
1a004d82:	1b49      	subs	r1, r1, r5
1a004d84:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a004d88:	fa1f f885 	uxth.w	r8, r5
1a004d8c:	2701      	movs	r7, #1
1a004d8e:	fbb1 fcfe 	udiv	ip, r1, lr
1a004d92:	0c23      	lsrs	r3, r4, #16
1a004d94:	fb0e 111c 	mls	r1, lr, ip, r1
1a004d98:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a004d9c:	fb08 f10c 	mul.w	r1, r8, ip
1a004da0:	4299      	cmp	r1, r3
1a004da2:	d907      	bls.n	1a004db4 <__udivmoddi4+0xe8>
1a004da4:	18eb      	adds	r3, r5, r3
1a004da6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a004daa:	d202      	bcs.n	1a004db2 <__udivmoddi4+0xe6>
1a004dac:	4299      	cmp	r1, r3
1a004dae:	f200 80ec 	bhi.w	1a004f8a <__udivmoddi4+0x2be>
1a004db2:	4684      	mov	ip, r0
1a004db4:	1a59      	subs	r1, r3, r1
1a004db6:	b2a3      	uxth	r3, r4
1a004db8:	fbb1 f0fe 	udiv	r0, r1, lr
1a004dbc:	fb0e 1410 	mls	r4, lr, r0, r1
1a004dc0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a004dc4:	fb08 f800 	mul.w	r8, r8, r0
1a004dc8:	45a0      	cmp	r8, r4
1a004dca:	d907      	bls.n	1a004ddc <__udivmoddi4+0x110>
1a004dcc:	192c      	adds	r4, r5, r4
1a004dce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a004dd2:	d202      	bcs.n	1a004dda <__udivmoddi4+0x10e>
1a004dd4:	45a0      	cmp	r8, r4
1a004dd6:	f200 80dc 	bhi.w	1a004f92 <__udivmoddi4+0x2c6>
1a004dda:	4618      	mov	r0, r3
1a004ddc:	eba4 0408 	sub.w	r4, r4, r8
1a004de0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a004de4:	e7be      	b.n	1a004d64 <__udivmoddi4+0x98>
1a004de6:	428b      	cmp	r3, r1
1a004de8:	d908      	bls.n	1a004dfc <__udivmoddi4+0x130>
1a004dea:	2e00      	cmp	r6, #0
1a004dec:	d078      	beq.n	1a004ee0 <__udivmoddi4+0x214>
1a004dee:	2700      	movs	r7, #0
1a004df0:	e9c6 0100 	strd	r0, r1, [r6]
1a004df4:	4638      	mov	r0, r7
1a004df6:	4639      	mov	r1, r7
1a004df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004dfc:	fab3 f783 	clz	r7, r3
1a004e00:	b97f      	cbnz	r7, 1a004e22 <__udivmoddi4+0x156>
1a004e02:	428b      	cmp	r3, r1
1a004e04:	d302      	bcc.n	1a004e0c <__udivmoddi4+0x140>
1a004e06:	4282      	cmp	r2, r0
1a004e08:	f200 80bd 	bhi.w	1a004f86 <__udivmoddi4+0x2ba>
1a004e0c:	1a84      	subs	r4, r0, r2
1a004e0e:	eb61 0303 	sbc.w	r3, r1, r3
1a004e12:	2001      	movs	r0, #1
1a004e14:	4698      	mov	r8, r3
1a004e16:	2e00      	cmp	r6, #0
1a004e18:	d0a9      	beq.n	1a004d6e <__udivmoddi4+0xa2>
1a004e1a:	e9c6 4800 	strd	r4, r8, [r6]
1a004e1e:	e7a6      	b.n	1a004d6e <__udivmoddi4+0xa2>
1a004e20:	deff      	udf	#255	; 0xff
1a004e22:	f1c7 0520 	rsb	r5, r7, #32
1a004e26:	40bb      	lsls	r3, r7
1a004e28:	fa22 fc05 	lsr.w	ip, r2, r5
1a004e2c:	ea4c 0c03 	orr.w	ip, ip, r3
1a004e30:	fa01 f407 	lsl.w	r4, r1, r7
1a004e34:	fa20 f805 	lsr.w	r8, r0, r5
1a004e38:	fa21 f305 	lsr.w	r3, r1, r5
1a004e3c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a004e40:	ea48 0404 	orr.w	r4, r8, r4
1a004e44:	fbb3 f9fe 	udiv	r9, r3, lr
1a004e48:	0c21      	lsrs	r1, r4, #16
1a004e4a:	fb0e 3319 	mls	r3, lr, r9, r3
1a004e4e:	fa1f f88c 	uxth.w	r8, ip
1a004e52:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a004e56:	fb09 fa08 	mul.w	sl, r9, r8
1a004e5a:	459a      	cmp	sl, r3
1a004e5c:	fa02 f207 	lsl.w	r2, r2, r7
1a004e60:	fa00 f107 	lsl.w	r1, r0, r7
1a004e64:	d90b      	bls.n	1a004e7e <__udivmoddi4+0x1b2>
1a004e66:	eb1c 0303 	adds.w	r3, ip, r3
1a004e6a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a004e6e:	f080 8088 	bcs.w	1a004f82 <__udivmoddi4+0x2b6>
1a004e72:	459a      	cmp	sl, r3
1a004e74:	f240 8085 	bls.w	1a004f82 <__udivmoddi4+0x2b6>
1a004e78:	f1a9 0902 	sub.w	r9, r9, #2
1a004e7c:	4463      	add	r3, ip
1a004e7e:	eba3 030a 	sub.w	r3, r3, sl
1a004e82:	b2a4      	uxth	r4, r4
1a004e84:	fbb3 f0fe 	udiv	r0, r3, lr
1a004e88:	fb0e 3310 	mls	r3, lr, r0, r3
1a004e8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a004e90:	fb00 f808 	mul.w	r8, r0, r8
1a004e94:	45a0      	cmp	r8, r4
1a004e96:	d908      	bls.n	1a004eaa <__udivmoddi4+0x1de>
1a004e98:	eb1c 0404 	adds.w	r4, ip, r4
1a004e9c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a004ea0:	d26b      	bcs.n	1a004f7a <__udivmoddi4+0x2ae>
1a004ea2:	45a0      	cmp	r8, r4
1a004ea4:	d969      	bls.n	1a004f7a <__udivmoddi4+0x2ae>
1a004ea6:	3802      	subs	r0, #2
1a004ea8:	4464      	add	r4, ip
1a004eaa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a004eae:	eba4 0408 	sub.w	r4, r4, r8
1a004eb2:	fba0 8902 	umull	r8, r9, r0, r2
1a004eb6:	454c      	cmp	r4, r9
1a004eb8:	46c6      	mov	lr, r8
1a004eba:	464b      	mov	r3, r9
1a004ebc:	d354      	bcc.n	1a004f68 <__udivmoddi4+0x29c>
1a004ebe:	d051      	beq.n	1a004f64 <__udivmoddi4+0x298>
1a004ec0:	2e00      	cmp	r6, #0
1a004ec2:	d069      	beq.n	1a004f98 <__udivmoddi4+0x2cc>
1a004ec4:	ebb1 020e 	subs.w	r2, r1, lr
1a004ec8:	eb64 0403 	sbc.w	r4, r4, r3
1a004ecc:	fa04 f505 	lsl.w	r5, r4, r5
1a004ed0:	fa22 f307 	lsr.w	r3, r2, r7
1a004ed4:	40fc      	lsrs	r4, r7
1a004ed6:	431d      	orrs	r5, r3
1a004ed8:	e9c6 5400 	strd	r5, r4, [r6]
1a004edc:	2700      	movs	r7, #0
1a004ede:	e746      	b.n	1a004d6e <__udivmoddi4+0xa2>
1a004ee0:	4637      	mov	r7, r6
1a004ee2:	4630      	mov	r0, r6
1a004ee4:	e743      	b.n	1a004d6e <__udivmoddi4+0xa2>
1a004ee6:	4618      	mov	r0, r3
1a004ee8:	e737      	b.n	1a004d5a <__udivmoddi4+0x8e>
1a004eea:	4607      	mov	r7, r0
1a004eec:	e71f      	b.n	1a004d2e <__udivmoddi4+0x62>
1a004eee:	f1c2 0320 	rsb	r3, r2, #32
1a004ef2:	fa20 f703 	lsr.w	r7, r0, r3
1a004ef6:	4095      	lsls	r5, r2
1a004ef8:	fa01 f002 	lsl.w	r0, r1, r2
1a004efc:	fa21 f303 	lsr.w	r3, r1, r3
1a004f00:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a004f04:	4338      	orrs	r0, r7
1a004f06:	0c01      	lsrs	r1, r0, #16
1a004f08:	fbb3 f7fe 	udiv	r7, r3, lr
1a004f0c:	fa1f f885 	uxth.w	r8, r5
1a004f10:	fb0e 3317 	mls	r3, lr, r7, r3
1a004f14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a004f18:	fb07 f308 	mul.w	r3, r7, r8
1a004f1c:	428b      	cmp	r3, r1
1a004f1e:	fa04 f402 	lsl.w	r4, r4, r2
1a004f22:	d907      	bls.n	1a004f34 <__udivmoddi4+0x268>
1a004f24:	1869      	adds	r1, r5, r1
1a004f26:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a004f2a:	d228      	bcs.n	1a004f7e <__udivmoddi4+0x2b2>
1a004f2c:	428b      	cmp	r3, r1
1a004f2e:	d926      	bls.n	1a004f7e <__udivmoddi4+0x2b2>
1a004f30:	3f02      	subs	r7, #2
1a004f32:	4429      	add	r1, r5
1a004f34:	1acb      	subs	r3, r1, r3
1a004f36:	b281      	uxth	r1, r0
1a004f38:	fbb3 f0fe 	udiv	r0, r3, lr
1a004f3c:	fb0e 3310 	mls	r3, lr, r0, r3
1a004f40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a004f44:	fb00 f308 	mul.w	r3, r0, r8
1a004f48:	428b      	cmp	r3, r1
1a004f4a:	d907      	bls.n	1a004f5c <__udivmoddi4+0x290>
1a004f4c:	1869      	adds	r1, r5, r1
1a004f4e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a004f52:	d210      	bcs.n	1a004f76 <__udivmoddi4+0x2aa>
1a004f54:	428b      	cmp	r3, r1
1a004f56:	d90e      	bls.n	1a004f76 <__udivmoddi4+0x2aa>
1a004f58:	3802      	subs	r0, #2
1a004f5a:	4429      	add	r1, r5
1a004f5c:	1ac9      	subs	r1, r1, r3
1a004f5e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a004f62:	e714      	b.n	1a004d8e <__udivmoddi4+0xc2>
1a004f64:	4541      	cmp	r1, r8
1a004f66:	d2ab      	bcs.n	1a004ec0 <__udivmoddi4+0x1f4>
1a004f68:	ebb8 0e02 	subs.w	lr, r8, r2
1a004f6c:	eb69 020c 	sbc.w	r2, r9, ip
1a004f70:	3801      	subs	r0, #1
1a004f72:	4613      	mov	r3, r2
1a004f74:	e7a4      	b.n	1a004ec0 <__udivmoddi4+0x1f4>
1a004f76:	4660      	mov	r0, ip
1a004f78:	e7f0      	b.n	1a004f5c <__udivmoddi4+0x290>
1a004f7a:	4618      	mov	r0, r3
1a004f7c:	e795      	b.n	1a004eaa <__udivmoddi4+0x1de>
1a004f7e:	4667      	mov	r7, ip
1a004f80:	e7d8      	b.n	1a004f34 <__udivmoddi4+0x268>
1a004f82:	4681      	mov	r9, r0
1a004f84:	e77b      	b.n	1a004e7e <__udivmoddi4+0x1b2>
1a004f86:	4638      	mov	r0, r7
1a004f88:	e745      	b.n	1a004e16 <__udivmoddi4+0x14a>
1a004f8a:	f1ac 0c02 	sub.w	ip, ip, #2
1a004f8e:	442b      	add	r3, r5
1a004f90:	e710      	b.n	1a004db4 <__udivmoddi4+0xe8>
1a004f92:	3802      	subs	r0, #2
1a004f94:	442c      	add	r4, r5
1a004f96:	e721      	b.n	1a004ddc <__udivmoddi4+0x110>
1a004f98:	4637      	mov	r7, r6
1a004f9a:	e6e8      	b.n	1a004d6e <__udivmoddi4+0xa2>

1a004f9c <__aeabi_idiv0>:
1a004f9c:	4770      	bx	lr
1a004f9e:	bf00      	nop

1a004fa0 <__libc_init_array>:
1a004fa0:	b570      	push	{r4, r5, r6, lr}
1a004fa2:	4d0d      	ldr	r5, [pc, #52]	; (1a004fd8 <__libc_init_array+0x38>)
1a004fa4:	4c0d      	ldr	r4, [pc, #52]	; (1a004fdc <__libc_init_array+0x3c>)
1a004fa6:	1b64      	subs	r4, r4, r5
1a004fa8:	10a4      	asrs	r4, r4, #2
1a004faa:	2600      	movs	r6, #0
1a004fac:	42a6      	cmp	r6, r4
1a004fae:	d109      	bne.n	1a004fc4 <__libc_init_array+0x24>
1a004fb0:	4d0b      	ldr	r5, [pc, #44]	; (1a004fe0 <__libc_init_array+0x40>)
1a004fb2:	4c0c      	ldr	r4, [pc, #48]	; (1a004fe4 <__libc_init_array+0x44>)
1a004fb4:	f7fb fbc9 	bl	1a00074a <_init>
1a004fb8:	1b64      	subs	r4, r4, r5
1a004fba:	10a4      	asrs	r4, r4, #2
1a004fbc:	2600      	movs	r6, #0
1a004fbe:	42a6      	cmp	r6, r4
1a004fc0:	d105      	bne.n	1a004fce <__libc_init_array+0x2e>
1a004fc2:	bd70      	pop	{r4, r5, r6, pc}
1a004fc4:	f855 3b04 	ldr.w	r3, [r5], #4
1a004fc8:	4798      	blx	r3
1a004fca:	3601      	adds	r6, #1
1a004fcc:	e7ee      	b.n	1a004fac <__libc_init_array+0xc>
1a004fce:	f855 3b04 	ldr.w	r3, [r5], #4
1a004fd2:	4798      	blx	r3
1a004fd4:	3601      	adds	r6, #1
1a004fd6:	e7f2      	b.n	1a004fbe <__libc_init_array+0x1e>
1a004fd8:	1a006334 	.word	0x1a006334
1a004fdc:	1a006334 	.word	0x1a006334
1a004fe0:	1a006334 	.word	0x1a006334
1a004fe4:	1a006338 	.word	0x1a006338

1a004fe8 <__retarget_lock_acquire_recursive>:
1a004fe8:	4770      	bx	lr

1a004fea <__retarget_lock_release_recursive>:
1a004fea:	4770      	bx	lr

1a004fec <memcpy>:
1a004fec:	440a      	add	r2, r1
1a004fee:	4291      	cmp	r1, r2
1a004ff0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a004ff4:	d100      	bne.n	1a004ff8 <memcpy+0xc>
1a004ff6:	4770      	bx	lr
1a004ff8:	b510      	push	{r4, lr}
1a004ffa:	f811 4b01 	ldrb.w	r4, [r1], #1
1a004ffe:	f803 4f01 	strb.w	r4, [r3, #1]!
1a005002:	4291      	cmp	r1, r2
1a005004:	d1f9      	bne.n	1a004ffa <memcpy+0xe>
1a005006:	bd10      	pop	{r4, pc}

1a005008 <memset>:
1a005008:	4402      	add	r2, r0
1a00500a:	4603      	mov	r3, r0
1a00500c:	4293      	cmp	r3, r2
1a00500e:	d100      	bne.n	1a005012 <memset+0xa>
1a005010:	4770      	bx	lr
1a005012:	f803 1b01 	strb.w	r1, [r3], #1
1a005016:	e7f9      	b.n	1a00500c <memset+0x4>

1a005018 <_free_r>:
1a005018:	b538      	push	{r3, r4, r5, lr}
1a00501a:	4605      	mov	r5, r0
1a00501c:	2900      	cmp	r1, #0
1a00501e:	d045      	beq.n	1a0050ac <_free_r+0x94>
1a005020:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a005024:	1f0c      	subs	r4, r1, #4
1a005026:	2b00      	cmp	r3, #0
1a005028:	bfb8      	it	lt
1a00502a:	18e4      	addlt	r4, r4, r3
1a00502c:	f000 fab2 	bl	1a005594 <__malloc_lock>
1a005030:	4a1f      	ldr	r2, [pc, #124]	; (1a0050b0 <_free_r+0x98>)
1a005032:	6813      	ldr	r3, [r2, #0]
1a005034:	4610      	mov	r0, r2
1a005036:	b933      	cbnz	r3, 1a005046 <_free_r+0x2e>
1a005038:	6063      	str	r3, [r4, #4]
1a00503a:	6014      	str	r4, [r2, #0]
1a00503c:	4628      	mov	r0, r5
1a00503e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a005042:	f000 baad 	b.w	1a0055a0 <__malloc_unlock>
1a005046:	42a3      	cmp	r3, r4
1a005048:	d90c      	bls.n	1a005064 <_free_r+0x4c>
1a00504a:	6821      	ldr	r1, [r4, #0]
1a00504c:	1862      	adds	r2, r4, r1
1a00504e:	4293      	cmp	r3, r2
1a005050:	bf04      	itt	eq
1a005052:	681a      	ldreq	r2, [r3, #0]
1a005054:	685b      	ldreq	r3, [r3, #4]
1a005056:	6063      	str	r3, [r4, #4]
1a005058:	bf04      	itt	eq
1a00505a:	1852      	addeq	r2, r2, r1
1a00505c:	6022      	streq	r2, [r4, #0]
1a00505e:	6004      	str	r4, [r0, #0]
1a005060:	e7ec      	b.n	1a00503c <_free_r+0x24>
1a005062:	4613      	mov	r3, r2
1a005064:	685a      	ldr	r2, [r3, #4]
1a005066:	b10a      	cbz	r2, 1a00506c <_free_r+0x54>
1a005068:	42a2      	cmp	r2, r4
1a00506a:	d9fa      	bls.n	1a005062 <_free_r+0x4a>
1a00506c:	6819      	ldr	r1, [r3, #0]
1a00506e:	1858      	adds	r0, r3, r1
1a005070:	42a0      	cmp	r0, r4
1a005072:	d10b      	bne.n	1a00508c <_free_r+0x74>
1a005074:	6820      	ldr	r0, [r4, #0]
1a005076:	4401      	add	r1, r0
1a005078:	1858      	adds	r0, r3, r1
1a00507a:	4282      	cmp	r2, r0
1a00507c:	6019      	str	r1, [r3, #0]
1a00507e:	d1dd      	bne.n	1a00503c <_free_r+0x24>
1a005080:	6810      	ldr	r0, [r2, #0]
1a005082:	6852      	ldr	r2, [r2, #4]
1a005084:	605a      	str	r2, [r3, #4]
1a005086:	4401      	add	r1, r0
1a005088:	6019      	str	r1, [r3, #0]
1a00508a:	e7d7      	b.n	1a00503c <_free_r+0x24>
1a00508c:	d902      	bls.n	1a005094 <_free_r+0x7c>
1a00508e:	230c      	movs	r3, #12
1a005090:	602b      	str	r3, [r5, #0]
1a005092:	e7d3      	b.n	1a00503c <_free_r+0x24>
1a005094:	6820      	ldr	r0, [r4, #0]
1a005096:	1821      	adds	r1, r4, r0
1a005098:	428a      	cmp	r2, r1
1a00509a:	bf04      	itt	eq
1a00509c:	6811      	ldreq	r1, [r2, #0]
1a00509e:	6852      	ldreq	r2, [r2, #4]
1a0050a0:	6062      	str	r2, [r4, #4]
1a0050a2:	bf04      	itt	eq
1a0050a4:	1809      	addeq	r1, r1, r0
1a0050a6:	6021      	streq	r1, [r4, #0]
1a0050a8:	605c      	str	r4, [r3, #4]
1a0050aa:	e7c7      	b.n	1a00503c <_free_r+0x24>
1a0050ac:	bd38      	pop	{r3, r4, r5, pc}
1a0050ae:	bf00      	nop
1a0050b0:	10000558 	.word	0x10000558

1a0050b4 <_malloc_r>:
1a0050b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0050b6:	1ccd      	adds	r5, r1, #3
1a0050b8:	f025 0503 	bic.w	r5, r5, #3
1a0050bc:	3508      	adds	r5, #8
1a0050be:	2d0c      	cmp	r5, #12
1a0050c0:	bf38      	it	cc
1a0050c2:	250c      	movcc	r5, #12
1a0050c4:	2d00      	cmp	r5, #0
1a0050c6:	4606      	mov	r6, r0
1a0050c8:	db01      	blt.n	1a0050ce <_malloc_r+0x1a>
1a0050ca:	42a9      	cmp	r1, r5
1a0050cc:	d903      	bls.n	1a0050d6 <_malloc_r+0x22>
1a0050ce:	230c      	movs	r3, #12
1a0050d0:	6033      	str	r3, [r6, #0]
1a0050d2:	2000      	movs	r0, #0
1a0050d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0050d6:	f000 fa5d 	bl	1a005594 <__malloc_lock>
1a0050da:	4921      	ldr	r1, [pc, #132]	; (1a005160 <_malloc_r+0xac>)
1a0050dc:	680a      	ldr	r2, [r1, #0]
1a0050de:	4614      	mov	r4, r2
1a0050e0:	b99c      	cbnz	r4, 1a00510a <_malloc_r+0x56>
1a0050e2:	4f20      	ldr	r7, [pc, #128]	; (1a005164 <_malloc_r+0xb0>)
1a0050e4:	683b      	ldr	r3, [r7, #0]
1a0050e6:	b923      	cbnz	r3, 1a0050f2 <_malloc_r+0x3e>
1a0050e8:	4621      	mov	r1, r4
1a0050ea:	4630      	mov	r0, r6
1a0050ec:	f7fb fb2e 	bl	1a00074c <_sbrk_r>
1a0050f0:	6038      	str	r0, [r7, #0]
1a0050f2:	4629      	mov	r1, r5
1a0050f4:	4630      	mov	r0, r6
1a0050f6:	f7fb fb29 	bl	1a00074c <_sbrk_r>
1a0050fa:	1c43      	adds	r3, r0, #1
1a0050fc:	d123      	bne.n	1a005146 <_malloc_r+0x92>
1a0050fe:	230c      	movs	r3, #12
1a005100:	6033      	str	r3, [r6, #0]
1a005102:	4630      	mov	r0, r6
1a005104:	f000 fa4c 	bl	1a0055a0 <__malloc_unlock>
1a005108:	e7e3      	b.n	1a0050d2 <_malloc_r+0x1e>
1a00510a:	6823      	ldr	r3, [r4, #0]
1a00510c:	1b5b      	subs	r3, r3, r5
1a00510e:	d417      	bmi.n	1a005140 <_malloc_r+0x8c>
1a005110:	2b0b      	cmp	r3, #11
1a005112:	d903      	bls.n	1a00511c <_malloc_r+0x68>
1a005114:	6023      	str	r3, [r4, #0]
1a005116:	441c      	add	r4, r3
1a005118:	6025      	str	r5, [r4, #0]
1a00511a:	e004      	b.n	1a005126 <_malloc_r+0x72>
1a00511c:	6863      	ldr	r3, [r4, #4]
1a00511e:	42a2      	cmp	r2, r4
1a005120:	bf0c      	ite	eq
1a005122:	600b      	streq	r3, [r1, #0]
1a005124:	6053      	strne	r3, [r2, #4]
1a005126:	4630      	mov	r0, r6
1a005128:	f000 fa3a 	bl	1a0055a0 <__malloc_unlock>
1a00512c:	f104 000b 	add.w	r0, r4, #11
1a005130:	1d23      	adds	r3, r4, #4
1a005132:	f020 0007 	bic.w	r0, r0, #7
1a005136:	1ac2      	subs	r2, r0, r3
1a005138:	d0cc      	beq.n	1a0050d4 <_malloc_r+0x20>
1a00513a:	1a1b      	subs	r3, r3, r0
1a00513c:	50a3      	str	r3, [r4, r2]
1a00513e:	e7c9      	b.n	1a0050d4 <_malloc_r+0x20>
1a005140:	4622      	mov	r2, r4
1a005142:	6864      	ldr	r4, [r4, #4]
1a005144:	e7cc      	b.n	1a0050e0 <_malloc_r+0x2c>
1a005146:	1cc4      	adds	r4, r0, #3
1a005148:	f024 0403 	bic.w	r4, r4, #3
1a00514c:	42a0      	cmp	r0, r4
1a00514e:	d0e3      	beq.n	1a005118 <_malloc_r+0x64>
1a005150:	1a21      	subs	r1, r4, r0
1a005152:	4630      	mov	r0, r6
1a005154:	f7fb fafa 	bl	1a00074c <_sbrk_r>
1a005158:	3001      	adds	r0, #1
1a00515a:	d1dd      	bne.n	1a005118 <_malloc_r+0x64>
1a00515c:	e7cf      	b.n	1a0050fe <_malloc_r+0x4a>
1a00515e:	bf00      	nop
1a005160:	10000558 	.word	0x10000558
1a005164:	1000055c 	.word	0x1000055c

1a005168 <_printf_common>:
1a005168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00516c:	4691      	mov	r9, r2
1a00516e:	461f      	mov	r7, r3
1a005170:	688a      	ldr	r2, [r1, #8]
1a005172:	690b      	ldr	r3, [r1, #16]
1a005174:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a005178:	4293      	cmp	r3, r2
1a00517a:	bfb8      	it	lt
1a00517c:	4613      	movlt	r3, r2
1a00517e:	f8c9 3000 	str.w	r3, [r9]
1a005182:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a005186:	4606      	mov	r6, r0
1a005188:	460c      	mov	r4, r1
1a00518a:	b112      	cbz	r2, 1a005192 <_printf_common+0x2a>
1a00518c:	3301      	adds	r3, #1
1a00518e:	f8c9 3000 	str.w	r3, [r9]
1a005192:	6823      	ldr	r3, [r4, #0]
1a005194:	0699      	lsls	r1, r3, #26
1a005196:	bf42      	ittt	mi
1a005198:	f8d9 3000 	ldrmi.w	r3, [r9]
1a00519c:	3302      	addmi	r3, #2
1a00519e:	f8c9 3000 	strmi.w	r3, [r9]
1a0051a2:	6825      	ldr	r5, [r4, #0]
1a0051a4:	f015 0506 	ands.w	r5, r5, #6
1a0051a8:	d107      	bne.n	1a0051ba <_printf_common+0x52>
1a0051aa:	f104 0a19 	add.w	sl, r4, #25
1a0051ae:	68e3      	ldr	r3, [r4, #12]
1a0051b0:	f8d9 2000 	ldr.w	r2, [r9]
1a0051b4:	1a9b      	subs	r3, r3, r2
1a0051b6:	42ab      	cmp	r3, r5
1a0051b8:	dc28      	bgt.n	1a00520c <_printf_common+0xa4>
1a0051ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a0051be:	6822      	ldr	r2, [r4, #0]
1a0051c0:	3300      	adds	r3, #0
1a0051c2:	bf18      	it	ne
1a0051c4:	2301      	movne	r3, #1
1a0051c6:	0692      	lsls	r2, r2, #26
1a0051c8:	d42d      	bmi.n	1a005226 <_printf_common+0xbe>
1a0051ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a0051ce:	4639      	mov	r1, r7
1a0051d0:	4630      	mov	r0, r6
1a0051d2:	47c0      	blx	r8
1a0051d4:	3001      	adds	r0, #1
1a0051d6:	d020      	beq.n	1a00521a <_printf_common+0xb2>
1a0051d8:	6823      	ldr	r3, [r4, #0]
1a0051da:	68e5      	ldr	r5, [r4, #12]
1a0051dc:	f8d9 2000 	ldr.w	r2, [r9]
1a0051e0:	f003 0306 	and.w	r3, r3, #6
1a0051e4:	2b04      	cmp	r3, #4
1a0051e6:	bf08      	it	eq
1a0051e8:	1aad      	subeq	r5, r5, r2
1a0051ea:	68a3      	ldr	r3, [r4, #8]
1a0051ec:	6922      	ldr	r2, [r4, #16]
1a0051ee:	bf0c      	ite	eq
1a0051f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a0051f4:	2500      	movne	r5, #0
1a0051f6:	4293      	cmp	r3, r2
1a0051f8:	bfc4      	itt	gt
1a0051fa:	1a9b      	subgt	r3, r3, r2
1a0051fc:	18ed      	addgt	r5, r5, r3
1a0051fe:	f04f 0900 	mov.w	r9, #0
1a005202:	341a      	adds	r4, #26
1a005204:	454d      	cmp	r5, r9
1a005206:	d11a      	bne.n	1a00523e <_printf_common+0xd6>
1a005208:	2000      	movs	r0, #0
1a00520a:	e008      	b.n	1a00521e <_printf_common+0xb6>
1a00520c:	2301      	movs	r3, #1
1a00520e:	4652      	mov	r2, sl
1a005210:	4639      	mov	r1, r7
1a005212:	4630      	mov	r0, r6
1a005214:	47c0      	blx	r8
1a005216:	3001      	adds	r0, #1
1a005218:	d103      	bne.n	1a005222 <_printf_common+0xba>
1a00521a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00521e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a005222:	3501      	adds	r5, #1
1a005224:	e7c3      	b.n	1a0051ae <_printf_common+0x46>
1a005226:	18e1      	adds	r1, r4, r3
1a005228:	1c5a      	adds	r2, r3, #1
1a00522a:	2030      	movs	r0, #48	; 0x30
1a00522c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a005230:	4422      	add	r2, r4
1a005232:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a005236:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a00523a:	3302      	adds	r3, #2
1a00523c:	e7c5      	b.n	1a0051ca <_printf_common+0x62>
1a00523e:	2301      	movs	r3, #1
1a005240:	4622      	mov	r2, r4
1a005242:	4639      	mov	r1, r7
1a005244:	4630      	mov	r0, r6
1a005246:	47c0      	blx	r8
1a005248:	3001      	adds	r0, #1
1a00524a:	d0e6      	beq.n	1a00521a <_printf_common+0xb2>
1a00524c:	f109 0901 	add.w	r9, r9, #1
1a005250:	e7d8      	b.n	1a005204 <_printf_common+0x9c>
1a005252:	Address 0x000000001a005252 is out of bounds.


1a005254 <_printf_i>:
1a005254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a005258:	4606      	mov	r6, r0
1a00525a:	460c      	mov	r4, r1
1a00525c:	f101 0043 	add.w	r0, r1, #67	; 0x43
1a005260:	7e09      	ldrb	r1, [r1, #24]
1a005262:	b085      	sub	sp, #20
1a005264:	296e      	cmp	r1, #110	; 0x6e
1a005266:	4698      	mov	r8, r3
1a005268:	4617      	mov	r7, r2
1a00526a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00526c:	f000 80ba 	beq.w	1a0053e4 <_printf_i+0x190>
1a005270:	d824      	bhi.n	1a0052bc <_printf_i+0x68>
1a005272:	2963      	cmp	r1, #99	; 0x63
1a005274:	d039      	beq.n	1a0052ea <_printf_i+0x96>
1a005276:	d80a      	bhi.n	1a00528e <_printf_i+0x3a>
1a005278:	2900      	cmp	r1, #0
1a00527a:	f000 80c3 	beq.w	1a005404 <_printf_i+0x1b0>
1a00527e:	2958      	cmp	r1, #88	; 0x58
1a005280:	f000 8091 	beq.w	1a0053a6 <_printf_i+0x152>
1a005284:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a005288:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a00528c:	e035      	b.n	1a0052fa <_printf_i+0xa6>
1a00528e:	2964      	cmp	r1, #100	; 0x64
1a005290:	d001      	beq.n	1a005296 <_printf_i+0x42>
1a005292:	2969      	cmp	r1, #105	; 0x69
1a005294:	d1f6      	bne.n	1a005284 <_printf_i+0x30>
1a005296:	6825      	ldr	r5, [r4, #0]
1a005298:	681a      	ldr	r2, [r3, #0]
1a00529a:	f015 0f80 	tst.w	r5, #128	; 0x80
1a00529e:	f102 0104 	add.w	r1, r2, #4
1a0052a2:	d02c      	beq.n	1a0052fe <_printf_i+0xaa>
1a0052a4:	6812      	ldr	r2, [r2, #0]
1a0052a6:	6019      	str	r1, [r3, #0]
1a0052a8:	2a00      	cmp	r2, #0
1a0052aa:	da03      	bge.n	1a0052b4 <_printf_i+0x60>
1a0052ac:	232d      	movs	r3, #45	; 0x2d
1a0052ae:	4252      	negs	r2, r2
1a0052b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a0052b4:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 1a005474 <_printf_i+0x220>
1a0052b8:	230a      	movs	r3, #10
1a0052ba:	e03f      	b.n	1a00533c <_printf_i+0xe8>
1a0052bc:	2973      	cmp	r1, #115	; 0x73
1a0052be:	f000 80a5 	beq.w	1a00540c <_printf_i+0x1b8>
1a0052c2:	d808      	bhi.n	1a0052d6 <_printf_i+0x82>
1a0052c4:	296f      	cmp	r1, #111	; 0x6f
1a0052c6:	d021      	beq.n	1a00530c <_printf_i+0xb8>
1a0052c8:	2970      	cmp	r1, #112	; 0x70
1a0052ca:	d1db      	bne.n	1a005284 <_printf_i+0x30>
1a0052cc:	6822      	ldr	r2, [r4, #0]
1a0052ce:	f042 0220 	orr.w	r2, r2, #32
1a0052d2:	6022      	str	r2, [r4, #0]
1a0052d4:	e003      	b.n	1a0052de <_printf_i+0x8a>
1a0052d6:	2975      	cmp	r1, #117	; 0x75
1a0052d8:	d018      	beq.n	1a00530c <_printf_i+0xb8>
1a0052da:	2978      	cmp	r1, #120	; 0x78
1a0052dc:	d1d2      	bne.n	1a005284 <_printf_i+0x30>
1a0052de:	2278      	movs	r2, #120	; 0x78
1a0052e0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
1a0052e4:	f8df c190 	ldr.w	ip, [pc, #400]	; 1a005478 <_printf_i+0x224>
1a0052e8:	e061      	b.n	1a0053ae <_printf_i+0x15a>
1a0052ea:	681a      	ldr	r2, [r3, #0]
1a0052ec:	1d11      	adds	r1, r2, #4
1a0052ee:	6019      	str	r1, [r3, #0]
1a0052f0:	6813      	ldr	r3, [r2, #0]
1a0052f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a0052f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a0052fa:	2301      	movs	r3, #1
1a0052fc:	e093      	b.n	1a005426 <_printf_i+0x1d2>
1a0052fe:	6812      	ldr	r2, [r2, #0]
1a005300:	6019      	str	r1, [r3, #0]
1a005302:	f015 0f40 	tst.w	r5, #64	; 0x40
1a005306:	bf18      	it	ne
1a005308:	b212      	sxthne	r2, r2
1a00530a:	e7cd      	b.n	1a0052a8 <_printf_i+0x54>
1a00530c:	f8d4 c000 	ldr.w	ip, [r4]
1a005310:	681a      	ldr	r2, [r3, #0]
1a005312:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a005316:	f102 0504 	add.w	r5, r2, #4
1a00531a:	601d      	str	r5, [r3, #0]
1a00531c:	d001      	beq.n	1a005322 <_printf_i+0xce>
1a00531e:	6812      	ldr	r2, [r2, #0]
1a005320:	e003      	b.n	1a00532a <_printf_i+0xd6>
1a005322:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a005326:	d0fa      	beq.n	1a00531e <_printf_i+0xca>
1a005328:	8812      	ldrh	r2, [r2, #0]
1a00532a:	f8df c148 	ldr.w	ip, [pc, #328]	; 1a005474 <_printf_i+0x220>
1a00532e:	296f      	cmp	r1, #111	; 0x6f
1a005330:	bf0c      	ite	eq
1a005332:	2308      	moveq	r3, #8
1a005334:	230a      	movne	r3, #10
1a005336:	2100      	movs	r1, #0
1a005338:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a00533c:	6865      	ldr	r5, [r4, #4]
1a00533e:	60a5      	str	r5, [r4, #8]
1a005340:	2d00      	cmp	r5, #0
1a005342:	bfa2      	ittt	ge
1a005344:	6821      	ldrge	r1, [r4, #0]
1a005346:	f021 0104 	bicge.w	r1, r1, #4
1a00534a:	6021      	strge	r1, [r4, #0]
1a00534c:	b90a      	cbnz	r2, 1a005352 <_printf_i+0xfe>
1a00534e:	2d00      	cmp	r5, #0
1a005350:	d046      	beq.n	1a0053e0 <_printf_i+0x18c>
1a005352:	4605      	mov	r5, r0
1a005354:	fbb2 f1f3 	udiv	r1, r2, r3
1a005358:	fb03 2e11 	mls	lr, r3, r1, r2
1a00535c:	4293      	cmp	r3, r2
1a00535e:	f81c e00e 	ldrb.w	lr, [ip, lr]
1a005362:	f805 ed01 	strb.w	lr, [r5, #-1]!
1a005366:	d939      	bls.n	1a0053dc <_printf_i+0x188>
1a005368:	2b08      	cmp	r3, #8
1a00536a:	d10b      	bne.n	1a005384 <_printf_i+0x130>
1a00536c:	6823      	ldr	r3, [r4, #0]
1a00536e:	07da      	lsls	r2, r3, #31
1a005370:	d508      	bpl.n	1a005384 <_printf_i+0x130>
1a005372:	6923      	ldr	r3, [r4, #16]
1a005374:	6862      	ldr	r2, [r4, #4]
1a005376:	429a      	cmp	r2, r3
1a005378:	bfde      	ittt	le
1a00537a:	2330      	movle	r3, #48	; 0x30
1a00537c:	f805 3c01 	strble.w	r3, [r5, #-1]
1a005380:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a005384:	1b40      	subs	r0, r0, r5
1a005386:	6120      	str	r0, [r4, #16]
1a005388:	f8cd 8000 	str.w	r8, [sp]
1a00538c:	463b      	mov	r3, r7
1a00538e:	aa03      	add	r2, sp, #12
1a005390:	4621      	mov	r1, r4
1a005392:	4630      	mov	r0, r6
1a005394:	f7ff fee8 	bl	1a005168 <_printf_common>
1a005398:	3001      	adds	r0, #1
1a00539a:	d149      	bne.n	1a005430 <_printf_i+0x1dc>
1a00539c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0053a0:	b005      	add	sp, #20
1a0053a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0053a6:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 1a005474 <_printf_i+0x220>
1a0053aa:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a0053ae:	681d      	ldr	r5, [r3, #0]
1a0053b0:	6821      	ldr	r1, [r4, #0]
1a0053b2:	f855 2b04 	ldr.w	r2, [r5], #4
1a0053b6:	601d      	str	r5, [r3, #0]
1a0053b8:	060d      	lsls	r5, r1, #24
1a0053ba:	d50b      	bpl.n	1a0053d4 <_printf_i+0x180>
1a0053bc:	07cd      	lsls	r5, r1, #31
1a0053be:	bf44      	itt	mi
1a0053c0:	f041 0120 	orrmi.w	r1, r1, #32
1a0053c4:	6021      	strmi	r1, [r4, #0]
1a0053c6:	b91a      	cbnz	r2, 1a0053d0 <_printf_i+0x17c>
1a0053c8:	6823      	ldr	r3, [r4, #0]
1a0053ca:	f023 0320 	bic.w	r3, r3, #32
1a0053ce:	6023      	str	r3, [r4, #0]
1a0053d0:	2310      	movs	r3, #16
1a0053d2:	e7b0      	b.n	1a005336 <_printf_i+0xe2>
1a0053d4:	064b      	lsls	r3, r1, #25
1a0053d6:	bf48      	it	mi
1a0053d8:	b292      	uxthmi	r2, r2
1a0053da:	e7ef      	b.n	1a0053bc <_printf_i+0x168>
1a0053dc:	460a      	mov	r2, r1
1a0053de:	e7b9      	b.n	1a005354 <_printf_i+0x100>
1a0053e0:	4605      	mov	r5, r0
1a0053e2:	e7c1      	b.n	1a005368 <_printf_i+0x114>
1a0053e4:	681a      	ldr	r2, [r3, #0]
1a0053e6:	f8d4 c000 	ldr.w	ip, [r4]
1a0053ea:	6961      	ldr	r1, [r4, #20]
1a0053ec:	1d15      	adds	r5, r2, #4
1a0053ee:	601d      	str	r5, [r3, #0]
1a0053f0:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a0053f4:	6813      	ldr	r3, [r2, #0]
1a0053f6:	d001      	beq.n	1a0053fc <_printf_i+0x1a8>
1a0053f8:	6019      	str	r1, [r3, #0]
1a0053fa:	e003      	b.n	1a005404 <_printf_i+0x1b0>
1a0053fc:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a005400:	d0fa      	beq.n	1a0053f8 <_printf_i+0x1a4>
1a005402:	8019      	strh	r1, [r3, #0]
1a005404:	2300      	movs	r3, #0
1a005406:	6123      	str	r3, [r4, #16]
1a005408:	4605      	mov	r5, r0
1a00540a:	e7bd      	b.n	1a005388 <_printf_i+0x134>
1a00540c:	681a      	ldr	r2, [r3, #0]
1a00540e:	1d11      	adds	r1, r2, #4
1a005410:	6019      	str	r1, [r3, #0]
1a005412:	6815      	ldr	r5, [r2, #0]
1a005414:	6862      	ldr	r2, [r4, #4]
1a005416:	2100      	movs	r1, #0
1a005418:	4628      	mov	r0, r5
1a00541a:	f000 f851 	bl	1a0054c0 <memchr>
1a00541e:	b108      	cbz	r0, 1a005424 <_printf_i+0x1d0>
1a005420:	1b40      	subs	r0, r0, r5
1a005422:	6060      	str	r0, [r4, #4]
1a005424:	6863      	ldr	r3, [r4, #4]
1a005426:	6123      	str	r3, [r4, #16]
1a005428:	2300      	movs	r3, #0
1a00542a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a00542e:	e7ab      	b.n	1a005388 <_printf_i+0x134>
1a005430:	6923      	ldr	r3, [r4, #16]
1a005432:	462a      	mov	r2, r5
1a005434:	4639      	mov	r1, r7
1a005436:	4630      	mov	r0, r6
1a005438:	47c0      	blx	r8
1a00543a:	3001      	adds	r0, #1
1a00543c:	d0ae      	beq.n	1a00539c <_printf_i+0x148>
1a00543e:	6823      	ldr	r3, [r4, #0]
1a005440:	079b      	lsls	r3, r3, #30
1a005442:	d413      	bmi.n	1a00546c <_printf_i+0x218>
1a005444:	68e0      	ldr	r0, [r4, #12]
1a005446:	9b03      	ldr	r3, [sp, #12]
1a005448:	4298      	cmp	r0, r3
1a00544a:	bfb8      	it	lt
1a00544c:	4618      	movlt	r0, r3
1a00544e:	e7a7      	b.n	1a0053a0 <_printf_i+0x14c>
1a005450:	2301      	movs	r3, #1
1a005452:	464a      	mov	r2, r9
1a005454:	4639      	mov	r1, r7
1a005456:	4630      	mov	r0, r6
1a005458:	47c0      	blx	r8
1a00545a:	3001      	adds	r0, #1
1a00545c:	d09e      	beq.n	1a00539c <_printf_i+0x148>
1a00545e:	3501      	adds	r5, #1
1a005460:	68e3      	ldr	r3, [r4, #12]
1a005462:	9a03      	ldr	r2, [sp, #12]
1a005464:	1a9b      	subs	r3, r3, r2
1a005466:	42ab      	cmp	r3, r5
1a005468:	dcf2      	bgt.n	1a005450 <_printf_i+0x1fc>
1a00546a:	e7eb      	b.n	1a005444 <_printf_i+0x1f0>
1a00546c:	2500      	movs	r5, #0
1a00546e:	f104 0919 	add.w	r9, r4, #25
1a005472:	e7f5      	b.n	1a005460 <_printf_i+0x20c>
1a005474:	1a006300 	.word	0x1a006300
1a005478:	1a006311 	.word	0x1a006311

1a00547c <siprintf>:
1a00547c:	b40e      	push	{r1, r2, r3}
1a00547e:	b500      	push	{lr}
1a005480:	b09c      	sub	sp, #112	; 0x70
1a005482:	ab1d      	add	r3, sp, #116	; 0x74
1a005484:	9002      	str	r0, [sp, #8]
1a005486:	9006      	str	r0, [sp, #24]
1a005488:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
1a00548c:	4809      	ldr	r0, [pc, #36]	; (1a0054b4 <siprintf+0x38>)
1a00548e:	9107      	str	r1, [sp, #28]
1a005490:	9104      	str	r1, [sp, #16]
1a005492:	4909      	ldr	r1, [pc, #36]	; (1a0054b8 <siprintf+0x3c>)
1a005494:	f853 2b04 	ldr.w	r2, [r3], #4
1a005498:	9105      	str	r1, [sp, #20]
1a00549a:	6800      	ldr	r0, [r0, #0]
1a00549c:	9301      	str	r3, [sp, #4]
1a00549e:	a902      	add	r1, sp, #8
1a0054a0:	f000 f906 	bl	1a0056b0 <_svfiprintf_r>
1a0054a4:	9b02      	ldr	r3, [sp, #8]
1a0054a6:	2200      	movs	r2, #0
1a0054a8:	701a      	strb	r2, [r3, #0]
1a0054aa:	b01c      	add	sp, #112	; 0x70
1a0054ac:	f85d eb04 	ldr.w	lr, [sp], #4
1a0054b0:	b003      	add	sp, #12
1a0054b2:	4770      	bx	lr
1a0054b4:	10000058 	.word	0x10000058
1a0054b8:	ffff0208 	.word	0xffff0208
1a0054bc:	ffffffff 	.word	0xffffffff

1a0054c0 <memchr>:
1a0054c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a0054c4:	2a10      	cmp	r2, #16
1a0054c6:	db2b      	blt.n	1a005520 <memchr+0x60>
1a0054c8:	f010 0f07 	tst.w	r0, #7
1a0054cc:	d008      	beq.n	1a0054e0 <memchr+0x20>
1a0054ce:	f810 3b01 	ldrb.w	r3, [r0], #1
1a0054d2:	3a01      	subs	r2, #1
1a0054d4:	428b      	cmp	r3, r1
1a0054d6:	d02d      	beq.n	1a005534 <memchr+0x74>
1a0054d8:	f010 0f07 	tst.w	r0, #7
1a0054dc:	b342      	cbz	r2, 1a005530 <memchr+0x70>
1a0054de:	d1f6      	bne.n	1a0054ce <memchr+0xe>
1a0054e0:	b4f0      	push	{r4, r5, r6, r7}
1a0054e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a0054e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a0054ea:	f022 0407 	bic.w	r4, r2, #7
1a0054ee:	f07f 0700 	mvns.w	r7, #0
1a0054f2:	2300      	movs	r3, #0
1a0054f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a0054f8:	3c08      	subs	r4, #8
1a0054fa:	ea85 0501 	eor.w	r5, r5, r1
1a0054fe:	ea86 0601 	eor.w	r6, r6, r1
1a005502:	fa85 f547 	uadd8	r5, r5, r7
1a005506:	faa3 f587 	sel	r5, r3, r7
1a00550a:	fa86 f647 	uadd8	r6, r6, r7
1a00550e:	faa5 f687 	sel	r6, r5, r7
1a005512:	b98e      	cbnz	r6, 1a005538 <memchr+0x78>
1a005514:	d1ee      	bne.n	1a0054f4 <memchr+0x34>
1a005516:	bcf0      	pop	{r4, r5, r6, r7}
1a005518:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a00551c:	f002 0207 	and.w	r2, r2, #7
1a005520:	b132      	cbz	r2, 1a005530 <memchr+0x70>
1a005522:	f810 3b01 	ldrb.w	r3, [r0], #1
1a005526:	3a01      	subs	r2, #1
1a005528:	ea83 0301 	eor.w	r3, r3, r1
1a00552c:	b113      	cbz	r3, 1a005534 <memchr+0x74>
1a00552e:	d1f8      	bne.n	1a005522 <memchr+0x62>
1a005530:	2000      	movs	r0, #0
1a005532:	4770      	bx	lr
1a005534:	3801      	subs	r0, #1
1a005536:	4770      	bx	lr
1a005538:	2d00      	cmp	r5, #0
1a00553a:	bf06      	itte	eq
1a00553c:	4635      	moveq	r5, r6
1a00553e:	3803      	subeq	r0, #3
1a005540:	3807      	subne	r0, #7
1a005542:	f015 0f01 	tst.w	r5, #1
1a005546:	d107      	bne.n	1a005558 <memchr+0x98>
1a005548:	3001      	adds	r0, #1
1a00554a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a00554e:	bf02      	ittt	eq
1a005550:	3001      	addeq	r0, #1
1a005552:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a005556:	3001      	addeq	r0, #1
1a005558:	bcf0      	pop	{r4, r5, r6, r7}
1a00555a:	3801      	subs	r0, #1
1a00555c:	4770      	bx	lr
1a00555e:	bf00      	nop

1a005560 <memmove>:
1a005560:	4288      	cmp	r0, r1
1a005562:	b510      	push	{r4, lr}
1a005564:	eb01 0302 	add.w	r3, r1, r2
1a005568:	d902      	bls.n	1a005570 <memmove+0x10>
1a00556a:	4283      	cmp	r3, r0
1a00556c:	461c      	mov	r4, r3
1a00556e:	d807      	bhi.n	1a005580 <memmove+0x20>
1a005570:	1e42      	subs	r2, r0, #1
1a005572:	4299      	cmp	r1, r3
1a005574:	d008      	beq.n	1a005588 <memmove+0x28>
1a005576:	f811 4b01 	ldrb.w	r4, [r1], #1
1a00557a:	f802 4f01 	strb.w	r4, [r2, #1]!
1a00557e:	e7f8      	b.n	1a005572 <memmove+0x12>
1a005580:	1883      	adds	r3, r0, r2
1a005582:	1a9a      	subs	r2, r3, r2
1a005584:	429a      	cmp	r2, r3
1a005586:	d100      	bne.n	1a00558a <memmove+0x2a>
1a005588:	bd10      	pop	{r4, pc}
1a00558a:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
1a00558e:	f803 1d01 	strb.w	r1, [r3, #-1]!
1a005592:	e7f7      	b.n	1a005584 <memmove+0x24>

1a005594 <__malloc_lock>:
1a005594:	4801      	ldr	r0, [pc, #4]	; (1a00559c <__malloc_lock+0x8>)
1a005596:	f7ff bd27 	b.w	1a004fe8 <__retarget_lock_acquire_recursive>
1a00559a:	bf00      	nop
1a00559c:	100012a8 	.word	0x100012a8

1a0055a0 <__malloc_unlock>:
1a0055a0:	4801      	ldr	r0, [pc, #4]	; (1a0055a8 <__malloc_unlock+0x8>)
1a0055a2:	f7ff bd22 	b.w	1a004fea <__retarget_lock_release_recursive>
1a0055a6:	bf00      	nop
1a0055a8:	100012a8 	.word	0x100012a8

1a0055ac <_realloc_r>:
1a0055ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0055ae:	4607      	mov	r7, r0
1a0055b0:	4614      	mov	r4, r2
1a0055b2:	460e      	mov	r6, r1
1a0055b4:	b921      	cbnz	r1, 1a0055c0 <_realloc_r+0x14>
1a0055b6:	4611      	mov	r1, r2
1a0055b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a0055bc:	f7ff bd7a 	b.w	1a0050b4 <_malloc_r>
1a0055c0:	b922      	cbnz	r2, 1a0055cc <_realloc_r+0x20>
1a0055c2:	f7ff fd29 	bl	1a005018 <_free_r>
1a0055c6:	4625      	mov	r5, r4
1a0055c8:	4628      	mov	r0, r5
1a0055ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0055cc:	f000 f968 	bl	1a0058a0 <_malloc_usable_size_r>
1a0055d0:	42a0      	cmp	r0, r4
1a0055d2:	d20f      	bcs.n	1a0055f4 <_realloc_r+0x48>
1a0055d4:	4621      	mov	r1, r4
1a0055d6:	4638      	mov	r0, r7
1a0055d8:	f7ff fd6c 	bl	1a0050b4 <_malloc_r>
1a0055dc:	4605      	mov	r5, r0
1a0055de:	2800      	cmp	r0, #0
1a0055e0:	d0f2      	beq.n	1a0055c8 <_realloc_r+0x1c>
1a0055e2:	4631      	mov	r1, r6
1a0055e4:	4622      	mov	r2, r4
1a0055e6:	f7ff fd01 	bl	1a004fec <memcpy>
1a0055ea:	4631      	mov	r1, r6
1a0055ec:	4638      	mov	r0, r7
1a0055ee:	f7ff fd13 	bl	1a005018 <_free_r>
1a0055f2:	e7e9      	b.n	1a0055c8 <_realloc_r+0x1c>
1a0055f4:	4635      	mov	r5, r6
1a0055f6:	e7e7      	b.n	1a0055c8 <_realloc_r+0x1c>

1a0055f8 <__ssputs_r>:
1a0055f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0055fc:	688e      	ldr	r6, [r1, #8]
1a0055fe:	429e      	cmp	r6, r3
1a005600:	4682      	mov	sl, r0
1a005602:	460c      	mov	r4, r1
1a005604:	4691      	mov	r9, r2
1a005606:	4698      	mov	r8, r3
1a005608:	d838      	bhi.n	1a00567c <__ssputs_r+0x84>
1a00560a:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
1a00560e:	f41c 6f90 	tst.w	ip, #1152	; 0x480
1a005612:	d031      	beq.n	1a005678 <__ssputs_r+0x80>
1a005614:	6962      	ldr	r2, [r4, #20]
1a005616:	6825      	ldr	r5, [r4, #0]
1a005618:	6909      	ldr	r1, [r1, #16]
1a00561a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a00561e:	1a6f      	subs	r7, r5, r1
1a005620:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
1a005624:	3301      	adds	r3, #1
1a005626:	1055      	asrs	r5, r2, #1
1a005628:	443b      	add	r3, r7
1a00562a:	429d      	cmp	r5, r3
1a00562c:	bf38      	it	cc
1a00562e:	461d      	movcc	r5, r3
1a005630:	f41c 6f80 	tst.w	ip, #1024	; 0x400
1a005634:	d030      	beq.n	1a005698 <__ssputs_r+0xa0>
1a005636:	4629      	mov	r1, r5
1a005638:	f7ff fd3c 	bl	1a0050b4 <_malloc_r>
1a00563c:	4606      	mov	r6, r0
1a00563e:	b950      	cbnz	r0, 1a005656 <__ssputs_r+0x5e>
1a005640:	230c      	movs	r3, #12
1a005642:	f8ca 3000 	str.w	r3, [sl]
1a005646:	89a3      	ldrh	r3, [r4, #12]
1a005648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00564c:	81a3      	strh	r3, [r4, #12]
1a00564e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a005656:	463a      	mov	r2, r7
1a005658:	6921      	ldr	r1, [r4, #16]
1a00565a:	f7ff fcc7 	bl	1a004fec <memcpy>
1a00565e:	89a3      	ldrh	r3, [r4, #12]
1a005660:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
1a005664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a005668:	81a3      	strh	r3, [r4, #12]
1a00566a:	6126      	str	r6, [r4, #16]
1a00566c:	6165      	str	r5, [r4, #20]
1a00566e:	443e      	add	r6, r7
1a005670:	1bed      	subs	r5, r5, r7
1a005672:	6026      	str	r6, [r4, #0]
1a005674:	60a5      	str	r5, [r4, #8]
1a005676:	4646      	mov	r6, r8
1a005678:	4546      	cmp	r6, r8
1a00567a:	d900      	bls.n	1a00567e <__ssputs_r+0x86>
1a00567c:	4646      	mov	r6, r8
1a00567e:	4632      	mov	r2, r6
1a005680:	4649      	mov	r1, r9
1a005682:	6820      	ldr	r0, [r4, #0]
1a005684:	f7ff ff6c 	bl	1a005560 <memmove>
1a005688:	68a3      	ldr	r3, [r4, #8]
1a00568a:	1b9b      	subs	r3, r3, r6
1a00568c:	60a3      	str	r3, [r4, #8]
1a00568e:	6823      	ldr	r3, [r4, #0]
1a005690:	441e      	add	r6, r3
1a005692:	6026      	str	r6, [r4, #0]
1a005694:	2000      	movs	r0, #0
1a005696:	e7dc      	b.n	1a005652 <__ssputs_r+0x5a>
1a005698:	462a      	mov	r2, r5
1a00569a:	f7ff ff87 	bl	1a0055ac <_realloc_r>
1a00569e:	4606      	mov	r6, r0
1a0056a0:	2800      	cmp	r0, #0
1a0056a2:	d1e2      	bne.n	1a00566a <__ssputs_r+0x72>
1a0056a4:	6921      	ldr	r1, [r4, #16]
1a0056a6:	4650      	mov	r0, sl
1a0056a8:	f7ff fcb6 	bl	1a005018 <_free_r>
1a0056ac:	e7c8      	b.n	1a005640 <__ssputs_r+0x48>
1a0056ae:	Address 0x000000001a0056ae is out of bounds.


1a0056b0 <_svfiprintf_r>:
1a0056b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0056b4:	461e      	mov	r6, r3
1a0056b6:	898b      	ldrh	r3, [r1, #12]
1a0056b8:	061b      	lsls	r3, r3, #24
1a0056ba:	b09d      	sub	sp, #116	; 0x74
1a0056bc:	4607      	mov	r7, r0
1a0056be:	460d      	mov	r5, r1
1a0056c0:	4614      	mov	r4, r2
1a0056c2:	d50e      	bpl.n	1a0056e2 <_svfiprintf_r+0x32>
1a0056c4:	690b      	ldr	r3, [r1, #16]
1a0056c6:	b963      	cbnz	r3, 1a0056e2 <_svfiprintf_r+0x32>
1a0056c8:	2140      	movs	r1, #64	; 0x40
1a0056ca:	f7ff fcf3 	bl	1a0050b4 <_malloc_r>
1a0056ce:	6028      	str	r0, [r5, #0]
1a0056d0:	6128      	str	r0, [r5, #16]
1a0056d2:	b920      	cbnz	r0, 1a0056de <_svfiprintf_r+0x2e>
1a0056d4:	230c      	movs	r3, #12
1a0056d6:	603b      	str	r3, [r7, #0]
1a0056d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0056dc:	e0c9      	b.n	1a005872 <_svfiprintf_r+0x1c2>
1a0056de:	2340      	movs	r3, #64	; 0x40
1a0056e0:	616b      	str	r3, [r5, #20]
1a0056e2:	2300      	movs	r3, #0
1a0056e4:	9309      	str	r3, [sp, #36]	; 0x24
1a0056e6:	2320      	movs	r3, #32
1a0056e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a0056ec:	f8df 919c 	ldr.w	r9, [pc, #412]	; 1a00588c <_svfiprintf_r+0x1dc>
1a0056f0:	9603      	str	r6, [sp, #12]
1a0056f2:	2330      	movs	r3, #48	; 0x30
1a0056f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a0056f8:	f04f 0a01 	mov.w	sl, #1
1a0056fc:	4623      	mov	r3, r4
1a0056fe:	461e      	mov	r6, r3
1a005700:	f813 2b01 	ldrb.w	r2, [r3], #1
1a005704:	b10a      	cbz	r2, 1a00570a <_svfiprintf_r+0x5a>
1a005706:	2a25      	cmp	r2, #37	; 0x25
1a005708:	d1f9      	bne.n	1a0056fe <_svfiprintf_r+0x4e>
1a00570a:	ebb6 0b04 	subs.w	fp, r6, r4
1a00570e:	d00b      	beq.n	1a005728 <_svfiprintf_r+0x78>
1a005710:	465b      	mov	r3, fp
1a005712:	4622      	mov	r2, r4
1a005714:	4629      	mov	r1, r5
1a005716:	4638      	mov	r0, r7
1a005718:	f7ff ff6e 	bl	1a0055f8 <__ssputs_r>
1a00571c:	3001      	adds	r0, #1
1a00571e:	f000 80a3 	beq.w	1a005868 <_svfiprintf_r+0x1b8>
1a005722:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005724:	445b      	add	r3, fp
1a005726:	9309      	str	r3, [sp, #36]	; 0x24
1a005728:	7833      	ldrb	r3, [r6, #0]
1a00572a:	2b00      	cmp	r3, #0
1a00572c:	f000 809c 	beq.w	1a005868 <_svfiprintf_r+0x1b8>
1a005730:	2300      	movs	r3, #0
1a005732:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a005736:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a00573a:	3601      	adds	r6, #1
1a00573c:	9304      	str	r3, [sp, #16]
1a00573e:	9307      	str	r3, [sp, #28]
1a005740:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a005744:	931a      	str	r3, [sp, #104]	; 0x68
1a005746:	4634      	mov	r4, r6
1a005748:	2205      	movs	r2, #5
1a00574a:	f814 1b01 	ldrb.w	r1, [r4], #1
1a00574e:	484f      	ldr	r0, [pc, #316]	; (1a00588c <_svfiprintf_r+0x1dc>)
1a005750:	f7ff feb6 	bl	1a0054c0 <memchr>
1a005754:	9b04      	ldr	r3, [sp, #16]
1a005756:	b9c0      	cbnz	r0, 1a00578a <_svfiprintf_r+0xda>
1a005758:	06d9      	lsls	r1, r3, #27
1a00575a:	bf44      	itt	mi
1a00575c:	2220      	movmi	r2, #32
1a00575e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a005762:	071a      	lsls	r2, r3, #28
1a005764:	bf44      	itt	mi
1a005766:	222b      	movmi	r2, #43	; 0x2b
1a005768:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a00576c:	7832      	ldrb	r2, [r6, #0]
1a00576e:	2a2a      	cmp	r2, #42	; 0x2a
1a005770:	d013      	beq.n	1a00579a <_svfiprintf_r+0xea>
1a005772:	9a07      	ldr	r2, [sp, #28]
1a005774:	4634      	mov	r4, r6
1a005776:	2000      	movs	r0, #0
1a005778:	260a      	movs	r6, #10
1a00577a:	4621      	mov	r1, r4
1a00577c:	f811 3b01 	ldrb.w	r3, [r1], #1
1a005780:	3b30      	subs	r3, #48	; 0x30
1a005782:	2b09      	cmp	r3, #9
1a005784:	d94b      	bls.n	1a00581e <_svfiprintf_r+0x16e>
1a005786:	b970      	cbnz	r0, 1a0057a6 <_svfiprintf_r+0xf6>
1a005788:	e014      	b.n	1a0057b4 <_svfiprintf_r+0x104>
1a00578a:	eba0 0009 	sub.w	r0, r0, r9
1a00578e:	fa0a f000 	lsl.w	r0, sl, r0
1a005792:	4318      	orrs	r0, r3
1a005794:	9004      	str	r0, [sp, #16]
1a005796:	4626      	mov	r6, r4
1a005798:	e7d5      	b.n	1a005746 <_svfiprintf_r+0x96>
1a00579a:	9a03      	ldr	r2, [sp, #12]
1a00579c:	1d11      	adds	r1, r2, #4
1a00579e:	6812      	ldr	r2, [r2, #0]
1a0057a0:	9103      	str	r1, [sp, #12]
1a0057a2:	2a00      	cmp	r2, #0
1a0057a4:	db01      	blt.n	1a0057aa <_svfiprintf_r+0xfa>
1a0057a6:	9207      	str	r2, [sp, #28]
1a0057a8:	e004      	b.n	1a0057b4 <_svfiprintf_r+0x104>
1a0057aa:	4252      	negs	r2, r2
1a0057ac:	f043 0302 	orr.w	r3, r3, #2
1a0057b0:	9207      	str	r2, [sp, #28]
1a0057b2:	9304      	str	r3, [sp, #16]
1a0057b4:	7823      	ldrb	r3, [r4, #0]
1a0057b6:	2b2e      	cmp	r3, #46	; 0x2e
1a0057b8:	d10c      	bne.n	1a0057d4 <_svfiprintf_r+0x124>
1a0057ba:	7863      	ldrb	r3, [r4, #1]
1a0057bc:	2b2a      	cmp	r3, #42	; 0x2a
1a0057be:	d133      	bne.n	1a005828 <_svfiprintf_r+0x178>
1a0057c0:	9b03      	ldr	r3, [sp, #12]
1a0057c2:	1d1a      	adds	r2, r3, #4
1a0057c4:	681b      	ldr	r3, [r3, #0]
1a0057c6:	9203      	str	r2, [sp, #12]
1a0057c8:	2b00      	cmp	r3, #0
1a0057ca:	bfb8      	it	lt
1a0057cc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a0057d0:	3402      	adds	r4, #2
1a0057d2:	9305      	str	r3, [sp, #20]
1a0057d4:	4e2e      	ldr	r6, [pc, #184]	; (1a005890 <_svfiprintf_r+0x1e0>)
1a0057d6:	7821      	ldrb	r1, [r4, #0]
1a0057d8:	2203      	movs	r2, #3
1a0057da:	4630      	mov	r0, r6
1a0057dc:	f7ff fe70 	bl	1a0054c0 <memchr>
1a0057e0:	b138      	cbz	r0, 1a0057f2 <_svfiprintf_r+0x142>
1a0057e2:	2340      	movs	r3, #64	; 0x40
1a0057e4:	1b80      	subs	r0, r0, r6
1a0057e6:	fa03 f000 	lsl.w	r0, r3, r0
1a0057ea:	9b04      	ldr	r3, [sp, #16]
1a0057ec:	4303      	orrs	r3, r0
1a0057ee:	3401      	adds	r4, #1
1a0057f0:	9304      	str	r3, [sp, #16]
1a0057f2:	f814 1b01 	ldrb.w	r1, [r4], #1
1a0057f6:	4827      	ldr	r0, [pc, #156]	; (1a005894 <_svfiprintf_r+0x1e4>)
1a0057f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a0057fc:	2206      	movs	r2, #6
1a0057fe:	f7ff fe5f 	bl	1a0054c0 <memchr>
1a005802:	2800      	cmp	r0, #0
1a005804:	d038      	beq.n	1a005878 <_svfiprintf_r+0x1c8>
1a005806:	4b24      	ldr	r3, [pc, #144]	; (1a005898 <_svfiprintf_r+0x1e8>)
1a005808:	bb13      	cbnz	r3, 1a005850 <_svfiprintf_r+0x1a0>
1a00580a:	9b03      	ldr	r3, [sp, #12]
1a00580c:	3307      	adds	r3, #7
1a00580e:	f023 0307 	bic.w	r3, r3, #7
1a005812:	3308      	adds	r3, #8
1a005814:	9303      	str	r3, [sp, #12]
1a005816:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005818:	4443      	add	r3, r8
1a00581a:	9309      	str	r3, [sp, #36]	; 0x24
1a00581c:	e76e      	b.n	1a0056fc <_svfiprintf_r+0x4c>
1a00581e:	fb06 3202 	mla	r2, r6, r2, r3
1a005822:	2001      	movs	r0, #1
1a005824:	460c      	mov	r4, r1
1a005826:	e7a8      	b.n	1a00577a <_svfiprintf_r+0xca>
1a005828:	2300      	movs	r3, #0
1a00582a:	3401      	adds	r4, #1
1a00582c:	9305      	str	r3, [sp, #20]
1a00582e:	4619      	mov	r1, r3
1a005830:	260a      	movs	r6, #10
1a005832:	4620      	mov	r0, r4
1a005834:	f810 2b01 	ldrb.w	r2, [r0], #1
1a005838:	3a30      	subs	r2, #48	; 0x30
1a00583a:	2a09      	cmp	r2, #9
1a00583c:	d903      	bls.n	1a005846 <_svfiprintf_r+0x196>
1a00583e:	2b00      	cmp	r3, #0
1a005840:	d0c8      	beq.n	1a0057d4 <_svfiprintf_r+0x124>
1a005842:	9105      	str	r1, [sp, #20]
1a005844:	e7c6      	b.n	1a0057d4 <_svfiprintf_r+0x124>
1a005846:	fb06 2101 	mla	r1, r6, r1, r2
1a00584a:	2301      	movs	r3, #1
1a00584c:	4604      	mov	r4, r0
1a00584e:	e7f0      	b.n	1a005832 <_svfiprintf_r+0x182>
1a005850:	ab03      	add	r3, sp, #12
1a005852:	9300      	str	r3, [sp, #0]
1a005854:	462a      	mov	r2, r5
1a005856:	4b11      	ldr	r3, [pc, #68]	; (1a00589c <_svfiprintf_r+0x1ec>)
1a005858:	a904      	add	r1, sp, #16
1a00585a:	4638      	mov	r0, r7
1a00585c:	f3af 8000 	nop.w
1a005860:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a005864:	4680      	mov	r8, r0
1a005866:	d1d6      	bne.n	1a005816 <_svfiprintf_r+0x166>
1a005868:	89ab      	ldrh	r3, [r5, #12]
1a00586a:	065b      	lsls	r3, r3, #25
1a00586c:	f53f af34 	bmi.w	1a0056d8 <_svfiprintf_r+0x28>
1a005870:	9809      	ldr	r0, [sp, #36]	; 0x24
1a005872:	b01d      	add	sp, #116	; 0x74
1a005874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005878:	ab03      	add	r3, sp, #12
1a00587a:	9300      	str	r3, [sp, #0]
1a00587c:	462a      	mov	r2, r5
1a00587e:	4b07      	ldr	r3, [pc, #28]	; (1a00589c <_svfiprintf_r+0x1ec>)
1a005880:	a904      	add	r1, sp, #16
1a005882:	4638      	mov	r0, r7
1a005884:	f7ff fce6 	bl	1a005254 <_printf_i>
1a005888:	e7ea      	b.n	1a005860 <_svfiprintf_r+0x1b0>
1a00588a:	bf00      	nop
1a00588c:	1a006322 	.word	0x1a006322
1a005890:	1a006328 	.word	0x1a006328
1a005894:	1a00632c 	.word	0x1a00632c
1a005898:	00000000 	.word	0x00000000
1a00589c:	1a0055f9 	.word	0x1a0055f9

1a0058a0 <_malloc_usable_size_r>:
1a0058a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a0058a4:	1f18      	subs	r0, r3, #4
1a0058a6:	2b00      	cmp	r3, #0
1a0058a8:	bfbc      	itt	lt
1a0058aa:	580b      	ldrlt	r3, [r1, r0]
1a0058ac:	18c0      	addlt	r0, r0, r3
1a0058ae:	4770      	bx	lr
1a0058b0:	3a434453 	.word	0x3a434453
1a0058b4:	5049422f 	.word	0x5049422f
1a0058b8:	52414c4f 	.word	0x52414c4f
1a0058bc:	32302520 	.word	0x32302520
1a0058c0:	30255f64 	.word	0x30255f64
1a0058c4:	255f6432 	.word	0x255f6432
1a0058c8:	20643430 	.word	0x20643430
1a0058cc:	64323025 	.word	0x64323025
1a0058d0:	3230252d 	.word	0x3230252d
1a0058d4:	30252d64 	.word	0x30252d64
1a0058d8:	632e6432 	.word	0x632e6432
1a0058dc:	00007673 	.word	0x00007673
1a0058e0:	3a434453 	.word	0x3a434453
1a0058e4:	5445542f 	.word	0x5445542f
1a0058e8:	4f504152 	.word	0x4f504152
1a0058ec:	2052414c 	.word	0x2052414c
1a0058f0:	64323025 	.word	0x64323025
1a0058f4:	3230255f 	.word	0x3230255f
1a0058f8:	30255f64 	.word	0x30255f64
1a0058fc:	25206434 	.word	0x25206434
1a005900:	2d643230 	.word	0x2d643230
1a005904:	64323025 	.word	0x64323025
1a005908:	3230252d 	.word	0x3230252d
1a00590c:	73632e64 	.word	0x73632e64
1a005910:	00000076 	.word	0x00000076
1a005914:	3a434453 	.word	0x3a434453
1a005918:	00000000 	.word	0x00000000
1a00591c:	63657266 	.word	0x63657266
1a005920:	636e6575 	.word	0x636e6575
1a005924:	6d2c6169 	.word	0x6d2c6169
1a005928:	6c75646f 	.word	0x6c75646f
1a00592c:	662c5a6f 	.word	0x662c5a6f
1a005930:	5a657361 	.word	0x5a657361
1a005934:	6c61762c 	.word	0x6c61762c
1a005938:	6165725f 	.word	0x6165725f
1a00593c:	61762c6c 	.word	0x61762c6c
1a005940:	6d695f6c 	.word	0x6d695f6c
1a005944:	000a0d67 	.word	0x000a0d67
1a005948:	64343025 	.word	0x64343025
1a00594c:	3430252c 	.word	0x3430252c
1a005950:	30252c64 	.word	0x30252c64
1a005954:	252c6434 	.word	0x252c6434
1a005958:	2c643430 	.word	0x2c643430
1a00595c:	64343025 	.word	0x64343025
1a005960:	ff000a0d 	.word	0xff000a0d

1a005964 <ExCvt>:
1a005964:	41455543 43414141 49454545 41414949     CUEAAAACEEEIIIAA
1a005974:	4f929245 55554f4f 4f554f59 9f9e4f9c     E..OOOUUYOUO.O..
1a005984:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
1a005994:	b3b2b1b0 414141b4 bbbab9b8 bfbebdbc     .....AAA........
1a0059a4:	c3c2c1c0 4141c5c4 cbcac9c8 cfcecdcc     ......AA........
1a0059b4:	4545d1d1 49494945 dbdad949 df49dddc     ..EEEIIII.....I.
1a0059c4:	4f4fe14f e8e64f4f 555555e8 efee5959     O.OOOO...UUUYY..
1a0059d4:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

1a0059e4 <LfnOfs>:
1a0059e4:	07050301 12100e09 1c181614 ffffff1e     ................

1a0059f4 <VolumeStr>:
1a0059f4:	1a005a28 1a005a2c 459076eb 54414658     (Z..,Z...v.EXFAT
1a005a04:	00202020 00544146 33544146 ffff0032        .FAT.FAT32...
1a005a14:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
1a005a24:	ff005d5b 00434453 00425355              []..SDC.USB.

1a005a30 <cvt1.5576>:
1a005a30:	031a0061 031700e0 030700f8 000100ff     a...............
1a005a40:	01000178 01320130 01390106 014a0110     x...0.2...9...J.
1a005a50:	0179012e 01800106 0243004d 01820181     ..y.....M.C.....
1a005a60:	01840182 01860184 01870187 018a0189     ................
1a005a70:	018b018b 018e018d 0190018f 01910191     ................
1a005a80:	01940193 019601f6 01980197 023d0198     ..............=.
1a005a90:	019c019b 0220019d 01a0019f 01a201a0     ...... .........
1a005aa0:	01a401a2 01a601a4 01a701a7 01aa01a9     ................
1a005ab0:	01ac01ab 01ae01ac 01af01af 01b201b1     ................
1a005ac0:	01b301b3 01b501b5 01b801b7 01ba01b8     ................
1a005ad0:	01bc01bb 01be01bc 01c001f7 01c201c1     ................
1a005ae0:	01c401c3 01c401c5 01c801c7 01ca01c7     ................
1a005af0:	01ca01cb 011001cd 000101dd 01de018e     ................
1a005b00:	01f30112 01f10003 01f401f4 012801f8     ..............(.
1a005b10:	01120222 0009023a 023b2c65 023d023b     "...:...e,;.;.=.
1a005b20:	023f2c66 02410240 02460241 0253010a     f,?.@.A.A.F...S.
1a005b30:	01810040 02550186 018a0189 018f0258     @.....U.....X...
1a005b40:	0190025a 025d025c 025f025e 02610193     Z...\.].^._...a.
1a005b50:	01940262 02650264 02670266 01960197     b...d.e.f.g.....
1a005b60:	2c62026a 026d026c 019c026e 02710270     j.b,l.m.n...p.q.
1a005b70:	0273019d 019f0274 02770276 02790278     ..s.t...v.w.x.y.
1a005b80:	027b027a 2c64027c 027f027e 028101a6     z.{.|.d,~.......
1a005b90:	01a90282 02850284 02870286 024401ae     ..............D.
1a005ba0:	01b201b1 028d0245 028f028e 02910290     ....E...........
1a005bb0:	037b01b7 03fd0003 03ff03fe 000403ac     ..{.............
1a005bc0:	03880386 038a0389 031103b1 000203c2     ................
1a005bd0:	03a303a3 030803c4 000303cc 038e038c     ................
1a005be0:	03d8038f 03f20118 03f9000a 03f403f3     ................
1a005bf0:	03f603f5 03f703f7 03fa03f9 043003fa     ..............0.
1a005c00:	04500320 04600710 048a0122 04c10136      .P...`."...6...
1a005c10:	04cf010e 04c00001 014404d0 04260561     ..........D.a.&.
1a005c20:	ffff0000                                ....

1a005c24 <cvt2.5577>:
1a005c24:	00011d7d 1e002c63 1ea00196 1f00015a     }...c,......Z...
1a005c34:	1f100608 1f200606 1f300608 1f400608     ...... ...0...@.
1a005c44:	1f510606 1f590007 1f5b1f52 1f5d1f54     ..Q...Y.R.[.T.].
1a005c54:	1f5f1f56 06081f60 000e1f70 1fbb1fba     V._.`...p.......
1a005c64:	1fc91fc8 1fcb1fca 1fdb1fda 1ff91ff8     ................
1a005c74:	1feb1fea 1ffb1ffa 06081f80 06081f90     ................
1a005c84:	06081fa0 00041fb0 1fb91fb8 1fbc1fb2     ................
1a005c94:	00011fcc 1fd01fc3 1fe00602 1fe50602     ................
1a005ca4:	1fec0001 00011ff3 214e1ffc 21320001     ..........N!..2!
1a005cb4:	02102170 00012184 24d02183 2c30051a     p!...!...!.$..0,
1a005cc4:	2c60042f 2c670102 2c750106 2c800102     /.`,..g,..u,...,
1a005cd4:	2d000164 ff410826 0000031a              d..-&.A.....

1a005ce0 <uc850>:
1a005ce0:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
1a005cf0:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
1a005d00:	00e600c9 00f400c6 00f200f6 00f900fb     ................
1a005d10:	00d600ff 00f800dc 00d800a3 019200d7     ................
1a005d20:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
1a005d30:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
1a005d40:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
1a005d50:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
1a005d60:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
1a005d70:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
1a005d80:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
1a005d90:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
1a005da0:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
1a005db0:	00da00de 00d900db 00dd00fd 00b400af     ................
1a005dc0:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
1a005dd0:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..
1a005de0:	44535346 5b203a43 74696e49 6f4e205d     FSSDC: [Init] No
1a005df0:	72616320 6e692064 636f7320 2e74656b      card in socket.
1a005e00:	00000a0d 44535346 5b203a43 74696e49     ....FSSDC: [Init
1a005e10:	6e49205d 61697469 617a696c 6e6f6974     ] Initialization
1a005e20:	67656220 2e736e69 00000a0d 44535346      begins.....FSSD
1a005e30:	5b203a43 74696e49 654e205d 61632077     C: [Init] New ca
1a005e40:	73206472 75746174 4e203a73 76697461     rd status: Nativ
1a005e50:	6f4d2065 0d2e6564 0000000a 44535346     e Mode......FSSD
1a005e60:	5b203a43 74696e49 654e205d 61632077     C: [Init] New ca
1a005e70:	73206472 75746174 49203a73 6974696e     rd status: Initi
1a005e80:	7a696c61 2e676e69 00000a0d 44535346     alizing.....FSSD
1a005e90:	5b203a43 74696e49 654e205d 61632077     C: [Init] New ca
1a005ea0:	73206472 75746174 52203a73 79646165     rd status: Ready
1a005eb0:	61462820 43207473 6b636f6c 0a0d2e29      (Fast Clock)...
1a005ec0:	00000000 44535346 5b203a43 74696e49     ....FSSDC: [Init
1a005ed0:	654e205d 61632077 73206472 75746174     ] New card statu
1a005ee0:	45203a73 726f7272 6f4e2820 6e492074     s: Error (Not In
1a005ef0:	61697469 657a696c 0d2e2964 ffff000a     itialized)......
1a005f00:	44535346 5b203a43 74434f49 43205d6c     FSSDC: [IOCtl] C
1a005f10:	20647261 20746f6e 74696e69 696c6169     ard not initiali
1a005f20:	2e64657a 00000a0d 44535346 5b203a43     zed.....FSSDC: [
1a005f30:	74434f49 52205d6c 72757465 676e696e     IOCtl] Returning
1a005f40:	72724520 0d2e726f ffff000a 44535346      Error......FSSD
1a005f50:	5b203a43 64616552 6143205d 6e206472     C: [Read] Card n
1a005f60:	6920746f 6974696e 7a696c61 0d2e6465     ot initialized..
1a005f70:	ffff000a 44535346 5b203a43 74697257     ....FSSDC: [Writ
1a005f80:	43205d65 20647261 20746f6e 74696e69     e] Card not init
1a005f90:	696c6169 2e64657a 00000a0d 44535346     ialized.....FSSD
1a005fa0:	5b203a43 74697257 43205d65 20647261     C: [Write] Card 
1a005fb0:	77207369 65746972 6f727020 74636574     is write protect
1a005fc0:	0d2e6465 ffff000a 44535346 5b203a43     ed......FSSDC: [
1a005fd0:	74696e49 5d495053 77654e20 72616320     InitSPI] New car
1a005fe0:	74732064 73757461 6e49203a 74726573     d status: Insert
1a005ff0:	0d2e6465 ffff000a                       ed......

1a005ff8 <ExtRateIn>:
1a005ff8:	00000000                                ....

1a005ffc <GpioButtons>:
1a005ffc:	08000400 09010900                       ........

1a006004 <GpioLeds>:
1a006004:	01050005 0e000205 0c010b01              ............

1a006010 <GpioPorts>:
1a006010:	03030003 0f050403 05031005 07030603     ................
1a006020:	ffff0802                                ....

1a006024 <OscRateIn>:
1a006024:	00b71b00                                ....

1a006028 <InitClkStates>:
1a006028:	01010f01                                ....

1a00602c <pinmuxing>:
1a00602c:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a00603c:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a00604c:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a00605c:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a00606c:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a00607c:	00d50301 00d50401 00160107 00560207     ..............V.
1a00608c:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a00609c:	00570206                                ..W.

1a0060a0 <UART_BClock>:
1a0060a0:	01a201c2 01620182                       ......b.

1a0060a8 <UART_PClock>:
1a0060a8:	00820081 00a200a1 08040201 0f0f0f03     ................
1a0060b8:	000000ff                                ....

1a0060bc <periph_to_base>:
1a0060bc:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0060cc:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a0060dc:	000100e0 01000100 01200003 00060120     .......... . ...
1a0060ec:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a0060fc:	01820013 00120182 01a201a2 01c20011     ................
1a00610c:	001001c2 01e201e2 0202000f 000e0202     ................
1a00611c:	02220222 0223000d 001c0223              "."...#.#...

1a006128 <InitClkStates>:
1a006128:	00010100 00010909 0001090a 01010701     ................
1a006138:	00010902 00010906 0101090c 0001090d     ................
1a006148:	0001090e 0001090f 00010910 00010911     ................
1a006158:	00010912 00010913 00011114 00011119     ................
1a006168:	0001111a 0001111b                       ........

1a006170 <lpcUarts>:
1a006170:	40081000 06020406 00180205 40081000     ...@...........@
1a006180:	09070509 00180706 40082000 00000000     ......... .@....
1a006190:	00190000 400c1000 07060107 001a0602     .......@........
1a0061a0:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a0061b0:	02020302 001b0204                       ........

1a0061b8 <gpioPinsInit>:
1a0061b8:	02000104 00050701 05010d03 04080100     ................
1a0061c8:	02020002 02000304 00000403 04070002     ................
1a0061d8:	030c0300 09050402 05040103 04030208     ................
1a0061e8:	04020305 06040504 0802000c 03000b06     ................
1a0061f8:	00090607 07060503 060f0504 03030004     ................
1a006208:	02000404 00050404 06040502 04060200     ................
1a006218:	0c050408 05040a04 0003010e 14010a00     ................
1a006228:	010f0000 0d000012 00001101 0010010c     ................
1a006238:	07070300 000f0300 01000001 00000000     ................
1a006248:	000a0600 08060603 06100504 04030005     ................
1a006258:	03000106 04090400 04010d05 010b0000     ................
1a006268:	0200000f 00000001 00010104 02010800     ................
1a006278:	01090000 09010006 05040002 04010200     ................
1a006288:	02020105 02020504 0e00000a 01000b02     ................
1a006298:	000c020b ffff0c01                       ........

1a0062a0 <__sf_fake_stderr>:
	...

1a0062c0 <__sf_fake_stdin>:
	...

1a0062e0 <__sf_fake_stdout>:
	...
1a006300:	33323130 37363534 42413938 46454443     0123456789ABCDEF
1a006310:	32313000 36353433 61393837 65646362     .0123456789abcde
1a006320:	2d230066 00202b30 004c6c68 45676665     f.#-0+ .hlL.efgE
1a006330:	ff004746                                FG..
